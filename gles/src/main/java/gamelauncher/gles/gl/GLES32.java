package gamelauncher.gles.gl;

import de.dasbabypixel.annotations.Api;

public interface GLES32 extends GLES31 {

    /**
     * GL_CONTEXT_FLAG_DEBUG_BIT {@value}
     */
    @Api
    int GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;

    /**
     * GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT {@value}
     */
    @Api
    int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;

    /**
     * GL_GEOMETRY_SHADER_BIT {@value}
     */
    @Api
    int GL_GEOMETRY_SHADER_BIT = 0x00000004;

    /**
     * GL_TESS_CONTROL_SHADER_BIT {@value}
     */
    @Api
    int GL_TESS_CONTROL_SHADER_BIT = 0x00000008;

    /**
     * GL_TESS_EVALUATION_SHADER_BIT {@value}
     */
    @Api
    int GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;

    /**
     * GL_QUADS {@value}
     */
    @Api
    int GL_QUADS = 0x0007;

    /**
     * GL_LINES_ADJACENCY {@value}
     */
    @Api
    int GL_LINES_ADJACENCY = 0x000A;

    /**
     * GL_LINE_STRIP_ADJACENCY {@value}
     */
    @Api
    int GL_LINE_STRIP_ADJACENCY = 0x000B;

    /**
     * GL_TRIANGLES_ADJACENCY {@value}
     */
    @Api
    int GL_TRIANGLES_ADJACENCY = 0x000C;

    /**
     * GL_TRIANGLE_STRIP_ADJACENCY {@value}
     */
    @Api
    int GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;

    /**
     * GL_PATCHES {@value}
     */
    @Api
    int GL_PATCHES = 0x000E;

    /**
     * GL_STACK_OVERFLOW {@value}
     */
    @Api
    int GL_STACK_OVERFLOW = 0x0503;

    /**
     * GL_STACK_UNDERFLOW {@value}
     */
    @Api
    int GL_STACK_UNDERFLOW = 0x0504;

    /**
     * GL_CONTEXT_LOST {@value}
     */
    @Api
    int GL_CONTEXT_LOST = 0x0507;

    /**
     * GL_TEXTURE_BORDER_COLOR {@value}
     */
    @Api
    int GL_TEXTURE_BORDER_COLOR = 0x1004;

    /**
     * GL_VERTEX_ARRAY {@value}
     */
    @Api
    int GL_VERTEX_ARRAY = 0x8074;

    /**
     * GL_CLAMP_TO_BORDER {@value}
     */
    @Api
    int GL_CLAMP_TO_BORDER = 0x812D;

    /**
     * GL_CONTEXT_FLAGS {@value}
     */
    @Api
    int GL_CONTEXT_FLAGS = 0x821E;

    /**
     * GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED {@value}
     */
    @Api
    int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;

    /**
     * GL_DEBUG_OUTPUT_SYNCHRONOUS {@value}
     */
    @Api
    int GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;

    /**
     * GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH {@value}
     */
    @Api
    int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;

    /**
     * GL_DEBUG_CALLBACK_FUNCTION {@value}
     */
    @Api
    int GL_DEBUG_CALLBACK_FUNCTION = 0x8244;

    /**
     * GL_DEBUG_CALLBACK_USER_PARAM {@value}
     */
    @Api
    int GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;

    /**
     * GL_DEBUG_SOURCE_API {@value}
     */
    @Api
    int GL_DEBUG_SOURCE_API = 0x8246;

    /**
     * GL_DEBUG_SOURCE_WINDOW_SYSTEM {@value}
     */
    @Api
    int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;

    /**
     * GL_DEBUG_SOURCE_SHADER_COMPILER {@value}
     */
    @Api
    int GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;

    /**
     * GL_DEBUG_SOURCE_THIRD_PARTY {@value}
     */
    @Api
    int GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;

    /**
     * GL_DEBUG_SOURCE_APPLICATION {@value}
     */
    @Api
    int GL_DEBUG_SOURCE_APPLICATION = 0x824A;

    /**
     * GL_DEBUG_SOURCE_OTHER {@value}
     */
    @Api
    int GL_DEBUG_SOURCE_OTHER = 0x824B;

    /**
     * GL_DEBUG_TYPE_ERROR {@value}
     */
    @Api
    int GL_DEBUG_TYPE_ERROR = 0x824C;

    /**
     * GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR {@value}
     */
    @Api
    int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;

    /**
     * GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR {@value}
     */
    @Api
    int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;

    /**
     * GL_DEBUG_TYPE_PORTABILITY {@value}
     */
    @Api
    int GL_DEBUG_TYPE_PORTABILITY = 0x824F;

    /**
     * GL_DEBUG_TYPE_PERFORMANCE {@value}
     */
    @Api
    int GL_DEBUG_TYPE_PERFORMANCE = 0x8250;

    /**
     * GL_DEBUG_TYPE_OTHER {@value}
     */
    @Api
    int GL_DEBUG_TYPE_OTHER = 0x8251;

    /**
     * GL_LOSE_CONTEXT_ON_RESET {@value}
     */
    @Api
    int GL_LOSE_CONTEXT_ON_RESET = 0x8252;

    /**
     * GL_GUILTY_CONTEXT_RESET {@value}
     */
    @Api
    int GL_GUILTY_CONTEXT_RESET = 0x8253;

    /**
     * GL_INNOCENT_CONTEXT_RESET {@value}
     */
    @Api
    int GL_INNOCENT_CONTEXT_RESET = 0x8254;

    /**
     * GL_UNKNOWN_CONTEXT_RESET {@value}
     */
    @Api
    int GL_UNKNOWN_CONTEXT_RESET = 0x8255;

    /**
     * GL_RESET_NOTIFICATION_STRATEGY {@value}
     */
    @Api
    int GL_RESET_NOTIFICATION_STRATEGY = 0x8256;

    /**
     * GL_LAYER_PROVOKING_VERTEX {@value}
     */
    @Api
    int GL_LAYER_PROVOKING_VERTEX = 0x825E;

    /**
     * GL_UNDEFINED_VERTEX {@value}
     */
    @Api
    int GL_UNDEFINED_VERTEX = 0x8260;

    /**
     * GL_NO_RESET_NOTIFICATION {@value}
     */
    @Api
    int GL_NO_RESET_NOTIFICATION = 0x8261;

    /**
     * GL_DEBUG_TYPE_MARKER {@value}
     */
    @Api
    int GL_DEBUG_TYPE_MARKER = 0x8268;

    /**
     * GL_DEBUG_TYPE_PUSH_GROUP {@value}
     */
    @Api
    int GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;

    /**
     * GL_DEBUG_TYPE_POP_GROUP {@value}
     */
    @Api
    int GL_DEBUG_TYPE_POP_GROUP = 0x826A;

    /**
     * GL_DEBUG_SEVERITY_NOTIFICATION {@value}
     */
    @Api
    int GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;

    /**
     * GL_MAX_DEBUG_GROUP_STACK_DEPTH {@value}
     */
    @Api
    int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;

    /**
     * GL_DEBUG_GROUP_STACK_DEPTH {@value}
     */
    @Api
    int GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;

    /**
     * GL_BUFFER {@value}
     */
    @Api
    int GL_BUFFER = 0x82E0;

    /**
     * GL_SHADER {@value}
     */
    @Api
    int GL_SHADER = 0x82E1;

    /**
     * GL_PROGRAM {@value}
     */
    @Api
    int GL_PROGRAM = 0x82E2;

    /**
     * GL_QUERY {@value}
     */
    @Api
    int GL_QUERY = 0x82E3;

    /**
     * GL_PROGRAM_PIPELINE {@value}
     */
    @Api
    int GL_PROGRAM_PIPELINE = 0x82E4;

    /**
     * GL_SAMPLER {@value}
     */
    @Api
    int GL_SAMPLER = 0x82E6;

    /**
     * GL_MAX_LABEL_LENGTH {@value}
     */
    @Api
    int GL_MAX_LABEL_LENGTH = 0x82E8;

    /**
     * GL_MAX_TESS_CONTROL_INPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;

    /**
     * GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;

    /**
     * GL_GEOMETRY_SHADER_INVOCATIONS {@value}
     */
    @Api
    int GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;

    /**
     * GL_GEOMETRY_VERTICES_OUT {@value}
     */
    @Api
    int GL_GEOMETRY_VERTICES_OUT = 0x8916;

    /**
     * GL_GEOMETRY_INPUT_TYPE {@value}
     */
    @Api
    int GL_GEOMETRY_INPUT_TYPE = 0x8917;

    /**
     * GL_GEOMETRY_OUTPUT_TYPE {@value}
     */
    @Api
    int GL_GEOMETRY_OUTPUT_TYPE = 0x8918;

    /**
     * GL_MAX_GEOMETRY_UNIFORM_BLOCKS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;

    /**
     * GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;

    /**
     * GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;

    /**
     * GL_TEXTURE_BUFFER {@value}
     */
    @Api
    int GL_TEXTURE_BUFFER = 0x8C2A;

    /**
     * GL_TEXTURE_BUFFER_BINDING {@value}
     */
    @Api
    int GL_TEXTURE_BUFFER_BINDING = 0x8C2A;

    /**
     * GL_MAX_TEXTURE_BUFFER_SIZE {@value}
     */
    @Api
    int GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;

    /**
     * GL_TEXTURE_BINDING_BUFFER {@value}
     */
    @Api
    int GL_TEXTURE_BINDING_BUFFER = 0x8C2C;

    /**
     * GL_TEXTURE_BUFFER_DATA_STORE_BINDING {@value}
     */
    @Api
    int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;

    /**
     * GL_SAMPLE_SHADING {@value}
     */
    @Api
    int GL_SAMPLE_SHADING = 0x8C36;

    /**
     * GL_MIN_SAMPLE_SHADING_VALUE {@value}
     */
    @Api
    int GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;

    /**
     * GL_PRIMITIVES_GENERATED {@value}
     */
    @Api
    int GL_PRIMITIVES_GENERATED = 0x8C87;

    /**
     * GL_FRAMEBUFFER_ATTACHMENT_LAYERED {@value}
     */
    @Api
    int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;

    /**
     * GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS {@value}
     */
    @Api
    int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;

    /**
     * GL_SAMPLER_BUFFER {@value}
     */
    @Api
    int GL_SAMPLER_BUFFER = 0x8DC2;

    /**
     * GL_INT_SAMPLER_BUFFER {@value}
     */
    @Api
    int GL_INT_SAMPLER_BUFFER = 0x8DD0;

    /**
     * GL_UNSIGNED_INT_SAMPLER_BUFFER {@value}
     */
    @Api
    int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;

    /**
     * GL_GEOMETRY_SHADER {@value}
     */
    @Api
    int GL_GEOMETRY_SHADER = 0x8DD9;

    /**
     * GL_MAX_GEOMETRY_UNIFORM_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;

    /**
     * GL_MAX_GEOMETRY_OUTPUT_VERTICES {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;

    /**
     * GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;

    /**
     * GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;

    /**
     * GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;

    /**
     * GL_FIRST_VERTEX_CONVENTION {@value}
     */
    @Api
    int GL_FIRST_VERTEX_CONVENTION = 0x8E4D;

    /**
     * GL_LAST_VERTEX_CONVENTION {@value}
     */
    @Api
    int GL_LAST_VERTEX_CONVENTION = 0x8E4E;

    /**
     * GL_MAX_GEOMETRY_SHADER_INVOCATIONS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;

    /**
     * GL_MIN_FRAGMENT_INTERPOLATION_OFFSET {@value}
     */
    @Api
    int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;

    /**
     * GL_MAX_FRAGMENT_INTERPOLATION_OFFSET {@value}
     */
    @Api
    int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;

    /**
     * GL_FRAGMENT_INTERPOLATION_OFFSET_BITS {@value}
     */
    @Api
    int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;

    /**
     * GL_PATCH_VERTICES {@value}
     */
    @Api
    int GL_PATCH_VERTICES = 0x8E72;

    /**
     * GL_TESS_CONTROL_OUTPUT_VERTICES {@value}
     */
    @Api
    int GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;

    /**
     * GL_TESS_GEN_MODE {@value}
     */
    @Api
    int GL_TESS_GEN_MODE = 0x8E76;

    /**
     * GL_TESS_GEN_SPACING {@value}
     */
    @Api
    int GL_TESS_GEN_SPACING = 0x8E77;

    /**
     * GL_TESS_GEN_VERTEX_ORDER {@value}
     */
    @Api
    int GL_TESS_GEN_VERTEX_ORDER = 0x8E78;

    /**
     * GL_TESS_GEN_POINT_MODE {@value}
     */
    @Api
    int GL_TESS_GEN_POINT_MODE = 0x8E79;

    /**
     * GL_ISOLINES {@value}
     */
    @Api
    int GL_ISOLINES = 0x8E7A;

    /**
     * GL_FRACTIONAL_ODD {@value}
     */
    @Api
    int GL_FRACTIONAL_ODD = 0x8E7B;

    /**
     * GL_FRACTIONAL_EVEN {@value}
     */
    @Api
    int GL_FRACTIONAL_EVEN = 0x8E7C;

    /**
     * GL_MAX_PATCH_VERTICES {@value}
     */
    @Api
    int GL_MAX_PATCH_VERTICES = 0x8E7D;

    /**
     * GL_MAX_TESS_GEN_LEVEL {@value}
     */
    @Api
    int GL_MAX_TESS_GEN_LEVEL = 0x8E7E;

    /**
     * GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;

    /**
     * GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;

    /**
     * GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;

    /**
     * GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;

    /**
     * GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;

    /**
     * GL_MAX_TESS_PATCH_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;

    /**
     * GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;

    /**
     * GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;

    /**
     * GL_TESS_EVALUATION_SHADER {@value}
     */
    @Api
    int GL_TESS_EVALUATION_SHADER = 0x8E87;

    /**
     * GL_TESS_CONTROL_SHADER {@value}
     */
    @Api
    int GL_TESS_CONTROL_SHADER = 0x8E88;

    /**
     * GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;

    /**
     * GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;

    /**
     * GL_TEXTURE_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;

    /**
     * GL_TEXTURE_BINDING_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;

    /**
     * GL_SAMPLER_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;

    /**
     * GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW {@value}
     */
    @Api
    int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;

    /**
     * GL_INT_SAMPLER_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;

    /**
     * GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;

    /**
     * GL_IMAGE_BUFFER {@value}
     */
    @Api
    int GL_IMAGE_BUFFER = 0x9051;

    /**
     * GL_IMAGE_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;

    /**
     * GL_INT_IMAGE_BUFFER {@value}
     */
    @Api
    int GL_INT_IMAGE_BUFFER = 0x905C;

    /**
     * GL_INT_IMAGE_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;

    /**
     * GL_UNSIGNED_INT_IMAGE_BUFFER {@value}
     */
    @Api
    int GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;

    /**
     * GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY {@value}
     */
    @Api
    int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;

    /**
     * GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;

    /**
     * GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;

    /**
     * GL_MAX_GEOMETRY_IMAGE_UNIFORMS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;

    /**
     * GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;

    /**
     * GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;

    /**
     * GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;

    /**
     * GL_TEXTURE_2D_MULTISAMPLE_ARRAY {@value}
     */
    @Api
    int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;

    /**
     * GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY {@value}
     */
    @Api
    int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;

    /**
     * GL_SAMPLER_2D_MULTISAMPLE_ARRAY {@value}
     */
    @Api
    int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;

    /**
     * GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY {@value}
     */
    @Api
    int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;

    /**
     * GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY {@value}
     */
    @Api
    int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;

    /**
     * GL_MAX_GEOMETRY_INPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;

    /**
     * GL_MAX_GEOMETRY_OUTPUT_COMPONENTS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;

    /**
     * GL_MAX_DEBUG_MESSAGE_LENGTH {@value}
     */
    @Api
    int GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;

    /**
     * GL_MAX_DEBUG_LOGGED_MESSAGES {@value}
     */
    @Api
    int GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;

    /**
     * GL_DEBUG_LOGGED_MESSAGES {@value}
     */
    @Api
    int GL_DEBUG_LOGGED_MESSAGES = 0x9145;

    /**
     * GL_DEBUG_SEVERITY_HIGH {@value}
     */
    @Api
    int GL_DEBUG_SEVERITY_HIGH = 0x9146;

    /**
     * GL_DEBUG_SEVERITY_MEDIUM {@value}
     */
    @Api
    int GL_DEBUG_SEVERITY_MEDIUM = 0x9147;

    /**
     * GL_DEBUG_SEVERITY_LOW {@value}
     */
    @Api
    int GL_DEBUG_SEVERITY_LOW = 0x9148;

    /**
     * GL_TEXTURE_BUFFER_OFFSET {@value}
     */
    @Api
    int GL_TEXTURE_BUFFER_OFFSET = 0x919D;

    /**
     * GL_TEXTURE_BUFFER_SIZE {@value}
     */
    @Api
    int GL_TEXTURE_BUFFER_SIZE = 0x919E;

    /**
     * GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT {@value}
     */
    @Api
    int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;

    /**
     * GL_MULTIPLY {@value}
     */
    @Api
    int GL_MULTIPLY = 0x9294;

    /**
     * GL_SCREEN {@value}
     */
    @Api
    int GL_SCREEN = 0x9295;

    /**
     * GL_OVERLAY {@value}
     */
    @Api
    int GL_OVERLAY = 0x9296;

    /**
     * GL_DARKEN {@value}
     */
    @Api
    int GL_DARKEN = 0x9297;

    /**
     * GL_LIGHTEN {@value}
     */
    @Api
    int GL_LIGHTEN = 0x9298;

    /**
     * GL_COLORDODGE {@value}
     */
    @Api
    int GL_COLORDODGE = 0x9299;

    /**
     * GL_COLORBURN {@value}
     */
    @Api
    int GL_COLORBURN = 0x929A;

    /**
     * GL_HARDLIGHT {@value}
     */
    @Api
    int GL_HARDLIGHT = 0x929B;

    /**
     * GL_SOFTLIGHT {@value}
     */
    @Api
    int GL_SOFTLIGHT = 0x929C;

    /**
     * GL_DIFFERENCE {@value}
     */
    @Api
    int GL_DIFFERENCE = 0x929E;

    /**
     * GL_EXCLUSION {@value}
     */
    @Api
    int GL_EXCLUSION = 0x92A0;

    /**
     * GL_HSL_HUE {@value}
     */
    @Api
    int GL_HSL_HUE = 0x92AD;

    /**
     * GL_HSL_SATURATION {@value}
     */
    @Api
    int GL_HSL_SATURATION = 0x92AE;

    /**
     * GL_HSL_COLOR {@value}
     */
    @Api
    int GL_HSL_COLOR = 0x92AF;

    /**
     * GL_HSL_LUMINOSITY {@value}
     */
    @Api
    int GL_HSL_LUMINOSITY = 0x92B0;

    /**
     * GL_PRIMITIVE_BOUNDING_BOX {@value}
     */
    @Api
    int GL_PRIMITIVE_BOUNDING_BOX = 0x92BE;

    /**
     * GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;

    /**
     * GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;

    /**
     * GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;

    /**
     * GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS {@value}
     */
    @Api
    int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;

    /**
     * GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS {@value}
     */
    @Api
    int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;

    /**
     * GL_MAX_GEOMETRY_ATOMIC_COUNTERS {@value}
     */
    @Api
    int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;

    /**
     * GL_DEBUG_OUTPUT {@value}
     */
    @Api
    int GL_DEBUG_OUTPUT = 0x92E0;

    /**
     * GL_IS_PER_PATCH {@value}
     */
    @Api
    int GL_IS_PER_PATCH = 0x92E7;

    /**
     * GL_REFERENCED_BY_TESS_CONTROL_SHADER {@value}
     */
    @Api
    int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;

    /**
     * GL_REFERENCED_BY_TESS_EVALUATION_SHADER {@value}
     */
    @Api
    int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;

    /**
     * GL_REFERENCED_BY_GEOMETRY_SHADER {@value}
     */
    @Api
    int GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;

    /**
     * GL_FRAMEBUFFER_DEFAULT_LAYERS {@value}
     */
    @Api
    int GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;

    /**
     * GL_MAX_FRAMEBUFFER_LAYERS {@value}
     */
    @Api
    int GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;

    /**
     * GL_MULTISAMPLE_LINE_WIDTH_RANGE {@value}
     */
    @Api
    int GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381;

    /**
     * GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY {@value}
     */
    @Api
    int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382;

    /**
     * GL_COMPRESSED_RGBA_ASTC_4x4 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_4x4 = 0x93B0;

    /**
     * GL_COMPRESSED_RGBA_ASTC_5x4 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_5x4 = 0x93B1;

    /**
     * GL_COMPRESSED_RGBA_ASTC_5x5 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_5x5 = 0x93B2;

    /**
     * GL_COMPRESSED_RGBA_ASTC_6x5 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_6x5 = 0x93B3;

    /**
     * GL_COMPRESSED_RGBA_ASTC_6x6 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_6x6 = 0x93B4;

    /**
     * GL_COMPRESSED_RGBA_ASTC_8x5 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_8x5 = 0x93B5;

    /**
     * GL_COMPRESSED_RGBA_ASTC_8x6 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_8x6 = 0x93B6;

    /**
     * GL_COMPRESSED_RGBA_ASTC_8x8 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_8x8 = 0x93B7;

    /**
     * GL_COMPRESSED_RGBA_ASTC_10x5 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_10x5 = 0x93B8;

    /**
     * GL_COMPRESSED_RGBA_ASTC_10x6 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_10x6 = 0x93B9;

    /**
     * GL_COMPRESSED_RGBA_ASTC_10x8 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_10x8 = 0x93BA;

    /**
     * GL_COMPRESSED_RGBA_ASTC_10x10 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_10x10 = 0x93BB;

    /**
     * GL_COMPRESSED_RGBA_ASTC_12x10 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_12x10 = 0x93BC;

    /**
     * GL_COMPRESSED_RGBA_ASTC_12x12 {@value}
     */
    @Api
    int GL_COMPRESSED_RGBA_ASTC_12x12 = 0x93BD;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC;

    /**
     * GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 {@value}
     */
    @Api
    int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD;

    /**
     * glBlendBarrier
     * <div class="refentry" id="glBlendBarrier">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glBlendBarrier — specifies a boundary between advanced blending passes</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendBarrier</strong>(</code></td>
     *       <td><var class="pdparam">void</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glBlendBarrier</code> specifies a boundary between passes when using advanced blend equations. Any command that causes the value of a sample to be modified using the framebuffer is considered to touch the sample, including clears, blended or unblended primitives, and BlitFramebuffer copies. Defined results are guaranteed only if each sample is touched no more than once in any single rendering pass.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with an argument of <code class="constant">GL_BLEND_EQUATION_RGB</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glBlendBarrier</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glBlendEquation(int) glBlendEquation}, {@link GLES20#glBlendEquation(int) glBlendEquationi}, {@link GLES20#glGetBooleanv(int, boolean[], int) glGet}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glBlendBarrier();

    /**
     * glCopyImageSubData
     * <div class="refentry" id="glCopyImageSubData">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glCopyImageSubData — perform a raw data copy between two images</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glCopyImageSubData</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">srcName</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">srcTarget</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">srcLevel</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">srcX</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">srcY</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">srcZ</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">dstName</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dstTarget</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">dstLevel</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">dstX</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">dstY</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">dstZ</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">srcWidth</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">srcHeight</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">srcDepth</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>srcName</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The name of a texture or renderbuffer object from which to copy.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcTarget</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The target representing the namespace of the source name <em class="parameter"><code>srcName</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcLevel</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The mipmap level to read from the source.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcX</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The X coordinate of the left edge of the souce region to copy.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcY</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The Y coordinate of the top edge of the souce region to copy.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcZ</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The Z coordinate of the near edge of the souce region to copy.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstName</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The name of a texture or renderbuffer object to which to copy.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstTarget</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The target representing the namespace of the destination name <em class="parameter"><code>dstName</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstX</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The X coordinate of the left edge of the destination region.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstY</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The Y coordinate of the top edge of the destination region.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstZ</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The Z coordinate of the near edge of the destination region.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcWidth</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The width of the region to be copied.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcHeight</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The height of the region to be copied.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcDepth</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The depth of the region to be copied.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glCopyImageSubData</code> may be used to copy data from one image (i.e. texture or renderbuffer) to another. <code class="function">glCopyImageSubData</code> does not perform general-purpose conversions such as scaling, resizing, blending, color-space, or format conversions. It should be considered to operate in a manner similar to a CPU memcpy. CopyImageSubData can copy between images with different internal formats, provided the formats are compatible.</p>
     *   <p><code class="function">glCopyImageSubData</code> also allows copying between certain types of compressed and uncompressed internal formats. This copy does not perform on-the-fly compression or decompression. When copying from an uncompressed internal format to a compressed internal format, each texel of uncompressed data becomes a single block of compressed data. When copying from a compressed internal format to an uncompressed internal format, a block of compressed data becomes a single texel of uncompressed data. The texel size of the uncompressed format must be the same size the block size of the compressed formats. Thus it is permitted to copy between a 128-bit uncompressed format and a compressed format which uses 8-bit 4x4 blocks, or between a 64-bit uncompressed format and a compressed format which uses 4-bit 4x4 blocks.</p>
     *   <p>The source object is identified by <em class="parameter"><code>srcName</code></em> and <em class="parameter"><code>srcTarget</code></em> and the destination object is identified by <em class="parameter"><code>dstName</code></em> and <em class="parameter"><code>dstTarget</code></em>. The interpretation of the name depends on the value of the corresponding <em class="parameter"><code>target</code></em> parameter. If <em class="parameter"><code>target</code></em> is <code class="constant">GL_RENDERBUFFER</code>, the name is interpreted as the name of a renderbuffer object. If the target parameter is a texture target, the name is interpreted as a texture object. All texture targets are accepted, with the exception of <code class="constant">GL_TEXTURE_BUFFER</code> and the cubemap face selectors.</p>
     *   <p><em class="parameter"><code>srcLevel</code></em> and <em class="parameter"><code>dstLevel</code></em> identify the source and destination level of detail. For textures, this must be a valid level of detail in the texture object. For renderbuffers, this value must be zero.</p>
     *   <p><em class="parameter"><code>srcX</code></em>, <em class="parameter"><code>srcY</code></em>, and <em class="parameter"><code>srcZ</code></em> specify the lower left texel coordinates of a <em class="parameter"><code>srcWidth</code></em>-wide by <em class="parameter"><code>srcHeight</code></em>-high by <em class="parameter"><code>srcDepth</code></em>-deep rectangular subregion of the source texel array. Similarly, <em class="parameter"><code>dstX</code></em>, <em class="parameter"><code>dstY</code></em> and <em class="parameter"><code>dstZ</code></em> specify the coordinates of a subregion of the destination texel array. The source and destination subregions must be contained entirely within the specified level of the corresponding image objects.</p>
     *   <p>The dimensions are always specified in texels, even for compressed texture formats. However, it should be noted that if only one of the source and destination textures is compressed then the number of texels touched in the compressed image will be a factor of the block size larger than in the uncompressed image.</p>
     *   <p>Slices of a <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code> <code class="constant">GL_TEXTURE_3D</code> and faces of <code class="constant">GL_TEXTURE_CUBE_MAP</code> are all compatible provided they share a compatible internal format, and multiple slices or faces may be copied between these objects with a single call by specifying the starting slice with <em class="parameter"><code>srcZ</code></em> and <em class="parameter"><code>dstZ</code></em>, and the number of slices to be copied with <em class="parameter"><code>srcDepth</code></em>. Cubemap textures always have six faces which are selected by a zero-based face index.</p>
     *   <p>For the purposes of CopyImageSubData, two internal formats are considered compatible if any of the following conditions are met:</p>
     *   <div class="itemizedlist">
     *    <ul class="itemizedlist" style="list-style-type: disc; ">
     *     <li class="listitem"><p>the formats are the same,</p></li>
     *     <li class="listitem"><p>the formats are considered compatible if both internal formats are listed in the same entry of Table 1, or</p></li>
     *     <li class="listitem"><p>one format is compressed and the other is uncompressed and Table 2 lists the two formats in the same row.</p></li>
     *    </ul>
     *   </div>
     *   <p>If the formats are not compatible, an INVALID_OPERATION error is generated.</p>
     *   <div class="table" id="id-1.6.10">
     *    <div class="table-title">
     *     Table&nbsp;1.&nbsp;Compatible internal formats for glCopyImageSubData
     *    </div>
     *    <div class="table-contents">
     *     <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *      <colgroup>
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *      </colgroup>
     *      <thead>
     *       <tr>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Class </strong></span></th>
     *        <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Internal Formats </strong></span></th>
     *       </tr>
     *      </thead>
     *      <tbody>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">128-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32UI</code>, <code class="constant">GL_RGBA32I</code>, <code class="constant">GL_RGBA32F</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">96-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RGB32UI</code>, <code class="constant">GL_RGB32I</code>, <code class="constant">GL_RGB32F</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">64-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16UI</code>, <code class="constant">GL_RGBA16I</code>, <code class="constant">GL_RGBA16F</code>, <code class="constant">GL_RG32F</code>, <code class="constant">GL_RG32I</code>, <code class="constant">GL_RG32UI</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">48-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RGB16UI</code>, <code class="constant">GL_RGB16I</code>, <code class="constant">GL_RGB16F</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">32-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8UI</code>, <code class="constant">GL_RGBA8I</code>, <code class="constant">GL_RGBA8</code>, <code class="constant">GL_RGBA8_SNORM</code>, <code class="constant">GL_SRGB8_ALPHA8</code>, <code class="constant">GL_RGB9_E5</code>, <code class="constant">GL_RG16F</code>, <code class="constant">GL_RG16I</code>, <code class="constant">GL_RG16UI</code>, <code class="constant">GL_R11F_G11F_B10F</code>, <code class="constant">GL_RGB10_A2UI</code>, <code class="constant">GL_R32F</code>, <code class="constant">GL_R32UI</code>, <code class="constant">GL_R32I</code>, <code class="constant">GL_RGB10_A2</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">24-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RGB8UI</code>, <code class="constant">GL_RGB8I</code>, <code class="constant">GL_RGB8</code>, <code class="constant">GL_RGB8_SNORM</code>, <code class="constant">GL_SRGB8</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">16-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_RG8</code>, <code class="constant">GL_RG8_SNORM</code>, <code class="constant">GL_RG8I</code>, <code class="constant">GL_RG8UI</code>, <code class="constant">GL_R16F</code>, <code class="constant">GL_R16I</code>, <code class="constant">GL_R16UI</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8-bit</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_R8</code>, <code class="constant">GL_R8_SNORM</code>, <code class="constant">GL_R8I</code>, <code class="constant">GL_R8UI</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">EAC_R11</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_R11_EAC</code>, <code class="constant">GL_COMPRESSED_SIGNED_R11_EAC</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">EAC_RG11</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RG11_EAC</code>, <code class="constant">GL_COMPRESSED_SIGNED_RG11_EAC</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ETC2_RGB</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGB8_ETC2</code>, <code class="constant">GL_COMPRESSED_SRGB8_ETC2</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ETC2_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</code>, <code class="constant">GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ETC2_EAC_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA8_ETC2_EAC</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_4X4_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_4X4</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X4</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_5X4_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_5X4</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X4</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_5X5_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_5X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X5</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_6X5_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_6X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X5</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_6X6_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_6X6</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X6</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_8X5_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_8X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X5</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_8X6_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_8X6</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X6</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_8X8_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_8X8</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X8</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_10X5_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_10X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X5</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_10X6_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_10X6</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X6</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_10X8_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_10X8</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X8</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_10X10_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_10X10</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X10</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ASTC_12X10_RGBA</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_12X10</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X10</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; ">ASTC_12X12_RGBA</td>
     *        <td style="text-align: left; "><code class="constant">GL_COMPRESSED_RGBA_ASTC_12X12</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X12</code></td>
     *       </tr>
     *      </tbody>
     *     </table>
     *    </div>
     *   </div> <br class="table-break">
     *   <div class="table" id="id-1.6.11">
     *    <div class="table-title">
     *     Table&nbsp;2.&nbsp;Compatible formats for copying between compressed and uncompressed internal formats
     *    </div>
     *    <div class="table-contents">
     *     <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *      <colgroup>
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *      </colgroup>
     *      <thead>
     *       <tr>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texel / Block Size </strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Uncompressed Internal Format </strong></span></th>
     *        <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Compressed Internal Format(s) </strong></span></th>
     *       </tr>
     *      </thead>
     *      <tbody>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">64-bit</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32UI</code>, <code class="constant">GL_RGBA32I</code>, <code class="constant">GL_RGBA32F</code></td>
     *        <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">GL_COMPRESSED_RGBA_ETC2_EAC</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</code>, <code class="constant">GL_COMPRESSED_RG11_EAC</code>, <code class="constant">GL_COMPRESSED_SIGNED_RG11_EAC</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_4X4</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_5X4</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_5X5</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_6X5</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_6X6</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_8X5</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_8X6</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_8X8</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_10X5</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_10X6</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_10X8</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_10X10</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_12X10</code>, <code class="constant">GL_COMPRESSED_RGBA_ASTC_12X12</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4X4</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X4</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6X6</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X6</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8X8</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X5</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X6</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X8</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10X10</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X10</code>, <code class="constant">GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12X12</code></td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; ">128-bit</td>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_RGBA16UI</code>, <code class="constant">GL_RGBA16I</code>, <code class="constant">GL_RGBA16F</code>, <code class="constant">GL_RG32F</code>, <code class="constant">GL_RG32UI</code>, <code class="constant">GL_RG32I</code></td>
     *        <td style="text-align: left; "><code class="constant">GL_COMPRESSED_RGB8_ETC2</code>, <code class="constant">GL_COMPRESSED_SRGB8_ETC2</code>, <code class="constant">GL_COMPRESSED_R11_EAC</code>, <code class="constant">GL_COMPRESSED_SIGNED_R11_EAC</code>, <code class="constant">GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</code>, <code class="constant">GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</code></td>
     *       </tr>
     *      </tbody>
     *     </table>
     *    </div>
     *   </div> <br class="table-break">
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the texel size of the uncompressed image is not equal to the block size of the compressed image.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if either target parameter is not <code class="constant">GL_RENDERBUFFER</code>, a valid texture target other than <code class="constant">GL_TEXTURE_BUFFER</code>, or is one of the cubemap face selectors.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> does not match the type of the object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if either object is a texture and the texture is not complete.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the source and destination internal formats are not compatible, or if the number of samples do not match.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if either name does not correspond to a valid renderbuffer or texture object according to the corresponding target parameter.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if the specified level of either the source or destination is not a valid level for the corresponding image.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if the dimensions of the either subregion exceeds the boundaries of the corresponding image object, or if the image format is compressed and the dimensions of the subregion fail to meet the alignment constraints of the format.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glCopyImageSubData</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glCopyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

    /**
     * glDebugMessageControl
     * <div class="refentry" id="glDebugMessageControl">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDebugMessageControl — control the reporting of debug messages in a debug context</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDebugMessageControl</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">source</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">severity</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint *<var class="pdparam">ids</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">enabled</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>source</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The source of debug messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The type of debug messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severity</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The severity of debug messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the array <em class="parameter"><code>ids</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>ids</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of unsigned integers contianing the ids of the messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>enabled</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>A Boolean flag determining whether the selected messages should be enabled or disabled.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDebugMessageControl</code> controls the reporting of debug messages generated by a debug context. The parameters <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em> and <em class="parameter"><code>severity</code></em> form a filter to select messages from the pool of potential messages generated by the GL.</p>
     *   <p><em class="parameter"><code>source</code></em> may be <code class="constant">GL_DEBUG_SOURCE_API</code>, <code class="constant">GL_DEBUG_SOURCE_WINDOW_SYSTEM_</code>, <code class="constant">GL_DEBUG_SOURCE_SHADER_COMPILER</code>, <code class="constant">GL_DEBUG_SOURCE_THIRD_PARTY</code>, <code class="constant">GL_DEBUG_SOURCE_APPLICATION</code>, <code class="constant">GL_DEBUG_SOURCE_OTHER</code> to select messages generated by usage of the GL API, the window system, the shader compiler, third party tools or libraries, explicitly by the application or by some other source, respectively. It may also take the value <code class="constant">GL_DONT_CARE</code>. If <em class="parameter"><code>source</code></em> is not <code class="constant">GL_DONT_CARE</code> then only messages whose source matches <em class="parameter"><code>source</code></em> will be referenced.</p>
     *   <p><em class="parameter"><code>type</code></em> may be one of <code class="constant">GL_DEBUG_TYPE_ERROR</code>, <code class="constant">GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</code>, <code class="constant">GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</code>, <code class="constant">GL_DEBUG_TYPE_PORTABILITY</code>, <code class="constant">GL_DEBUG_TYPE_PERFORMANCE</code>, <code class="constant">GL_DEBUG_TYPE_MARKER</code>, <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>, or <code class="constant">GL_DEBUG_TYPE_OTHER</code> to indicate the type of messages describing GL errors, attempted use of deprecated features, triggering of undefined behavior, portability issues, performance notifications, markers, group push and pop events, and other types of messages, respectively. It may also take the value <code class="constant">GL_DONT_CARE</code>. If <em class="parameter"><code>type</code></em> is not <code class="constant">GL_DONT_CARE</code> then only messages whose type matches <em class="parameter"><code>type</code></em> will be referenced.</p>
     *   <p><em class="parameter"><code>severity</code></em> may be one of <code class="constant">GL_DEBUG_SEVERITY_LOW</code>, <code class="constant">GL_DEBUG_SEVERITY_MEDIUM</code>, or <code class="constant">GL_DEBUG_SEVERITY_HIGH</code> to select messages of low, medium or high severity messages or to <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code> for notifications. It may also take the value <code class="constant">GL_DONT_CARE</code>. If <em class="parameter"><code>severity</code></em> is not <code class="constant">GL_DONT_CARE</code> then only messages whose severity matches <em class="parameter"><code>severity</code></em> will be referenced.</p>
     *   <p><em class="parameter"><code>ids</code></em> contains a list of <em class="parameter"><code>count</code></em> message identifiers to select specific messages from the pool of available messages. If <em class="parameter"><code>count</code></em> is zero then the value of <em class="parameter"><code>ids</code></em> is ignored. Otherwise, only messages appearing in this list are selected. In this case, <em class="parameter"><code>source</code></em> and <em class="parameter"><code>type</code></em> may not be <code class="constant">GL_DONT_CARE</code> and <em class="parameter"><code>severity</code></em> must be <code class="constant">GL_DONT_CARE</code>.</p>
     *   <p>If <em class="parameter"><code>enabled</code></em> is <code class="constant">GL_TRUE</code> then messages that match the filter formed by <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em>, <em class="parameter"><code>severity</code></em> and <em class="parameter"><code>ids</code></em> are enabled. Otherwise, those messages are disabled.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.</p>
     *   <p><code class="constant">GL_DEBUG_TYPE_MARKER</code>, <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>, and <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code> are available only if the GL version is 4.3 or higher.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if any of <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em> or <em class="parameter"><code>severity</code></em> is not one of the accepted interface types.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>count</code></em> is non-zero and either <em class="parameter"><code>source</code></em> or <em class="parameter"><code>type</code></em> is <code class="constant">GL_DONT_CARE</code> or if <em class="parameter"><code>severity</code></em> is not <code class="constant">GL_DONT_CARE</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDebugMessageControl</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glGetDebugMessageLog(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int) glGetDebugMessageLog}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDebugMessageControl(int source, int type, int severity, int count, int[] ids, int offset, boolean enabled);

    /**
     * glDebugMessageControl
     * <div class="refentry" id="glDebugMessageControl">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDebugMessageControl — control the reporting of debug messages in a debug context</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDebugMessageControl</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">source</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">severity</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint *<var class="pdparam">ids</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">enabled</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>source</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The source of debug messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The type of debug messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severity</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The severity of debug messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the array <em class="parameter"><code>ids</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>ids</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of unsigned integers contianing the ids of the messages to enable or disable.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>enabled</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>A Boolean flag determining whether the selected messages should be enabled or disabled.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDebugMessageControl</code> controls the reporting of debug messages generated by a debug context. The parameters <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em> and <em class="parameter"><code>severity</code></em> form a filter to select messages from the pool of potential messages generated by the GL.</p>
     *   <p><em class="parameter"><code>source</code></em> may be <code class="constant">GL_DEBUG_SOURCE_API</code>, <code class="constant">GL_DEBUG_SOURCE_WINDOW_SYSTEM_</code>, <code class="constant">GL_DEBUG_SOURCE_SHADER_COMPILER</code>, <code class="constant">GL_DEBUG_SOURCE_THIRD_PARTY</code>, <code class="constant">GL_DEBUG_SOURCE_APPLICATION</code>, <code class="constant">GL_DEBUG_SOURCE_OTHER</code> to select messages generated by usage of the GL API, the window system, the shader compiler, third party tools or libraries, explicitly by the application or by some other source, respectively. It may also take the value <code class="constant">GL_DONT_CARE</code>. If <em class="parameter"><code>source</code></em> is not <code class="constant">GL_DONT_CARE</code> then only messages whose source matches <em class="parameter"><code>source</code></em> will be referenced.</p>
     *   <p><em class="parameter"><code>type</code></em> may be one of <code class="constant">GL_DEBUG_TYPE_ERROR</code>, <code class="constant">GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</code>, <code class="constant">GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</code>, <code class="constant">GL_DEBUG_TYPE_PORTABILITY</code>, <code class="constant">GL_DEBUG_TYPE_PERFORMANCE</code>, <code class="constant">GL_DEBUG_TYPE_MARKER</code>, <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>, or <code class="constant">GL_DEBUG_TYPE_OTHER</code> to indicate the type of messages describing GL errors, attempted use of deprecated features, triggering of undefined behavior, portability issues, performance notifications, markers, group push and pop events, and other types of messages, respectively. It may also take the value <code class="constant">GL_DONT_CARE</code>. If <em class="parameter"><code>type</code></em> is not <code class="constant">GL_DONT_CARE</code> then only messages whose type matches <em class="parameter"><code>type</code></em> will be referenced.</p>
     *   <p><em class="parameter"><code>severity</code></em> may be one of <code class="constant">GL_DEBUG_SEVERITY_LOW</code>, <code class="constant">GL_DEBUG_SEVERITY_MEDIUM</code>, or <code class="constant">GL_DEBUG_SEVERITY_HIGH</code> to select messages of low, medium or high severity messages or to <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code> for notifications. It may also take the value <code class="constant">GL_DONT_CARE</code>. If <em class="parameter"><code>severity</code></em> is not <code class="constant">GL_DONT_CARE</code> then only messages whose severity matches <em class="parameter"><code>severity</code></em> will be referenced.</p>
     *   <p><em class="parameter"><code>ids</code></em> contains a list of <em class="parameter"><code>count</code></em> message identifiers to select specific messages from the pool of available messages. If <em class="parameter"><code>count</code></em> is zero then the value of <em class="parameter"><code>ids</code></em> is ignored. Otherwise, only messages appearing in this list are selected. In this case, <em class="parameter"><code>source</code></em> and <em class="parameter"><code>type</code></em> may not be <code class="constant">GL_DONT_CARE</code> and <em class="parameter"><code>severity</code></em> must be <code class="constant">GL_DONT_CARE</code>.</p>
     *   <p>If <em class="parameter"><code>enabled</code></em> is <code class="constant">GL_TRUE</code> then messages that match the filter formed by <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em>, <em class="parameter"><code>severity</code></em> and <em class="parameter"><code>ids</code></em> are enabled. Otherwise, those messages are disabled.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.</p>
     *   <p><code class="constant">GL_DEBUG_TYPE_MARKER</code>, <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>, and <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code> are available only if the GL version is 4.3 or higher.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if any of <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em> or <em class="parameter"><code>severity</code></em> is not one of the accepted interface types.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>count</code></em> is non-zero and either <em class="parameter"><code>source</code></em> or <em class="parameter"><code>type</code></em> is <code class="constant">GL_DONT_CARE</code> or if <em class="parameter"><code>severity</code></em> is not <code class="constant">GL_DONT_CARE</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDebugMessageControl</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glGetDebugMessageLog(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int) glGetDebugMessageLog}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDebugMessageControl(int source, int type, int severity, int count, java.nio.IntBuffer ids, boolean enabled);

    /**
     * glDebugMessageInsert
     * <div class="refentry" id="glDebugMessageInsert">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDebugMessageInsert — inject an application-supplied message into the debug message queue</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDebugMessageInsert</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">source</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">id</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">severity</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">length</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const char *<var class="pdparam">message</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>source</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The source of the debug message to insert.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The type of the debug message insert.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>id</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The user-supplied identifier of the message to insert.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severity</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The severity of the debug messages to insert.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>length</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length string contained in the character array whose address is given by <em class="parameter"><code>message</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>message</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a character array containing the message to insert.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDebugMessageInsert</code> inserts a user-supplied message into the debug output queue. <em class="parameter"><code>source</code></em> specifies the source that will be used to classify the message and must be <code class="constant">GL_DEBUG_SOURCE_APPLICATION</code> or <code class="constant">GL_DEBUG_SOURCE_THIRD_PARTY</code>. All other sources are reserved for use by the GL implementation. <em class="parameter"><code>type</code></em> indicates the type of the message to be inserted and may be one of <code class="constant">GL_DEBUG_TYPE_ERROR</code>, <code class="constant">GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</code>, <code class="constant">GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</code>, <code class="constant">GL_DEBUG_TYPE_PORTABILITY</code>, <code class="constant">GL_DEBUG_TYPE_PERFORMANCE</code>, <code class="constant">GL_DEBUG_TYPE_MARKER</code>, <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>, or <code class="constant">GL_DEBUG_TYPE_OTHER</code>. <em class="parameter"><code>severity</code></em> indicates the severity of the message and may be <code class="constant">GL_DEBUG_SEVERITY_LOW</code>, <code class="constant">GL_DEBUG_SEVERITY_MEDIUM</code>, <code class="constant">GL_DEBUG_SEVERITY_HIGH</code> or <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code>. <em class="parameter"><code>id</code></em> is available for application defined use and may be any value. This value will be recorded and used to identify the message.</p>
     *   <p><em class="parameter"><code>length</code></em> contains a count of the characters in the character array whose address is given in <em class="parameter"><code>message</code></em>. If <em class="parameter"><code>length</code></em> is negative then <em class="parameter"><code>message</code></em> is treated as a null-terminated string. The length of the message, whether specified explicitly or implicitly, must be less than or equal to the implementation defined constant <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p><code class="constant">GL_DEBUG_TYPE_MARKER</code>, <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>, and <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code> are available only if the GL version is 4.3 or higher.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if any of <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em> or <em class="parameter"><code>severity</code></em> is not one of the accepted interface types.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if the length of the message is greater than the value of <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDebugMessageInsert</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageControl(int, int, int, int, int[], int, boolean) glDebugMessageControl}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glGetDebugMessageLog(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int) glGetDebugMessageLog}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDebugMessageInsert(int source, int type, int id, int severity, int length, String buf);

    /**
     * glDebugMessageCallback
     * <div class="refentry" id="glDebugMessageCallback">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDebugMessageCallback — specify a callback to receive debugging messages from the GL</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDebugMessageCallback</strong>(</code></td>
     *       <td>DEBUGPROC <var class="pdparam">callback</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const void * <var class="pdparam">userParam</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>callback</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a callback function that will be called when a debug message is generated.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>userParam</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>A user supplied pointer that will be passed on each invocation of <em class="parameter"><code>callback</code></em>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDebugMessageCallback</code> sets the current debug output callback function to the function whose address is given in <em class="parameter"><code>callback</code></em>. The callback function should have the following prototype (in C), or be otherwise compatible with such a prototype:</p>
     *   <pre class="programlisting">        typedef void (APIENTRY *DEBUGPROC)(GLenum source,
     *             GLenum type,
     *             GLuint id,
     *             GLenum severity,
     *             GLsizei length,
     *             const GLchar *message,
     *             const void *userParam);</pre>
     *   <p>This function is defined to have the same calling convention as the GL API functions. In most cases this is defined as <code class="code">APIENTRY</code>, although it will vary depending on platform, language and compiler.</p>
     *   <p>Each time a debug message is generated the debug callback function will be invoked with <em class="parameter"><code>source</code></em>, <em class="parameter"><code>type</code></em>, <em class="parameter"><code>id</code></em>, and <em class="parameter"><code>severity</code></em> associated with the message, and <em class="parameter"><code>length</code></em> set to the length of debug message whose character string is in the array pointed to by <em class="parameter"><code>message</code></em>. <em class="parameter"><code>userParam</code></em> will be set to the value passed in the <em class="parameter"><code>userParam</code></em> parameter to the most recent call to <code class="function">glDebugMessageCallback</code>.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>When the GL is in use remotely, the server may not be able to call functions in the client's address space. In such cases, the callback function may not be invoked and the user should retrieve debug messages from the context's debug message log by calling {@link GLES32#glGetDebugMessageLog(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int) glGetDebugMessageLog}.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDebugMessageCallback</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageControl(int, int, int, int, int[], int, boolean) glDebugMessageControl}, {@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glGetDebugMessageLog(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int) glGetDebugMessageLog}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDebugMessageCallback(DebugProc callback);

    /**
     * glGetDebugMessageLog
     * <div class="refentry" id="glGetDebugMessageLog">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetDebugMessageLog — retrieve messages from the debug message log</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLuint <strong class="fsfunc">glGetDebugMessageLog</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">sources</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">types</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">ids</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">severities</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei *<var class="pdparam">lengths</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLchar *<var class="pdparam">messageLog</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The number of debug messages to retrieve from the log.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The size of the buffer whose address is given by <em class="parameter"><code>messageLog</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>sources</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the sources of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>types</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the types of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>ids</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of unsigned integers to receive the ids of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severities</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the severites of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>lengths</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the lengths of the received messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>messageLog</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of characters that will receive the messages.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetDebugMessageLog</code> retrieves messages from the debug message log. A maximum of <em class="parameter"><code>count</code></em> messages are retrieved from the log. If <em class="parameter"><code>sources</code></em> is not NULL then the source of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>types</code></em> is not NULL then the type of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>id</code></em> is not NULL then the identifier of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>severities</code></em> is not NULL then the severity of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>lengths</code></em> is not NULL then the length of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array.</p>
     *   <p><em class="parameter"><code>messageLog</code></em> specifies the address of a character array into which the debug messages will be written. Each message will be concatenated onto the array starting at the first element of <em class="parameter"><code>messageLog</code></em>. <em class="parameter"><code>bufSize</code></em> specifies the size of the array <em class="parameter"><code>messageLog</code></em>. If a message will not fit into the remaining space in <em class="parameter"><code>messageLog</code></em> then the function terminates and returns the number of messages written so far, which may be zero.</p>
     *   <p>If <code class="function">glGetDebugMessageLog</code> returns zero then no messages are present in the debug log, or there was not enough space in <em class="parameter"><code>messageLog</code></em> to retrieve the first message in the queue. If <em class="parameter"><code>messageLog</code></em> is NULL then no messages are written and the value of <em class="parameter"><code>bufSize</code></em> is ignored.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> or <em class="parameter"><code>bufSize</code></em> is negative.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_LOGGED_MESSAGES</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_LOGGED_MESSAGES</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetDebugMessageLog</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glDebugMessageControl(int, int, int, int, int[], int, boolean) glDebugMessageControl}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    int glGetDebugMessageLog(int count, int bufSize, int[] sources, int sourcesOffset, int[] types, int typesOffset, int[] ids, int idsOffset, int[] severities, int severitiesOffset, int[] lengths, int lengthsOffset, byte[] messageLog, int messageLogOffset);

    /**
     * glGetDebugMessageLog
     * <div class="refentry" id="glGetDebugMessageLog">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetDebugMessageLog — retrieve messages from the debug message log</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLuint <strong class="fsfunc">glGetDebugMessageLog</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">sources</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">types</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">ids</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">severities</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei *<var class="pdparam">lengths</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLchar *<var class="pdparam">messageLog</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The number of debug messages to retrieve from the log.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The size of the buffer whose address is given by <em class="parameter"><code>messageLog</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>sources</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the sources of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>types</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the types of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>ids</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of unsigned integers to receive the ids of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severities</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the severites of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>lengths</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the lengths of the received messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>messageLog</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of characters that will receive the messages.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetDebugMessageLog</code> retrieves messages from the debug message log. A maximum of <em class="parameter"><code>count</code></em> messages are retrieved from the log. If <em class="parameter"><code>sources</code></em> is not NULL then the source of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>types</code></em> is not NULL then the type of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>id</code></em> is not NULL then the identifier of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>severities</code></em> is not NULL then the severity of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>lengths</code></em> is not NULL then the length of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array.</p>
     *   <p><em class="parameter"><code>messageLog</code></em> specifies the address of a character array into which the debug messages will be written. Each message will be concatenated onto the array starting at the first element of <em class="parameter"><code>messageLog</code></em>. <em class="parameter"><code>bufSize</code></em> specifies the size of the array <em class="parameter"><code>messageLog</code></em>. If a message will not fit into the remaining space in <em class="parameter"><code>messageLog</code></em> then the function terminates and returns the number of messages written so far, which may be zero.</p>
     *   <p>If <code class="function">glGetDebugMessageLog</code> returns zero then no messages are present in the debug log, or there was not enough space in <em class="parameter"><code>messageLog</code></em> to retrieve the first message in the queue. If <em class="parameter"><code>messageLog</code></em> is NULL then no messages are written and the value of <em class="parameter"><code>bufSize</code></em> is ignored.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> or <em class="parameter"><code>bufSize</code></em> is negative.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_LOGGED_MESSAGES</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_LOGGED_MESSAGES</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetDebugMessageLog</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glDebugMessageControl(int, int, int, int, int[], int, boolean) glDebugMessageControl}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    int glGetDebugMessageLog(int count, java.nio.IntBuffer sources, java.nio.IntBuffer types, java.nio.IntBuffer ids, java.nio.IntBuffer severities, java.nio.IntBuffer lengths, java.nio.ByteBuffer messageLog);

    /**
     * glGetDebugMessageLog
     * <div class="refentry" id="glGetDebugMessageLog">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetDebugMessageLog — retrieve messages from the debug message log</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLuint <strong class="fsfunc">glGetDebugMessageLog</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">sources</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">types</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">ids</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">severities</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei *<var class="pdparam">lengths</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLchar *<var class="pdparam">messageLog</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The number of debug messages to retrieve from the log.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The size of the buffer whose address is given by <em class="parameter"><code>messageLog</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>sources</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the sources of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>types</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the types of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>ids</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of unsigned integers to receive the ids of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severities</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the severites of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>lengths</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the lengths of the received messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>messageLog</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of characters that will receive the messages.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetDebugMessageLog</code> retrieves messages from the debug message log. A maximum of <em class="parameter"><code>count</code></em> messages are retrieved from the log. If <em class="parameter"><code>sources</code></em> is not NULL then the source of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>types</code></em> is not NULL then the type of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>id</code></em> is not NULL then the identifier of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>severities</code></em> is not NULL then the severity of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>lengths</code></em> is not NULL then the length of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array.</p>
     *   <p><em class="parameter"><code>messageLog</code></em> specifies the address of a character array into which the debug messages will be written. Each message will be concatenated onto the array starting at the first element of <em class="parameter"><code>messageLog</code></em>. <em class="parameter"><code>bufSize</code></em> specifies the size of the array <em class="parameter"><code>messageLog</code></em>. If a message will not fit into the remaining space in <em class="parameter"><code>messageLog</code></em> then the function terminates and returns the number of messages written so far, which may be zero.</p>
     *   <p>If <code class="function">glGetDebugMessageLog</code> returns zero then no messages are present in the debug log, or there was not enough space in <em class="parameter"><code>messageLog</code></em> to retrieve the first message in the queue. If <em class="parameter"><code>messageLog</code></em> is NULL then no messages are written and the value of <em class="parameter"><code>bufSize</code></em> is ignored.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> or <em class="parameter"><code>bufSize</code></em> is negative.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_LOGGED_MESSAGES</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_LOGGED_MESSAGES</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetDebugMessageLog</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glDebugMessageControl(int, int, int, int, int[], int, boolean) glDebugMessageControl}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    String[] glGetDebugMessageLog(int count, int[] sources, int sourcesOffset, int[] types, int typesOffset, int[] ids, int idsOffset, int[] severities, int severitiesOffset);

    /**
     * glGetDebugMessageLog
     * <div class="refentry" id="glGetDebugMessageLog">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetDebugMessageLog — retrieve messages from the debug message log</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLuint <strong class="fsfunc">glGetDebugMessageLog</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">sources</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">types</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">ids</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum *<var class="pdparam">severities</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei *<var class="pdparam">lengths</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLchar *<var class="pdparam">messageLog</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The number of debug messages to retrieve from the log.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The size of the buffer whose address is given by <em class="parameter"><code>messageLog</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>sources</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the sources of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>types</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the types of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>ids</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of unsigned integers to receive the ids of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>severities</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the severites of the retrieved messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>lengths</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of variables to receive the lengths of the received messages.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>messageLog</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of an array of characters that will receive the messages.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetDebugMessageLog</code> retrieves messages from the debug message log. A maximum of <em class="parameter"><code>count</code></em> messages are retrieved from the log. If <em class="parameter"><code>sources</code></em> is not NULL then the source of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>types</code></em> is not NULL then the type of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>id</code></em> is not NULL then the identifier of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>severities</code></em> is not NULL then the severity of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array. If <em class="parameter"><code>lengths</code></em> is not NULL then the length of each message is written into up to <em class="parameter"><code>count</code></em> elements of the array.</p>
     *   <p><em class="parameter"><code>messageLog</code></em> specifies the address of a character array into which the debug messages will be written. Each message will be concatenated onto the array starting at the first element of <em class="parameter"><code>messageLog</code></em>. <em class="parameter"><code>bufSize</code></em> specifies the size of the array <em class="parameter"><code>messageLog</code></em>. If a message will not fit into the remaining space in <em class="parameter"><code>messageLog</code></em> then the function terminates and returns the number of messages written so far, which may be zero.</p>
     *   <p>If <code class="function">glGetDebugMessageLog</code> returns zero then no messages are present in the debug log, or there was not enough space in <em class="parameter"><code>messageLog</code></em> to retrieve the first message in the queue. If <em class="parameter"><code>messageLog</code></em> is NULL then no messages are written and the value of <em class="parameter"><code>bufSize</code></em> is ignored.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> or <em class="parameter"><code>bufSize</code></em> is negative.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_LOGGED_MESSAGES</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_LOGGED_MESSAGES</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetDebugMessageLog</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageInsert(int, int, int, int, int, String) glDebugMessageInsert}, {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}, {@link GLES32#glDebugMessageControl(int, int, int, int, int[], int, boolean) glDebugMessageControl}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    String[] glGetDebugMessageLog(int count, java.nio.IntBuffer sources, java.nio.IntBuffer types, java.nio.IntBuffer ids, java.nio.IntBuffer severities);

    /**
     * glPushDebugGroup
     * <div class="refentry" id="glPushDebugGroup">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glPushDebugGroup — push a named debug group into the command stream</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glPushDebugGroup</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">source</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">id</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">length</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const char * <var class="pdparam">message</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>source</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The source of the debug message.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>id</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The identifier of the message.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>length</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the message to be sent to the debug output stream.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>message</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The a string containing the message to be sent to the debug output stream.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glPushDebugGroup</code> pushes a debug group described by the string <em class="parameter"><code>message</code></em> into the command stream. The value of <em class="parameter"><code>id</code></em> specifies the ID of messages generated. The parameter <em class="parameter"><code>length</code></em> contains the number of characters in <em class="parameter"><code>message</code></em>. If <em class="parameter"><code>length</code></em> is negative, it is implied that <em class="parameter"><code>message</code></em> contains a null terminated string. The message has the specified <em class="parameter"><code>source</code></em> and <em class="parameter"><code>id</code></em>, the <em class="parameter"><code>type</code></em> <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code>, and <em class="parameter"><code>severity</code></em> <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code>. The GL will put a new debug group on top of the debug group stack which inherits the control of the volume of debug output of the debug group previously residing on the top of the debug group stack. Because debug groups are strictly hierarchical, any additional control of the debug output volume will only apply within the active debug group and the debug groups pushed on top of the active debug group.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if the value of <em class="parameter"><code>source</code></em> is neither <code class="constant">GL_DEBUG_SOURCE_APPLICATION</code> nor <code class="constant">GL_DEBUG_SOURCE_THIRD_PARTY</code>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>length</code></em> is negative and the number of characters in <em class="parameter"><code>message</code></em>, excluding the null-terminator, is not less than the value of <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glPushDebugGroup</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glPopDebugGroup() glPopDebugGroup}, {@link GLES32#glObjectLabel(int, int, int, String) glObjectLabel}, {@link GLES32#glObjectPtrLabel(long, String) glObjectPtrLabel}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glPushDebugGroup(int source, int id, int length, String message);

    /**
     * glPopDebugGroup
     * <div class="refentry" id="glPopDebugGroup">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glPopDebugGroup — pop the active debug group</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glPopDebugGroup</strong>(</code></td>
     *       <td>void<code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glPopDebugGroup</code> pops the active debug group. After popping a debug group, the GL will also generate a debug output message describing its cause based on the <em class="parameter"><code>message</code></em> string, the source <em class="parameter"><code>source</code></em>, and an ID <em class="parameter"><code>id</code></em> submitted to the corresponding {@link GLES32#glPushDebugGroup(int, int, int, String) glPushDebugGroup} command. <code class="constant">GL_DEBUG_TYPE_PUSH_GROUP</code> and <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code> share a single namespace for message <em class="parameter"><code>id</code></em>. <em class="parameter"><code>severity</code></em> has the value <code class="constant">GL_DEBUG_SEVERITY_NOTIFICATION</code>. The <em class="parameter"><code>type</code></em> has the value <code class="constant">GL_DEBUG_TYPE_POP_GROUP</code>. Popping a debug group restores the debug output volume control of the parent debug group.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_STACK_UNDERFLOW</code> is generated if an attempt is made to pop the default debug group from the stack.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_DEBUG_MESSAGE_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glPopDebugGroup</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glPushDebugGroup(int, int, int, String) glPushDebugGroup}, {@link GLES32#glObjectLabel(int, int, int, String) glObjectLabel}, {@link GLES32#glObjectPtrLabel(long, String) glObjectPtrLabel}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glPopDebugGroup();

    /**
     * glObjectLabel
     * <div class="refentry" id="glObjectLabel">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glObjectLabel — label a named object identified within a namespace</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glObjectLabel</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">identifier</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">name</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">length</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const char * <var class="pdparam">label</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>identifier</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The namespace from which the name of the object is allocated.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>name</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The name of the object to label.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>length</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the label to be used for the object.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>label</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a string containing the label to assign to the object.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glObjectLabel</code> labels the object identified by <em class="parameter"><code>name</code></em> within the namespace given by <em class="parameter"><code>identifier</code></em>. <em class="parameter"><code>identifier</code></em> must be one of <code class="constant">GL_BUFFER</code>, <code class="constant">GL_SHADER</code>, <code class="constant">GL_PROGRAM</code>, <code class="constant">GL_VERTEX_ARRAY</code>, <code class="constant">GL_QUERY</code>, <code class="constant">GL_PROGRAM_PIPELINE</code>, <code class="constant">GL_TRANSFORM_FEEDBACK</code>, <code class="constant">GL_SAMPLER</code>, <code class="constant">GL_TEXTURE</code>, <code class="constant">GL_RENDERBUFFER</code>, <code class="constant">GL_FRAMEBUFFER</code>, to indicate the namespace containing the names of buffers, shaders, programs, vertex array objects, query objects, program pipelines, transform feedback objects, samplers, textures, renderbuffers and frame buffers, respectively.</p>
     *   <p><em class="parameter"><code>label</code></em> is the address of a string that will be used to label an object. <em class="parameter"><code>length</code></em> contains the number of characters in <em class="parameter"><code>label</code></em>. If <em class="parameter"><code>length</code></em> is negative, it is implied that <em class="parameter"><code>label</code></em> contains a null-terminated string. If <em class="parameter"><code>label</code></em> is NULL, any debug label is effectively removed from the object.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>identifier</code></em> is not one of the accepted object types.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>name</code></em> is not the name of an existing object of the type specified by <em class="parameter"><code>identifier</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if the number of characters in <em class="parameter"><code>label</code></em>, excluding the null terminator when <em class="parameter"><code>length</code></em> is negative, is greater than the value of <code class="constant">GL_MAX_LABEL_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_LABEL_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glObjectLabel</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glPushDebugGroup(int, int, int, String) glPushDebugGroup}, {@link GLES32#glPopDebugGroup() glPopDebugGroup}, {@link GLES32#glObjectPtrLabel(long, String) glObjectPtrLabel}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glObjectLabel(int identifier, int name, int length, String label);

    /**
     * glGetObjectLabel
     * <div class="refentry" id="glGetObjectLabel">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetObjectLabel — retrieve the label of a named object identified within a namespace</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetObjectLabel</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">identifier</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">name</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bifSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei * <var class="pdparam">length</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>char * <var class="pdparam">label</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>identifier</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The namespace from which the name of the object is allocated.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>name</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The name of the object whose label to retrieve.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the buffer whose address is in <em class="parameter"><code>label</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>length</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a variable to receive the length of the object label.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>label</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a string that will receive the object label.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetObjectLabel</code> retrieves the label of the object identified by <em class="parameter"><code>name</code></em> within the namespace given by <em class="parameter"><code>identifier</code></em>. <em class="parameter"><code>identifier</code></em> must be one of <code class="constant">GL_BUFFER</code>, <code class="constant">GL_SHADER</code>, <code class="constant">GL_PROGRAM</code>, <code class="constant">GL_VERTEX_ARRAY</code>, <code class="constant">GL_QUERY</code>, <code class="constant">GL_PROGRAM_PIPELINE</code>, <code class="constant">GL_TRANSFORM_FEEDBACK</code>, <code class="constant">GL_SAMPLER</code>, <code class="constant">GL_TEXTURE</code>, <code class="constant">GL_RENDERBUFFER</code>, <code class="constant">GL_FRAMEBUFFER</code>, to indicate the namespace containing the names of buffers, shaders, programs, vertex array objects, query objects, program pipelines, transform feedback objects, samplers, textures, renderbuffers and frame buffers, respectively.</p>
     *   <p><em class="parameter"><code>label</code></em> is the address of a string that will be used to store the object label. <em class="parameter"><code>bufSize</code></em> specifies the number of characters in the array identified by <em class="parameter"><code>label</code></em>. <em class="parameter"><code>length</code></em> contains the address of a variable which will receive the number of characters in the object label. If <em class="parameter"><code>length</code></em> is NULL, then it is ignored and no data is written. Likewise, if <em class="parameter"><code>label</code></em> is NULL, or if <em class="parameter"><code>bufSize</code></em> is zero then no data is written to <em class="parameter"><code>label</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>identifier</code></em> is not one of the accepted object types.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>name</code></em> is not the name of an existing object of the type specified by <em class="parameter"><code>identifier</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>bufSize</code></em> is zero.</p>
     *   <p>If not NULL, <em class="parameter"><code>length</code></em> and <em class="parameter"><code>label</code></em> should be addresses to which the client has write access, otherwise undefined behavior, including process termination may occur.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_LABEL_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetObjectLabel</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glPushDebugGroup(int, int, int, String) glPushDebugGroup}, {@link GLES32#glPopDebugGroup() glPopDebugGroup}, {@link GLES32#glObjectLabel(int, int, int, String) glObjectLabel}, {@link GLES32#glGetObjectPtrLabel(long) glGetObjectPtrLabel}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    String glGetObjectLabel(int identifier, int name);

    /**
     * glObjectPtrLabel
     * <div class="refentry" id="glObjectPtrLabel">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glObjectPtrLabel — label a sync object identified by a pointer</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glObjectPtrLabel</strong>(</code></td>
     *       <td>void * <var class="pdparam">ptr</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">length</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const char * <var class="pdparam">label</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>ptr</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>A pointer identifying a sync object.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>length</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the label to be used for the object.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>label</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a string containing the label to assign to the object.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glObjectPtrLabel</code> labels the sync object identified by <em class="parameter"><code>ptr</code></em>.</p>
     *   <p><em class="parameter"><code>label</code></em> is the address of a string that will be used to label the object. <em class="parameter"><code>length</code></em> contains the number of characters in <em class="parameter"><code>label</code></em>. If <em class="parameter"><code>length</code></em> is negative, it is implied that <em class="parameter"><code>label</code></em> contains a null-terminated string. If <em class="parameter"><code>label</code></em> is NULL, any debug label is effectively removed from the object.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>ptr</code></em> is not a valid sync object.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if the number of characters in <em class="parameter"><code>label</code></em>, excluding the null terminator when <em class="parameter"><code>length</code></em> is negative, is greater than the value of <code class="constant">GL_MAX_LABEL_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_LABEL_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glObjectPtrLabel</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glPushDebugGroup(int, int, int, String) glPushDebugGroup}, {@link GLES32#glPopDebugGroup() glPopDebugGroup}, {@link GLES32#glObjectLabel(int, int, int, String) glObjectLabel}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glObjectPtrLabel(long ptr, String label);

    /**
     * glGetObjectPtrLabel
     * <div class="refentry" id="glGetObjectPtrLabel">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetObjectPtrLabel — retrieve the label of a sync object identified by a pointer</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetObjectPtrLabel</strong>(</code></td>
     *       <td>void * <var class="pdparam">ptr</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bifSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei * <var class="pdparam">length</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>char * <var class="pdparam">label</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>ptr</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The name of the sync object whose label to retrieve.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The length of the buffer whose address is in <em class="parameter"><code>label</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>length</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a variable to receive the length of the object label.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>label</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>The address of a string that will receive the object label.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetObjectPtrLabel</code> retrieves the label of the sync object identified by <em class="parameter"><code>ptr</code></em>.</p>
     *   <p><em class="parameter"><code>label</code></em> is the address of a string that will be used to store the object label. <em class="parameter"><code>bufSize</code></em> specifies the number of characters in the array identified by <em class="parameter"><code>label</code></em>. <em class="parameter"><code>length</code></em> contains the address of a variable which will receive the number of characters in the object label. If <em class="parameter"><code>length</code></em> is NULL, then it is ignored and no data is written. Likewise, if <em class="parameter"><code>label</code></em> is NULL, or if <em class="parameter"><code>bufSize</code></em> is zero then no data is written to <em class="parameter"><code>label</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>identifier</code></em> is not one of the accepted object types.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>ptr</code></em> is not the name of an existing sync object.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>bufSize</code></em> is zero.</p>
     *   <p>If not NULL, <em class="parameter"><code>length</code></em> and <em class="parameter"><code>label</code></em> should be addresses to which the client has write access, otherwise undefined behavior, including process termination may occur.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_LABEL_LENGTH</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetObjectPtrLabel</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glPushDebugGroup(int, int, int, String) glPushDebugGroup}, {@link GLES32#glPopDebugGroup() glPopDebugGroup}, {@link GLES32#glObjectLabel(int, int, int, String) glObjectLabel}, {@link GLES32#glGetObjectLabel(int, int) glGetObjectLabel}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    String glGetObjectPtrLabel(long ptr);

    /**
     * glGetPointerv
     * <div class="refentry" id="glGetPointerv">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetPointerv — return the address of the specified pointer</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetPointerv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void ** <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the pointer to be returned. Must be one of <code class="constant">GL_DEBUG_CALLBACK_FUNCTION</code> or <code class="constant">GL_DEBUG_CALLBACK_USER_PARAM</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the pointer value specified by <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetPointerv</code> returns pointer information. <em class="parameter"><code>pname</code></em> indicates the pointer to be returned, and <em class="parameter"><code>params</code></em> is a pointer to a location in which to place the returned data. The parameters that may be queried include:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEBUG_CALLBACK_FUNCTION</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the current callback function set with the <em class="parameter"><code>callback</code></em> argument of {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEBUG_CALLBACK_USER_PARAM</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the user parameter to the current callback function set with the <em class="parameter"><code>userParam</code></em> argument of {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetPointerv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2014-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    long glGetPointerv(int pname);

    /**
     * glEnablei
     * <div class="refentry" id="glEnable">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glEnable — enable or disable server-side GL capabilities</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glEnable</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDisable</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glEnablei</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">index</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDisablei</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">index</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>cap</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a symbolic constant indicating a GL capability.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>index</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the switch to disable (for <code class="function">glEnablei</code> and <code class="function">glDisablei</code> only).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glEnable</code> and {@link GLES20#glDisable(int) glDisable} enable and disable various capabilities. Use {@link GLES20#glIsEnabled(int) glIsEnabled} or {@link GLES20#glGetBooleanv(int, boolean[], int) glGet} to determine the current setting of any capability. The initial value for each capability with the exception of <code class="constant">GL_DITHER</code> is <code class="constant">GL_FALSE</code>. The initial value for <code class="constant">GL_DITHER</code> is <code class="constant">GL_TRUE</code>.</p>
     *   <p>Both <code class="function">glEnable</code> and {@link GLES20#glDisable(int) glDisable} take a single argument, <em class="parameter"><code>cap</code></em>, which can assume one of the following values:</p>
     *   <p>Some of the GL's capabilities are indexed. <code class="function">glEnablei</code> and <code class="function">glDisablei</code> enable and disable indexed capabilities.</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_BLEND</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, blend the computed fragment color values with the values in the color buffers. See {@link GLES20#glBlendFunc(int, int) glBlendFunc}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_CULL_FACE</code> </span>
     *     </dt>
     *     <dd>
     *      <p></p>
     *      <p>If enabled, cull polygons based on their winding in window coordinates. See {@link GLES20#glCullFace(int) glCullFace}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEBUG_OUTPUT</code> </span>
     *     </dt>
     *     <dd>
     *      <p></p>
     *      <p>If enabled, debug messages are produced by a debug context. When disabled, the debug message log is silenced. Note that in a non-debug context, very few, if any messages might be produced, even when <code class="constant">GL_DEBUG_OUTPUT</code> is enabled.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEBUG_OUTPUT_SYNCHRONOUS</code> </span>
     *     </dt>
     *     <dd>
     *      <p></p>
     *      <p>If enabled, debug messages are produced synchronously by a debug context. If disabled, debug messages may be produced asynchronously. In particular, they may be delayed relative to the execution of GL commands, and the debug callback function may be called from a thread other than that in which the commands are executed. See {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_TEST</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, do depth comparisons and update the depth buffer. Note that even if the depth buffer exists and the depth mask is non-zero, the depth buffer is not updated if the depth test is disabled. See {@link GLES20#glDepthFunc(int) glDepthFunc} and {@link GLES20#glDepthRangef(float, float) glDepthRangef}.</p>
     *     </dd>
     *     <dt><span class="term"><code class="constant">GL_DITHER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, dither color components or indices before they are written to the color buffer.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_POLYGON_OFFSET_FILL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, an offset is added to depth values of a polygon's fragments before the depth comparison is performed. See {@link GLES20#glPolygonOffset(float, float) glPolygonOffset}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_PRIMITIVE_RESTART_FIXED_INDEX</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Enables primitive restarting. If enabled, any one of the draw commands which transfers a set of generic attribute array elements to the GL will restart the primitive when the index of the vertex is equal to
     *       <math overflow="scroll"><msup>
     *         <mn>
     *          2
     *         </mn>
     *         <mi>
     *          n
     *         </mi>
     *        </msup> <mo>
     *         −
     *        </mo> <mn>
     *         1
     *        </mn>
     *       </math> where <span class="emphasis"><em>n</em></span> is 8, 16 or 32 if the type is <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or <code class="constant">GL_UNSIGNED_INT</code>, respectively.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_RASTERIZER_DISCARD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, primitives are discarded immediately before the rasterization stage, but after the optional transform feedback stage. {@link GLES20#glClear(int) glClear} and {@link GLES30#glClearBufferiv(int, int, int[], int) glClearBuffer}* commands are also ignored.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SAMPLE_ALPHA_TO_COVERAGE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, compute a temporary coverage value where each bit is determined by the alpha value at the corresponding sample location. The temporary coverage value is then ANDed with the fragment coverage value.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SAMPLE_COVERAGE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, the fragment's coverage is ANDed with the temporary coverage value. If <code class="constant">GL_SAMPLE_COVERAGE_INVERT</code> is set to <code class="constant">GL_TRUE</code>, invert the coverage value. See {@link GLES20#glSampleCoverage(float, boolean) glSampleCoverage}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SAMPLE_MASK</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, the fragment's coverage is ANDed with the coverage value <code class="constant">GL_SAMPLE_MASK_VALUE</code>. See {@link GLES31#glSampleMaski(int, int) glSampleMaski}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SCISSOR_TEST</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, discard fragments that are outside the scissor rectangle. See {@link GLES20#glScissor(int, int, int, int) glScissor}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_STENCIL_TEST</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, do stencil testing and update the stencil buffer. See {@link GLES20#glStencilFunc(int, int, int) glStencilFunc} and {@link GLES20#glStencilOp(int, int, int) glStencilOp}.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>cap</code></em> is not one of the values listed previously.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glEnablei</code> and <code class="function">glDisablei</code> if <em class="parameter"><code>index</code></em> is greater than or equal to the number of indexed capabilities for <em class="parameter"><code>cap</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Any token accepted by <code class="function">glEnable</code> or <code class="function">glDisable</code> is also accepted by <code class="function">glEnablei</code> and <code class="function">glDisablei</code>, but if the capability is not indexed, the maximum value that <em class="parameter"><code>index</code></em> may take is zero.</p>
     *   <p>In general, passing an indexed capability to <code class="function">glEnable</code> or <code class="function">glDisable</code> will enable or disable that capability for all indices, respectively.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glIsEnabled(int) glIsEnabled}</p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glEnable</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glDisable</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glEnablei</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDisablei</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glBlendFunc(int, int) glBlendFunc}, {@link GLES20#glCullFace(int) glCullFace}, {@link GLES20#glDepthFunc(int) glDepthFunc}, {@link GLES20#glDepthRangef(float, float) glDepthRangef}, {@link GLES20#glGetBooleanv(int, boolean[], int) glGet}, {@link GLES20#glIsEnabled(int) glIsEnabled}, {@link GLES20#glPolygonOffset(float, float) glPolygonOffset}, {@link GLES20#glSampleCoverage(float, boolean) glSampleCoverage}, {@link GLES20#glScissor(int, int, int, int) glScissor}, {@link GLES20#glStencilFunc(int, int, int) glStencilFunc}, {@link GLES20#glStencilOp(int, int, int) glStencilOp},</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glEnablei(int target, int index);

    /**
     * glDisablei
     * <div class="refentry" id="glEnable">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glEnable — enable or disable server-side GL capabilities</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glEnable</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDisable</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glEnablei</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">index</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDisablei</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">index</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>cap</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a symbolic constant indicating a GL capability.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>index</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the switch to disable (for <code class="function">glEnablei</code> and <code class="function">glDisablei</code> only).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glEnable</code> and {@link GLES20#glDisable(int) glDisable} enable and disable various capabilities. Use {@link GLES20#glIsEnabled(int) glIsEnabled} or {@link GLES20#glGetBooleanv(int, boolean[], int) glGet} to determine the current setting of any capability. The initial value for each capability with the exception of <code class="constant">GL_DITHER</code> is <code class="constant">GL_FALSE</code>. The initial value for <code class="constant">GL_DITHER</code> is <code class="constant">GL_TRUE</code>.</p>
     *   <p>Both <code class="function">glEnable</code> and {@link GLES20#glDisable(int) glDisable} take a single argument, <em class="parameter"><code>cap</code></em>, which can assume one of the following values:</p>
     *   <p>Some of the GL's capabilities are indexed. <code class="function">glEnablei</code> and <code class="function">glDisablei</code> enable and disable indexed capabilities.</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_BLEND</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, blend the computed fragment color values with the values in the color buffers. See {@link GLES20#glBlendFunc(int, int) glBlendFunc}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_CULL_FACE</code> </span>
     *     </dt>
     *     <dd>
     *      <p></p>
     *      <p>If enabled, cull polygons based on their winding in window coordinates. See {@link GLES20#glCullFace(int) glCullFace}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEBUG_OUTPUT</code> </span>
     *     </dt>
     *     <dd>
     *      <p></p>
     *      <p>If enabled, debug messages are produced by a debug context. When disabled, the debug message log is silenced. Note that in a non-debug context, very few, if any messages might be produced, even when <code class="constant">GL_DEBUG_OUTPUT</code> is enabled.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEBUG_OUTPUT_SYNCHRONOUS</code> </span>
     *     </dt>
     *     <dd>
     *      <p></p>
     *      <p>If enabled, debug messages are produced synchronously by a debug context. If disabled, debug messages may be produced asynchronously. In particular, they may be delayed relative to the execution of GL commands, and the debug callback function may be called from a thread other than that in which the commands are executed. See {@link GLES32#glDebugMessageCallback(DebugProc) glDebugMessageCallback}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_TEST</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, do depth comparisons and update the depth buffer. Note that even if the depth buffer exists and the depth mask is non-zero, the depth buffer is not updated if the depth test is disabled. See {@link GLES20#glDepthFunc(int) glDepthFunc} and {@link GLES20#glDepthRangef(float, float) glDepthRangef}.</p>
     *     </dd>
     *     <dt><span class="term"><code class="constant">GL_DITHER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, dither color components or indices before they are written to the color buffer.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_POLYGON_OFFSET_FILL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, an offset is added to depth values of a polygon's fragments before the depth comparison is performed. See {@link GLES20#glPolygonOffset(float, float) glPolygonOffset}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_PRIMITIVE_RESTART_FIXED_INDEX</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Enables primitive restarting. If enabled, any one of the draw commands which transfers a set of generic attribute array elements to the GL will restart the primitive when the index of the vertex is equal to
     *       <math overflow="scroll"><msup>
     *         <mn>
     *          2
     *         </mn>
     *         <mi>
     *          n
     *         </mi>
     *        </msup> <mo>
     *         −
     *        </mo> <mn>
     *         1
     *        </mn>
     *       </math> where <span class="emphasis"><em>n</em></span> is 8, 16 or 32 if the type is <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or <code class="constant">GL_UNSIGNED_INT</code>, respectively.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_RASTERIZER_DISCARD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, primitives are discarded immediately before the rasterization stage, but after the optional transform feedback stage. {@link GLES20#glClear(int) glClear} and {@link GLES30#glClearBufferiv(int, int, int[], int) glClearBuffer}* commands are also ignored.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SAMPLE_ALPHA_TO_COVERAGE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, compute a temporary coverage value where each bit is determined by the alpha value at the corresponding sample location. The temporary coverage value is then ANDed with the fragment coverage value.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SAMPLE_COVERAGE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, the fragment's coverage is ANDed with the temporary coverage value. If <code class="constant">GL_SAMPLE_COVERAGE_INVERT</code> is set to <code class="constant">GL_TRUE</code>, invert the coverage value. See {@link GLES20#glSampleCoverage(float, boolean) glSampleCoverage}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SAMPLE_MASK</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, the fragment's coverage is ANDed with the coverage value <code class="constant">GL_SAMPLE_MASK_VALUE</code>. See {@link GLES31#glSampleMaski(int, int) glSampleMaski}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_SCISSOR_TEST</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, discard fragments that are outside the scissor rectangle. See {@link GLES20#glScissor(int, int, int, int) glScissor}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_STENCIL_TEST</code> </span>
     *     </dt>
     *     <dd>
     *      <p>If enabled, do stencil testing and update the stencil buffer. See {@link GLES20#glStencilFunc(int, int, int) glStencilFunc} and {@link GLES20#glStencilOp(int, int, int) glStencilOp}.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>cap</code></em> is not one of the values listed previously.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glEnablei</code> and <code class="function">glDisablei</code> if <em class="parameter"><code>index</code></em> is greater than or equal to the number of indexed capabilities for <em class="parameter"><code>cap</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Any token accepted by <code class="function">glEnable</code> or <code class="function">glDisable</code> is also accepted by <code class="function">glEnablei</code> and <code class="function">glDisablei</code>, but if the capability is not indexed, the maximum value that <em class="parameter"><code>index</code></em> may take is zero.</p>
     *   <p>In general, passing an indexed capability to <code class="function">glEnable</code> or <code class="function">glDisable</code> will enable or disable that capability for all indices, respectively.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glIsEnabled(int) glIsEnabled}</p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glEnable</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glDisable</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glEnablei</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDisablei</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glBlendFunc(int, int) glBlendFunc}, {@link GLES20#glCullFace(int) glCullFace}, {@link GLES20#glDepthFunc(int) glDepthFunc}, {@link GLES20#glDepthRangef(float, float) glDepthRangef}, {@link GLES20#glGetBooleanv(int, boolean[], int) glGet}, {@link GLES20#glIsEnabled(int) glIsEnabled}, {@link GLES20#glPolygonOffset(float, float) glPolygonOffset}, {@link GLES20#glSampleCoverage(float, boolean) glSampleCoverage}, {@link GLES20#glScissor(int, int, int, int) glScissor}, {@link GLES20#glStencilFunc(int, int, int) glStencilFunc}, {@link GLES20#glStencilOp(int, int, int) glStencilOp},</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDisablei(int target, int index);

    /**
     * glBlendEquationi
     * <div class="refentry" id="glBlendEquation">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glBlendEquation — specify the equation used for both the RGB blend equation and the Alpha blend equation</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendEquation</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">mode</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendEquationi</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">buf</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">mode</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>buf</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>for <code class="function">glBlendEquationi</code>, specifies the index of the draw buffer for which to set the blend equation.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>mode</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>specifies how source and destination colors are combined. It must be <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MIN</code>, <code class="constant">GL_MAX</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p>The blend equations determine how a new pixel (the ''source'' color) is combined with a pixel already in the framebuffer (the ''destination'' color). This function sets both the RGB blend equation and the alpha blend equation to a single equation. <code class="function">glBlendEquationi</code> specifies the blend equation for a single draw buffer whereas <code class="function">glBlendEquation</code> sets the blend equation for all draw buffers.</p>
     *   <p>Some of these equations use the source and destination blend factors specified by either {@link GLES20#glBlendFunc(int, int) glBlendFunc} or {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate}. See {@link GLES20#glBlendFunc(int, int) glBlendFunc} or {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate} for a description of the various blend factors.</p>
     *   <p>In the equations that follow, source and destination color components are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively.</p>
     *   <p>The result color is referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>. The source and destination blend factors are denoted <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively. For these equations all color components are understood to have values in the range <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="[" close="]">
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mn>
     *       1
     *      </mml:mn>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Mode </strong></span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> RGB Components </strong></span></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Alpha Component </strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FUNC_ADD</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FUNC_SUBTRACT</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FUNC_REVERSE_SUBTRACT</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_MIN</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_MAX</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p></p>
     *   <p>For the advanced blending equations, the source and destination color components are premultiplied by the alpha component prior to blending. The base source and destination colours are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d'
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d'
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively, and are calculated as follows: <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *     <mml:mo>
     *      =
     *     </mml:mo>
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        0
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        0
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        0
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, if <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       A
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       s
     *      </mml:mi>
     *     </mml:msub>
     *     <mml:mo>
     *      ==
     *     </mml:mo>
     *    </mml:math> 0, otherwise <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B'
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *     <mml:mo>
     *      =
     *     </mml:mo>
     *     <mml:mfenced open="(" close=")">
     *      <mml:mfrac>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         R
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         s
     *        </mml:mi>
     *       </mml:msub>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         A
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         s
     *        </mml:mi>
     *       </mml:msub>
     *      </mml:mfrac>
     *      <mml:mfrac>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         G
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         s
     *        </mml:mi>
     *       </mml:msub>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         A
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         s
     *        </mml:mi>
     *       </mml:msub>
     *      </mml:mfrac>
     *      <mml:mfrac>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         B
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         s
     *        </mml:mi>
     *       </mml:msub>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         A
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         s
     *        </mml:mi>
     *       </mml:msub>
     *      </mml:mfrac>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p></p>
     *   <p>All of the advanced blending equations perform the following equations:</p>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mi mathvariant="italic">
     *         R
     *        </mi>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R'
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R'
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p0
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <msub>
     *         <mi mathvariant="italic">
     *          R'
     *         </mi>
     *         <mi mathvariant="italic">
     *          s
     *         </mi>
     *        </msub>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p1
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <msub>
     *         <mi mathvariant="italic">
     *          R'
     *         </mi>
     *         <mi mathvariant="italic">
     *          d
     *         </mi>
     *        </msub>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p2
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mi mathvariant="italic">
     *         G
     *        </mi>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G'
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G'
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p0
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <msub>
     *         <mi mathvariant="italic">
     *          G'
     *         </mi>
     *         <mi mathvariant="italic">
     *          s
     *         </mi>
     *        </msub>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p1
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <msub>
     *         <mi mathvariant="italic">
     *          G'
     *         </mi>
     *         <mi mathvariant="italic">
     *          d
     *         </mi>
     *        </msub>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p2
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mi mathvariant="italic">
     *         B
     *        </mi>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B'
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B'
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p0
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <msub>
     *         <mi mathvariant="italic">
     *          B'
     *         </mi>
     *         <mi mathvariant="italic">
     *          s
     *         </mi>
     *        </msub>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p1
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <msub>
     *         <mi mathvariant="italic">
     *          B'
     *         </mi>
     *         <mi mathvariant="italic">
     *          d
     *         </mi>
     *        </msub>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p2
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mi mathvariant="italic">
     *         A
     *        </mi>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p0
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p1
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         +
     *        </mo>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p2
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </mrow>
     *      </math>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <p>Where the weighting functions <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:mi mathvariant="italic">
     *       p0,
     *      </mml:mi>
     *     </mml:mrow>
     *     <mml:mrow>
     *      <mml:mi mathvariant="italic">
     *       p1,
     *      </mml:mi>
     *     </mml:mrow>
     *     <mml:mrow>
     *      <mml:mi mathvariant="italic">
     *       and p2
     *      </mml:mi>
     *     </mml:mrow>
     *    </mml:math> are defined as follows:</p>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p0
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <msub>
     *          <mi mathvariant="italic">
     *           A
     *          </mi>
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </msub>
     *        </mrow>
     *        <mo>
     *
     *        </mo>
     *        <mrow>
     *         <msub>
     *          <mi mathvariant="italic">
     *           A
     *          </mi>
     *          <mi mathvariant="italic">
     *           d
     *          </mi>
     *         </msub>
     *        </mrow>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p1
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <msub>
     *          <mi mathvariant="italic">
     *           A
     *          </mi>
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </msub>
     *        </mrow>
     *        <mo>
     *
     *        </mo>
     *        <mfenced open="(" close=")">
     *         <mrow>
     *          <mi mathvariant="italic">
     *           1
     *          </mi>
     *          <mo>
     *           -
     *          </mo>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            d
     *           </mi>
     *          </msub>
     *         </mrow>
     *        </mfenced>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mrow>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          p2
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *        <mo>
     *         =
     *        </mo>
     *        <mrow>
     *         <msub>
     *          <mi mathvariant="italic">
     *           A
     *          </mi>
     *          <mi mathvariant="italic">
     *           d
     *          </mi>
     *         </msub>
     *        </mrow>
     *        <mo>
     *
     *        </mo>
     *        <mfenced open="(" close=")">
     *         <mrow>
     *          <mi mathvariant="italic">
     *           1
     *          </mi>
     *          <mo>
     *           -
     *          </mo>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </msub>
     *         </mrow>
     *        </mfenced>
     *       </mrow>
     *      </math>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Advanced Mode </strong></span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Blend Coefficients: </strong></span>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           f
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Conditions </strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_MULTIPLY</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">n/a</code></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SCREEN</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           +
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           -
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">n/a</code></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_OVERLAY</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *           <mo>
     *            -
     *           </mo>
     *           <mrow>
     *            <mn>
     *             2
     *            </mn>
     *           </mrow>
     *           <mo>
     *
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              1
     *             </mn>
     *             <mo>
     *              -
     *             </mo>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *           <mo>
     *
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              1
     *             </mn>
     *             <mo>
     *              -
     *             </mo>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </math></p></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           &lt;=
     *          </mo>
     *          <mn>
     *           0.5
     *          </mn>
     *         </mrow>
     *        </math> <p>otherwise</p></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DARKEN</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           min
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">n/a</code></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LIGHTEN</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           max
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">n/a</code></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_COLORDODGE</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           0
     *          </mn>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mo>
     *            min
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              1
     *             </mn>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *             <mo>
     *              /
     *             </mo>
     *             <mfenced open="(" close=")">
     *              <mrow>
     *               <mn>
     *                1
     *               </mn>
     *               <mo>
     *                -
     *               </mo>
     *               <msub>
     *                <mi mathvariant="italic">
     *                 C
     *                </mi>
     *                <mi mathvariant="italic">
     *                 s
     *                </mi>
     *               </msub>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </math></p> <p>
     *         <math overflow="scroll"><mrow>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </math></p></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           &lt;=
     *          </mo>
     *          <mn>
     *           0
     *          </mn>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;
     *           </mo>
     *           <mn>
     *            0
     *           </mn>
     *          </mrow> <mi mathvariant="italic">
     *           and
     *          </mi> <mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &lt;
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </math></p> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;
     *           </mo>
     *           <mn>
     *            0
     *           </mn>
     *          </mrow> <mi mathvariant="italic">
     *           and
     *          </mi> <mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;=
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </math></p></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_COLORBURN</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mn>
     *            1
     *           </mn>
     *           <mo>
     *            - min
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              1
     *             </mn>
     *            </mrow>
     *            <mrow>
     *             <mfenced open="(" close=")">
     *              <mrow>
     *               <mn>
     *                1
     *               </mn>
     *               <mo>
     *                -
     *               </mo>
     *               <msub>
     *                <mi mathvariant="italic">
     *                 C
     *                </mi>
     *                <mi mathvariant="italic">
     *                 d
     *                </mi>
     *               </msub>
     *              </mrow>
     *             </mfenced>
     *             <mo>
     *              /
     *             </mo>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </math></p> <p>
     *         <math overflow="scroll"><mrow>
     *           <mn>
     *            0
     *           </mn>
     *          </mrow>
     *         </math></p></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           &gt;=
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &lt;
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow> <mi mathvariant="italic">
     *           and
     *          </mi> <mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;
     *           </mo>
     *           <mn>
     *            0
     *           </mn>
     *          </mrow>
     *         </math></p> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &lt;
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow> <mi mathvariant="italic">
     *           and
     *          </mi> <mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &lt;=
     *           </mo>
     *           <mn>
     *            0
     *           </mn>
     *          </mrow>
     *         </math></p></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HARDLIGHT</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           2
     *          </mn>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mn>
     *            1
     *           </mn>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            2
     *           </mn>
     *           <mo>
     *
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              1
     *             </mn>
     *             <mo>
     *              -
     *             </mo>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *           <mo>
     *
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              1
     *             </mn>
     *             <mo>
     *              -
     *             </mo>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </math></p></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           &lt;=
     *          </mo>
     *          <mn>
     *           0.5
     *          </mn>
     *         </mrow>
     *        </math> <p>otherwise</p></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SOFTLIGHT</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <mn>
     *             1
     *            </mn>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             2
     *            </mn>
     *            <mo>
     *
     *            </mo>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mrow>
     *          </mfenced>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <mn>
     *             1
     *            </mn>
     *            <mo>
     *             -
     *            </mo>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            +
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mo>
     *
     *             </mo>
     *             <mrow>
     *              <msub>
     *               <mi mathvariant="italic">
     *                C
     *               </mi>
     *               <mi mathvariant="italic">
     *                s
     *               </mi>
     *              </msub>
     *             </mrow>
     *             <mo>
     *              -
     *             </mo>
     *             <mn>
     *              1
     *             </mn>
     *            </mrow>
     *           </mfenced>
     *           <mo>
     *
     *           </mo>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mfenced open="(" close=")">
     *              <mrow>
     *               <mn>
     *                16
     *               </mn>
     *               <mo>
     *
     *               </mo>
     *               <mrow>
     *                <msub>
     *                 <mi mathvariant="italic">
     *                  C
     *                 </mi>
     *                 <mi mathvariant="italic">
     *                  d
     *                 </mi>
     *                </msub>
     *               </mrow>
     *               <mo>
     *                -
     *               </mo>
     *               <mn>
     *                12
     *               </mn>
     *              </mrow>
     *             </mfenced>
     *             <mo>
     *
     *             </mo>
     *             <mrow>
     *              <msub>
     *               <mi mathvariant="italic">
     *                C
     *               </mi>
     *               <mi mathvariant="italic">
     *                d
     *               </mi>
     *              </msub>
     *             </mrow>
     *             <mo>
     *              +
     *             </mo>
     *             <mn>
     *              3
     *             </mn>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </math></p> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            +
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mo>
     *
     *             </mo>
     *             <mrow>
     *              <msub>
     *               <mi mathvariant="italic">
     *                C
     *               </mi>
     *               <mi mathvariant="italic">
     *                s
     *               </mi>
     *              </msub>
     *             </mrow>
     *             <mo>
     *              -
     *             </mo>
     *             <mn>
     *              1
     *             </mn>
     *            </mrow>
     *           </mfenced>
     *           <mo>
     *
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <mo>
     *              sqrt
     *             </mo>
     *             <mfenced open="(" close=")">
     *              <mrow>
     *               <mrow>
     *                <msub>
     *                 <mi mathvariant="italic">
     *                  C
     *                 </mi>
     *                 <mi mathvariant="italic">
     *                  d
     *                 </mi>
     *                </msub>
     *               </mrow>
     *              </mrow>
     *             </mfenced>
     *             <mo>
     *              -
     *             </mo>
     *             <mrow>
     *              <msub>
     *               <mi mathvariant="italic">
     *                C
     *               </mi>
     *               <mi mathvariant="italic">
     *                d
     *               </mi>
     *              </msub>
     *             </mrow>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </math></p></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           &lt;=
     *          </mo>
     *          <mn>
     *           0.5
     *          </mn>
     *         </mrow>
     *        </math> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;
     *           </mo>
     *           <mn>
     *            0.5
     *           </mn>
     *          </mrow> <mi mathvariant="italic">
     *           and
     *          </mi> <mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &lt;=
     *           </mo>
     *           <mn>
     *            0.25
     *           </mn>
     *          </mrow>
     *         </math></p> <p>
     *         <math overflow="scroll"><mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;
     *           </mo>
     *           <mn>
     *            0.5
     *           </mn>
     *          </mrow> <mi mathvariant="italic">
     *           and
     *          </mi> <mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mo>
     *            &gt;
     *           </mo>
     *           <mn>
     *            0.25
     *           </mn>
     *          </mrow>
     *         </math></p></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DIFFERENCE</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           abs
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mo>
     *             -
     *            </mo>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               C
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; "><code class="constant">n/a</code></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_EXCLUSION</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           +
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           2
     *          </mn>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *          </mrow>
     *          <mo>
     *
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             C
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; "><code class="constant">n/a</code></td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p></p>
     *   <p>For the HSL modes, the following functions are defined:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mo>
     *        float minv3
     *       </mo> <mfenced open="(" close=")">
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 c
     *         </mi>
     *        </mrow>
     *       </mfenced> <mo>
     *        {
     *       </mo> <mrow>
     *        <mo>
     *         return min(min(c.r, c.g), c.b); }
     *        </mo>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mo>
     *        float maxv3
     *       </mo> <mfenced open="(" close=")">
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 c
     *         </mi>
     *        </mrow>
     *       </mfenced> <mo>
     *        {
     *       </mo> <mrow>
     *        <mo>
     *         return max(max(c.r, c.g), c.b); }
     *        </mo>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mo>
     *        float lumv3
     *       </mo> <mfenced open="(" close=")">
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 c
     *         </mi>
     *        </mrow>
     *       </mfenced> <mo>
     *        {
     *       </mo> <mrow>
     *        <mo>
     *         return dot(c, vec3(0.30, 0.59, 0.11)); }
     *        </mo>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mo>
     *        float satv3
     *       </mo> <mfenced open="(" close=")">
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 c
     *         </mi>
     *        </mrow>
     *       </mfenced> <mo>
     *        {
     *       </mo> <mrow>
     *        <mo>
     *         return maxv3(c) - minv3(c); }
     *        </mo>
     *       </mrow>
     *      </math>
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mo>
     *        vec3 SetLum
     *       </mo> <mfenced open="(" close=")">
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 cbase
     *         </mi>
     *        </mrow>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 clum
     *         </mi>
     *        </mrow>
     *       </mfenced>
     *      </math> {
     *      <p>float lbase = lumv3(cbase);</p>
     *      <p>float llum = lumv3(clum);</p>
     *      <p>float ldiff = llum - lbase;</p>
     *      <p>vec3 color = cbase + vec3(ldiff);</p>
     *      <p>if (minv3(color)
     *       <math overflow="scroll"><mo>
     *         &lt;
     *        </mo> <mn>
     *         0.0
     *        </mn>
     *       </math> ) {</p> return llum + ((color-llum)*llum) / (llum-minv3(color));
     *      <p>} else if (maxv3(color)
     *       <math overflow="scroll"><mo>
     *         &gt;
     *        </mo> <mn>
     *         1.0
     *        </mn>
     *       </math> ) {</p> return llum + ((color-llum)*(1-llum)) / (maxv3(color)-llum);
     *      <p>} else {</p>
     *      <p>return color;</p>
     *      <p>}</p> }
     *     </dd>
     *     <dt></dt>
     *     <dd>
     *      <math overflow="scroll"><mo>
     *        vec3 SetLumSat
     *       </mo> <mfenced open="(" close=")">
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 cbase
     *         </mi>
     *        </mrow>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 csat
     *         </mi>
     *        </mrow>
     *        <mrow>
     *         <mi mathvariant="italic">
     *          vec3 clum
     *         </mi>
     *        </mrow>
     *       </mfenced>
     *      </math> {
     *      <p>float minbase = minv3(cbase);</p>
     *      <p>float sbase = satv3(cbase);</p>
     *      <p>float ssat = satv3(csat);</p>
     *      <p>vec3 color;</p>
     *      <p>if (sbase
     *       <math overflow="scroll"><mo>
     *         &gt;
     *        </mo> <mn>
     *         0
     *        </mn>
     *       </math> ) {</p> color = (cbase - minbase) * ssat / sbase;
     *      <p>} else {</p> color = vec3(0.0);
     *      <p>}</p>
     *      <p>return SetLum(color, clum);</p> }
     *     </dd>
     *    </dl>
     *   </div>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> HSL Mode </strong></span></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Blend Coefficients: </strong></span>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           f
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HSL_HUE</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           SetLumSat
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HSL_SATURATION</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           SetLumSat
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HSL_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           SetLum
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_HSL_LUMINOSITY</code></td>
     *       <td style="text-align: left; ">
     *        <math overflow="scroll"><mrow>
     *          <mo>
     *           SetLum
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *           </mrow>
     *           <mrow>
     *            <msub>
     *             <mi mathvariant="italic">
     *              C
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p>The results of all these equations are clamped to the range <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="[" close="]">
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mn>
     *       1
     *      </mml:mn>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p>The <code class="constant">GL_MIN</code> and <code class="constant">GL_MAX</code> equations are useful for applications that analyze image data (image thresholding against a constant color, for example). The <code class="constant">GL_FUNC_ADD</code> equation is useful for antialiasing and transparency, among other things.</p>
     *   <p>Initially, both the RGB blend equation and the alpha blend equation are set to <code class="constant">GL_FUNC_ADD</code>.</p>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Only the <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, and <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code> equations use the source or destination factors, while the other equations use only the source and destination colors.</p>
     *   <p>Advanced blending equations are supported only when rendering to a single color buffer using fragment color zero. If any non-NONE draw buffer uses an advanced blend equation the error INVALID_OPERATION is generated by <code class="function">glDrawArrays</code> or any other drawing command.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not one of <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MAX</code>, or <code class="constant">GL_MIN</code>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glBlendEquationi</code> if <em class="parameter"><code>buf</code></em> is greater than or equal to the value of <code class="constant">GL_MAX_DRAW_BUFFERS</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with an argument of <code class="constant">GL_BLEND_EQUATION_RGB</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with an argument of <code class="constant">GL_BLEND_EQUATION_ALPHA</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glBlendEquation</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glBlendEquationi</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glBlendColor(float, float, float, float) glBlendColor}, {@link GLES20#glBlendEquationSeparate(int, int) glBlendEquationSeparate}, {@link GLES20#glBlendFunc(int, int) glBlendFunc}, {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glBlendEquationi(int buf, int mode);

    /**
     * glBlendEquationSeparatei
     * <div class="refentry" id="glBlendEquationSeparate">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glBlendEquationSeparate — set the RGB blend equation and the alpha blend equation separately</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendEquationSeparate</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">modeRGB</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">modeAlpha</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendEquationSeparatei</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">buf</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">modeRGB</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">modeAlpha</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>buf</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>for <code class="function">glBlendEquationSeparatei</code>, specifies the index of the draw buffer for which to set the blend equations.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>modeRGB</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MIN</code>, <code class="constant">GL_MAX</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>modeAlpha</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MIN</code>, <code class="constant">GL_MAX</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p>The blend equations determines how a new pixel (the ''source'' color) is combined with a pixel already in the framebuffer (the ''destination'' color). This function specifies one blend equation for the RGB-color components and one blend equation for the alpha component. <code class="function">glBlendEquationSeparatei</code> specifies the blend equations for a single draw buffer whereas <code class="function">glBlendEquationSeparate</code> sets the blend equations for all draw buffers.</p>
     *   <p>The blend equations use the source and destination blend factors specified by either {@link GLES20#glBlendFunc(int, int) glBlendFunc} or {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate}. See {@link GLES20#glBlendFunc(int, int) glBlendFunc} or {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate} for a description of the various blend factors.</p>
     *   <p>In the equations that follow, source and destination color components are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively. The result color is referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        r
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>. The source and destination blend factors are denoted <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively. For these equations all color components are understood to have values in the range <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="[" close="]">
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mn>
     *       1
     *      </mml:mn>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Mode </strong></span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> RGB Components </strong></span></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Alpha Component </strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FUNC_ADD</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *           <mo>
     *            +
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FUNC_SUBTRACT</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FUNC_REVERSE_SUBTRACT</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *           <mo>
     *            -
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <mo>
     *            ⁢
     *           </mo>
     *           <msub>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_MIN</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            min
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_MAX</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Rr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               R
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Gr
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               G
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math>
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Br
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               B
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; ">
     *        <math overflow="scroll"><mrow>
     *          <mi mathvariant="italic">
     *           Ar
     *          </mi>
     *          <mo>
     *           =
     *          </mo>
     *          <mrow>
     *           <mi mathvariant="italic">
     *            max
     *           </mi>
     *           <mo>
     *            ⁡
     *           </mo>
     *           <mfenced open="(" close=")">
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               s
     *              </mi>
     *             </msub>
     *            </mrow>
     *            <mrow>
     *             <msub>
     *              <mi mathvariant="italic">
     *               A
     *              </mi>
     *              <mi mathvariant="italic">
     *               d
     *              </mi>
     *             </msub>
     *            </mrow>
     *           </mfenced>
     *          </mrow>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p></p>
     *   <p>The results of these equations are clamped to the range <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="[" close="]">
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mn>
     *       1
     *      </mml:mn>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p>The <code class="constant">GL_MIN</code> and <code class="constant">GL_MAX</code> equations are useful for applications that analyze image data (image thresholding against a constant color, for example). The <code class="constant">GL_FUNC_ADD</code> equation is useful for antialiasing and transparency, among other things.</p>
     *   <p>Initially, both the RGB blend equation and the alpha blend equation are set to <code class="constant">GL_FUNC_ADD</code>.</p>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>The <code class="constant">GL_MIN</code>, and <code class="constant">GL_MAX</code> equations do not use the source or destination factors, only the source and destination colors.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if either <em class="parameter"><code>modeRGB</code></em> or <em class="parameter"><code>modeAlpha</code></em> is not one of <code class="constant">GL_FUNC_ADD</code>, <code class="constant">GL_FUNC_SUBTRACT</code>, <code class="constant">GL_FUNC_REVERSE_SUBTRACT</code>, <code class="constant">GL_MAX</code>, or <code class="constant">GL_MIN</code>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glBlendEquationSeparatei</code> if <em class="parameter"><code>buf</code></em> is greater than or equal to the value of <code class="constant">GL_MAX_DRAW_BUFFERS</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with an argument of <code class="constant">GL_BLEND_EQUATION_RGB</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with an argument of <code class="constant">GL_BLEND_EQUATION_ALPHA</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glBlendEquationSeparate</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glBlendEquationSeparatei</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glGetString(int) glGetString}, {@link GLES20#glBlendColor(float, float, float, float) glBlendColor}, {@link GLES20#glBlendEquation(int) glBlendEquation}, {@link GLES20#glBlendFunc(int, int) glBlendFunc}, {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glBlendEquationSeparatei(int buf, int modeRGB, int modeAlpha);

    /**
     * glBlendFunci
     * <div class="refentry" id="glBlendFunc">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glBlendFunc — specify pixel arithmetic</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendFunc</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">sfactor</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dfactor</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendFunci</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">buf</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">sfactor</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dfactor</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>buf</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For <code class="function">glBlendFunci</code>, specifies the index of the draw buffer for which to set the blend function.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>sfactor</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is <code class="constant">GL_ONE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dfactor</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: <code class="constant">GL_ZERO</code>, <code class="constant">GL_ONE</code>, <code class="constant">GL_SRC_COLOR</code>, <code class="constant">GL_ONE_MINUS_SRC_COLOR</code>, <code class="constant">GL_DST_COLOR</code>, <code class="constant">GL_ONE_MINUS_DST_COLOR</code>, <code class="constant">GL_SRC_ALPHA</code>, <code class="constant">GL_ONE_MINUS_SRC_ALPHA</code>, <code class="constant">GL_DST_ALPHA</code>, <code class="constant">GL_ONE_MINUS_DST_ALPHA</code>. <code class="constant">GL_CONSTANT_COLOR</code>, <code class="constant">GL_ONE_MINUS_CONSTANT_COLOR</code>, <code class="constant">GL_CONSTANT_ALPHA</code>, and <code class="constant">GL_ONE_MINUS_CONSTANT_ALPHA</code>. The initial value is <code class="constant">GL_ZERO</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p>Pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the frame buffer (the destination values). Blending is initially disabled. Use {@link GLES20#glDisable(int) glEnable} or {@link GLES20#glDisable(int) glEnablei} and {@link GLES20#glDisable(int) glDisable} or {@link GLES20#glDisable(int) glDisablei} with argument <code class="constant">GL_BLEND</code> to enable and disable blending for all or one draw buffer.</p>
     *   <p><code class="function">glBlendFunc</code> defines the operation of blending for all draw buffers when it is enabled. <code class="function">glBlendFunci</code> defines the operation of blending for a single draw buffer specified by <em class="parameter"><code>buf</code></em> when enabled for that draw buffer. <em class="parameter"><code>sfactor</code></em> specifies which method is used to scale the source color components. <em class="parameter"><code>dfactor</code></em> specifies which method is used to scale the destination color components. Both parameters must be one of the following symbolic constants: <code class="constant">GL_ZERO</code>, <code class="constant">GL_ONE</code>, <code class="constant">GL_SRC_COLOR</code>, <code class="constant">GL_ONE_MINUS_SRC_COLOR</code>, <code class="constant">GL_DST_COLOR</code>, <code class="constant">GL_ONE_MINUS_DST_COLOR</code>, <code class="constant">GL_SRC_ALPHA</code>, <code class="constant">GL_ONE_MINUS_SRC_ALPHA</code>, <code class="constant">GL_DST_ALPHA</code>, <code class="constant">GL_ONE_MINUS_DST_ALPHA</code>, <code class="constant">GL_CONSTANT_COLOR</code>, <code class="constant">GL_ONE_MINUS_CONSTANT_COLOR</code>, <code class="constant">GL_CONSTANT_ALPHA</code>, <code class="constant">GL_ONE_MINUS_CONSTANT_ALPHA</code>, <code class="constant">GL_SRC_ALPHA_SATURATE</code>, The possible methods are described in the following table. Each method defines four scale factors, one each for red, green, blue, and alpha. In the table and in subsequent equations, source and destination color components are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively. The color specified by {@link GLES20#glBlendColor(float, float, float, float) glBlendColor} is referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p>Source and destination scale factors are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>. The scale factors described in the table, denoted <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        f
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        f
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        f
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        f
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, represent either source or destination factors. All scale factors have range <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="[" close="]">
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mn>
     *       1
     *      </mml:mn>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p>Prior to blending, unsigned normalized fixed-point color components undergo an implied conversion to floating-point using equation 2.1. This conversion must leave the values 0 and 1 invariant. Blending computations are treated as if carried out in floating-point and will be performed with a precision and dynamic range no lower than that used to represent destination components. If the value of <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</code> for the framebuffer attachment corresponding to the destination buffer is <code class="constant">GL_SRGB</code>, the R, G, and B destination color values (after conversion from fixed-point to floating-point) are considered to be encoded for the sRGB color space and hence must be linearized prior to their use in blending. Each R, G, and B component is converted in the same fashion described for sRGB texture components.</p>
     *   <p></p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Parameter </strong></span></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong>
     *          <math overflow="scroll"><mfenced open="(" close=")">
     *            <msub>
     *             <mi mathvariant="italic">
     *              f
     *             </mi>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              f
     *             </mi>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              f
     *             </mi>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              f
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfenced>
     *          </math> </strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ZERO</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mn>
     *           0
     *          </mn>
     *          <mn>
     *           0
     *          </mn>
     *          <mn>
     *           0
     *          </mn>
     *          <mn>
     *           0
     *          </mn>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mn>
     *           1
     *          </mn>
     *          <mn>
     *           1
     *          </mn>
     *          <mn>
     *           1
     *          </mn>
     *          <mn>
     *           1
     *          </mn>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SRC_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_SRC_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DST_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_DST_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SRC_ALPHA</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_SRC_ALPHA</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DST_ALPHA</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_DST_ALPHA</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_CONSTANT_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <msub>
     *           <mi mathvariant="italic">
     *            R
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            G
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            B
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_CONSTANT_COLOR</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_CONSTANT_ALPHA</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_CONSTANT_ALPHA</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_SRC_ALPHA_SATURATE</code></td>
     *       <td style="text-align: left; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           i
     *          </mi>
     *          <mi mathvariant="italic">
     *           i
     *          </mi>
     *          <mi mathvariant="italic">
     *           i
     *          </mi>
     *          <mn>
     *           1
     *          </mn>
     *         </mfenced>
     *        </math></td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p>In the table,</p>
     *   <p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:mi mathvariant="italic">
     *       i
     *      </mml:mi>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mfrac>
     *       <mml:mrow>
     *        <mml:mi mathvariant="italic">
     *         min
     *        </mml:mi>
     *        <mml:mo>
     *         ⁡
     *        </mml:mo>
     *        <mml:mfenced open="(" close=")">
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mrow>
     *          <mml:msub>
     *           <mml:mi mathvariant="italic">
     *            k
     *           </mml:mi>
     *           <mml:mi mathvariant="italic">
     *            A
     *           </mml:mi>
     *          </mml:msub>
     *          <mml:mo>
     *           -
     *          </mml:mo>
     *          <mml:msub>
     *           <mml:mi mathvariant="italic">
     *            A
     *           </mml:mi>
     *           <mml:mi mathvariant="italic">
     *            d
     *           </mml:mi>
     *          </mml:msub>
     *         </mml:mrow>
     *        </mml:mfenced>
     *       </mml:mrow>
     *       <mml:msub>
     *        <mml:mi mathvariant="italic">
     *         k
     *        </mml:mi>
     *        <mml:mi mathvariant="italic">
     *         A
     *        </mml:mi>
     *       </mml:msub>
     *      </mml:mfrac>
     *     </mml:mrow>
     *    </mml:math></p>
     *   <p>To determine the blended RGBA values of a pixel, the system uses the following equations:</p>
     *   <p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          R
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math> <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          G
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math> <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          B
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math> <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          A
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math></p>
     *   <p>If the value of <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</code> for the framebuffer attachment corresponding to the destination buffer is <code class="constant">GL_SRGB</code>, the R, G, and B values after blending are converted into the non-linear sRGB color space by computing where cl is the R, G, or B element and cs is the result (effectively converted into an sRGB color space). If <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</code> is not <code class="constant">GL_SRGB</code>, then cs = cl: The resulting cs values for R, G, and B, and the unmodified A form a new RGBA color value. If the color buffer is fixed-point, each component is clamped to the range [0; 1] and then converted to a fixed-point value using equation</p>
     *  </div>
     *  <div class="refsect1" id="examples">
     *   <h2>Examples</h2>
     *   <p></p>
     *   <p>Transparency is best implemented using blend function (<code class="constant">GL_SRC_ALPHA</code>, <code class="constant">GL_ONE_MINUS_SRC_ALPHA</code>) with primitives sorted from farthest to nearest. Note that this transparency calculation does not require the presence of alpha bitplanes in the frame buffer.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Incoming (source) alpha is correctly thought of as a material opacity, ranging from 1.0 (<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       K
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       A
     *      </mml:mi>
     *     </mml:msub>
     *    </mml:math>), representing complete opacity, to 0.0 (0), representing complete transparency.</p>
     *   <p>When more than one color buffer is enabled for drawing, the GL performs blending separately for each enabled buffer, using the contents of that buffer for destination color. (See {@link GLES30#glDrawBuffers(int, int[], int) glDrawBuffers}.)</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if either <em class="parameter"><code>sfactor</code></em> or <em class="parameter"><code>dfactor</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glBlendFunci</code> if <em class="parameter"><code>buf</code></em> is greater than or equal to the value of <code class="constant">GL_MAX_DRAW_BUFFERS</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_BLEND_SRC</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_BLEND_DST</code></p>
     *   <p>{@link GLES20#glIsEnabled(int) glIsEnabled} with argument <code class="constant">GL_BLEND</code></p>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glBlendFunc</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glBlendFunci</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glBlendColor(float, float, float, float) glBlendColor}, {@link GLES20#glBlendEquation(int) glBlendEquation}, {@link GLES20#glBlendFuncSeparate(int, int, int, int) glBlendFuncSeparate}, {@link GLES20#glClear(int) glClear}, {@link GLES30#glDrawBuffers(int, int[], int) glDrawBuffers}, {@link GLES20#glDisable(int) glEnable},</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glBlendFunci(int buf, int src, int dst);

    /**
     * glBlendFuncSeparatei
     * <div class="refentry" id="glBlendFuncSeparate">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glBlendFuncSeparate — specify pixel arithmetic for RGB and alpha components separately</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendFuncSeparate</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">srcRGB</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dstRGB</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">srcAlpha</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dstAlpha</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glBlendFuncSeparatei</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">buf</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">srcRGB</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dstRGB</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">srcAlpha</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">dstAlpha</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>buf</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For <code class="function">glBlendFuncSeparatei</code>, specifies the index of the draw buffer for which to set the blend functions.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcRGB</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies how the red, green, and blue blending factors are computed. The initial value is <code class="constant">GL_ONE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstRGB</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies how the red, green, and blue destination blending factors are computed. The initial value is <code class="constant">GL_ZERO</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>srcAlpha</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specified how the alpha source blending factor is computed. The initial value is <code class="constant">GL_ONE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>dstAlpha</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specified how the alpha destination blending factor is computed. The initial value is <code class="constant">GL_ZERO</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p>Pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the frame buffer (the destination values). Blending is initially disabled. Use {@link GLES20#glDisable(int) glEnable} and {@link GLES20#glDisable(int) glDisable} with argument <code class="constant">GL_BLEND</code> to enable and disable blending.</p>
     *   <p><code class="function">glBlendFuncSeparate</code> defines the operation of blending for all draw buffers when it is enabled. <code class="function">glBlendFuncSeparatei</code> defines the operation of blending for a single draw buffer specified by <em class="parameter"><code>buf</code></em> when enabled for that draw buffer. <em class="parameter"><code>srcRGB</code></em> specifies which method is used to scale the source RGB-color components. <em class="parameter"><code>dstRGB</code></em> specifies which method is used to scale the destination RGB-color components. Likewise, <em class="parameter"><code>srcAlpha</code></em> specifies which method is used to scale the source alpha color component, and <em class="parameter"><code>dstAlpha</code></em> specifies which method is used to scale the destination alpha component. The possible methods are described in the following table. Each method defines four scale factors, one each for red, green, blue, and alpha.</p>
     *   <p>In the table and in subsequent equations, source and destination color components are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>, respectively. The color specified by {@link GLES20#glBlendColor(float, float, float, float) glBlendColor} is referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        c
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p>Source and destination scale factors are referred to as <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        s
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *      </mml:msub>
     *     </mml:mfenced>
     *    </mml:math>. All scale factors have range <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="[" close="]">
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mn>
     *       1
     *      </mml:mn>
     *     </mml:mfenced>
     *    </mml:math>.</p>
     *   <p>Prior to blending, unsigned normalized fixed-point color components undergo an implied conversion to floating-point using equation 2.1. This conversion must leave the values 0 and 1 invariant. Blending computations are treated as if carried out in floating-point and will be performed with a precision and dynamic range no lower than that used to represent destination components. If the value of <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</code> for the framebuffer attachment corresponding to the destination buffer is <code class="constant">GL_SRGB</code>, the R, G, and B destination color values (after conversion from fixed-point to floating-point) are considered to be encoded for the sRGB color space and hence must be linearized prior to their use in blending. Each R, G, and B component is converted in the same fashion described for sRGB texture components.</p>
     *   <p></p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Parameter </strong></span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> RGB Factor </strong></span></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Alpha Factor </strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ZERO</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mn>
     *           0
     *          </mn>
     *          <mn>
     *           0
     *          </mn>
     *          <mn>
     *           0
     *          </mn>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mn>
     *          0
     *         </mn>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mn>
     *           1
     *          </mn>
     *          <mn>
     *           1
     *          </mn>
     *          <mn>
     *           1
     *          </mn>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mn>
     *          1
     *         </mn>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SRC_COLOR</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfrac>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            k
     *           </mi>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *          </msub>
     *         </mfrac>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_SRC_COLOR</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DST_COLOR</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfrac>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            d
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            k
     *           </mi>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *          </msub>
     *         </mfrac>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_DST_COLOR</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              R
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              G
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              B
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SRC_ALPHA</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfrac>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            k
     *           </mi>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *          </msub>
     *         </mfrac>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_SRC_ALPHA</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              s
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             s
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DST_ALPHA</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfrac>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            d
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            k
     *           </mi>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *          </msub>
     *         </mfrac>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_DST_ALPHA</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *           <mfrac>
     *            <msub>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *             <mi mathvariant="italic">
     *              d
     *             </mi>
     *            </msub>
     *            <msub>
     *             <mi mathvariant="italic">
     *              k
     *             </mi>
     *             <mi mathvariant="italic">
     *              A
     *             </mi>
     *            </msub>
     *           </mfrac>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfrac>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             d
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *           </msub>
     *          </mfrac>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_CONSTANT_COLOR</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <msub>
     *           <mi mathvariant="italic">
     *            R
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            G
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            B
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><msub>
     *          <mi mathvariant="italic">
     *           A
     *          </mi>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </msub>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_CONSTANT_COLOR</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <msub>
     *            <mi mathvariant="italic">
     *             R
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             G
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             B
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_CONSTANT_ALPHA</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><msub>
     *          <mi mathvariant="italic">
     *           A
     *          </mi>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </msub>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ONE_MINUS_CONSTANT_ALPHA</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *           <mn>
     *            1
     *           </mn>
     *          </mfenced>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *           <msub>
     *            <mi mathvariant="italic">
     *             A
     *            </mi>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *           </msub>
     *          </mfenced>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <msub>
     *           <mi mathvariant="italic">
     *            A
     *           </mi>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *          </msub>
     *         </mrow>
     *        </math></td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_SRC_ALPHA_SATURATE</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; ">
     *        <math overflow="scroll"><mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           i
     *          </mi>
     *          <mi mathvariant="italic">
     *           i
     *          </mi>
     *          <mi mathvariant="italic">
     *           i
     *          </mi>
     *         </mfenced>
     *        </math></td>
     *       <td style="text-align: left; ">
     *        <math overflow="scroll"><mn>
     *          1
     *         </mn>
     *        </math></td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p>In the table,</p>
     *   <p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:mi mathvariant="italic">
     *       i
     *      </mml:mi>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          A
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          s
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:mn>
     *          1
     *         </mml:mn>
     *         <mml:mo>
     *          -
     *         </mml:mo>
     *         <mml:mfenced open close="">
     *          <mml:msub>
     *           <mml:mi mathvariant="italic">
     *            A
     *           </mml:mi>
     *           <mml:mi mathvariant="italic">
     *            d
     *           </mml:mi>
     *          </mml:msub>
     *         </mml:mfenced>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math></p>
     *   <p>To determine the blended RGBA values of a pixel, the system uses the following equations:</p>
     *   <p><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        R
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          R
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           R
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math> <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        G
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          G
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           G
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math> <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        B
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          B
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           B
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math> <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:msub>
     *       <mml:mi mathvariant="italic">
     *        A
     *       </mml:mi>
     *       <mml:mi mathvariant="italic">
     *        d
     *       </mml:mi>
     *      </mml:msub>
     *      <mml:mo>
     *       =
     *      </mml:mo>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        min
     *       </mml:mi>
     *       <mml:mo>
     *        ⁡
     *       </mml:mo>
     *       <mml:mfenced open="(" close=")">
     *        <mml:msub>
     *         <mml:mi mathvariant="italic">
     *          k
     *         </mml:mi>
     *         <mml:mi mathvariant="italic">
     *          A
     *         </mml:mi>
     *        </mml:msub>
     *        <mml:mrow>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           s
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          +
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *         </mml:msub>
     *         <mml:mo>
     *          ⁢
     *         </mml:mo>
     *         <mml:msub>
     *          <mml:mi mathvariant="italic">
     *           d
     *          </mml:mi>
     *          <mml:mi mathvariant="italic">
     *           A
     *          </mml:mi>
     *         </mml:msub>
     *        </mml:mrow>
     *       </mml:mfenced>
     *      </mml:mrow>
     *     </mml:mrow>
     *    </mml:math></p>
     *   <p>If the value of <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</code> for the framebuffer attachment corresponding to the destination buffer is <code class="constant">GL_SRGB</code>, the R, G, and B values after blending are converted into the non-linear sRGB color space by computing where cl is the R, G, or B element and cs is the result (effectively converted into an sRGB color space). If <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</code> is not <code class="constant">GL_SRGB</code>, then cs = cl: The resulting cs values for R, G, and B, and the unmodified A form a new RGBA color value. If the color buffer is fixed-point, each component is clamped to the range [0; 1] and then converted to a fixed-point value using equation</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Incoming (source) alpha is correctly thought of as a material opacity, ranging from 1.0 (<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       K
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       A
     *      </mml:mi>
     *     </mml:msub>
     *    </mml:math>), representing complete opacity, to 0.0 (0), representing complete transparency.</p>
     *   <p>When more than one color buffer is enabled for drawing, the GL performs blending separately for each enabled buffer, using the contents of that buffer for destination color. (See {@link GLES30#glDrawBuffers(int, int[], int) glDrawBuffers}.)</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if either <em class="parameter"><code>srcRGB</code></em> or <em class="parameter"><code>dstRGB</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glBlendFuncSeparatei</code> if <em class="parameter"><code>buf</code></em> is greater than or equal to the value of <code class="constant">GL_MAX_DRAW_BUFFERS</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_BLEND_SRC_RGB</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_BLEND_SRC_ALPHA</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_BLEND_DST_RGB</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_BLEND_DST_ALPHA</code></p>
     *   <p>{@link GLES20#glIsEnabled(int) glIsEnabled} with argument <code class="constant">GL_BLEND</code></p>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glBlendFuncSeparate</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glBlendFuncSeparatei</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glBlendColor(float, float, float, float) glBlendColor}, {@link GLES20#glBlendFunc(int, int) glBlendFunc}, {@link GLES20#glBlendEquation(int) glBlendEquation}, {@link GLES20#glBlendEquationSeparate(int, int) glBlendEquationSeparate}, {@link GLES20#glClear(int) glClear}, {@link GLES30#glDrawBuffers(int, int[], int) glDrawBuffers}, {@link GLES20#glDisable(int) glEnable},</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glBlendFuncSeparatei(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

    /**
     * glColorMaski
     * <div class="refentry" id="glColorMask">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glColorMask, glColorMaski — enable and disable writing of frame buffer color components</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glColorMask</strong>(</code></td>
     *       <td>GLboolean <var class="pdparam">red</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">green</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">blue</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">alpha</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glColorMaski</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">buf</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">red</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">green</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">blue</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">alpha</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>buf</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For <code class="function">glColorMaski</code>, specifies the index of the draw buffer whose color mask to set.</p>
     *     </dd>
     *     <dt><span class="term"><em class="parameter"><code>red</code></em>, </span> <span class="term"><em class="parameter"><code>green</code></em>, </span> <span class="term"><em class="parameter"><code>blue</code></em>, </span> <span class="term"> <em class="parameter"> <code>alpha</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all <code class="constant">GL_TRUE</code>, indicating that the color components are written.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glColorMask</code> and <code class="function">glColorMaski</code> specify whether the individual color components in the frame buffer can or cannot be written. <code class="function">glColorMaski</code> sets the mask for a specific draw buffer, whereas <code class="function">glColorMask</code> sets the mask for all draw buffers. If <em class="parameter"><code>red</code></em> is <code class="constant">GL_FALSE</code>, for example, no change is made to the red component of any pixel in any of the color buffers, regardless of the drawing operation attempted.</p>
     *   <p>Changes to individual bits of components cannot be controlled. Rather, changes are either enabled or disabled for entire color components.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_COLOR_WRITEMASK</code></p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glColorMaski</code> if <em class="parameter"><code>buf</code></em> is greater than or equal to the value of <code class="constant">GL_MAX_DRAW_BUFFERS</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glColorMask</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glColorMaski</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glClear(int) glClear}, {@link GLES20#glDepthMask(boolean) glDepthMask}, {@link GLES20#glStencilMask(int) glStencilMask}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glColorMaski(int index, boolean r, boolean g, boolean b, boolean a);

    /**
     * glIsEnabledi
     * <div class="refentry" id="glIsEnabled">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glIsEnabled, glIsEnabledi — test whether a capability is enabled</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLboolean <strong class="fsfunc">glIsEnabled</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLboolean <strong class="fsfunc">glIsEnabledi</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">cap</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">index</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>cap</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a symbolic constant indicating a GL capability.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>index</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the capability.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glIsEnabled</code> returns <code class="constant">GL_TRUE</code> if <em class="parameter"><code>cap</code></em> is an enabled capability and returns <code class="constant">GL_FALSE</code> otherwise. For <code class="function">glIsEnabledi</code>, <em class="parameter"><code>index</code></em> specifies the index of the capability to test. <em class="parameter"><code>index</code></em> must be between zero and the count of indexed capabilities for <em class="parameter"><code>cap</code></em>. Initially all capabilities except <code class="constant">GL_DITHER</code> are disabled; <code class="constant">GL_DITHER</code> is initially enabled.</p>
     *   <p>The following capabilities are accepted for <em class="parameter"><code>cap</code></em>:</p>
     *   <p></p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: left; ">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Constant </strong></span></th>
     *       <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> See </strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BLEND</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glBlendFunc(int, int) glBlendFunc}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_CULL_FACE</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glCullFace(int) glCullFace}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEBUG_OUTPUT</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glDisable(int) glEnable}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEBUG_OUTPUT_SYNCHRONOUS</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glDisable(int) glEnable}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_TEST</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glDepthFunc(int) glDepthFunc}, {@link GLES20#glDepthRangef(float, float) glDepthRangef}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DITHER</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glDisable(int) glEnable}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_POLYGON_OFFSET_FILL</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glPolygonOffset(float, float) glPolygonOffset}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_PRIMITIVE_RESTART_FIXED_INDEX</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glDisable(int) glEnable}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RASTERIZER_DISCARD</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glDisable(int) glEnable}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SAMPLE_ALPHA_TO_COVERAGE</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glSampleCoverage(float, boolean) glSampleCoverage}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SAMPLE_COVERAGE</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glSampleCoverage(float, boolean) glSampleCoverage}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SCISSOR_TEST</code></td>
     *       <td style="text-align: left; border-bottom: 2px solid ; ">{@link GLES20#glScissor(int, int, int, int) glScissor}</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_STENCIL_TEST</code></td>
     *       <td style="text-align: left; ">{@link GLES20#glStencilFunc(int, int, int) glStencilFunc}, {@link GLES20#glStencilOp(int, int, int) glStencilOp}</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, <code class="function">glIsEnabled</code> and <code class="function">glIsEnabledi</code> return <code class="constant">GL_FALSE</code>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>cap</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated by <code class="function">glIsEnabledi</code> if <em class="parameter"><code>index</code></em> is outside the valid range for the indexed state <em class="parameter"><code>cap</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glIsEnabled</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glIsEnabledi</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDisable(int) glEnable}, {@link GLES20#glDisable(int) glDisable}, {@link GLES20#glGetBooleanv(int, boolean[], int) glGet}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    boolean glIsEnabledi(int target, int index);

    /**
     * glDrawElementsBaseVertex
     * <div class="refentry" id="glDrawElementsBaseVertex">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDrawElementsBaseVertex — render primitives from array data with a per-element offset</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDrawElementsBaseVertex</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">mode</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void *<var class="pdparam">indices</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">basevertex</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>mode</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies what kind of primitives to render. Symbolic constants <code class="constant">GL_POINTS</code>, <code class="constant">GL_LINE_STRIP</code>, <code class="constant">GL_LINE_LOOP</code>, <code class="constant">GL_LINES</code>, <code class="constant">GL_TRIANGLE_STRIP</code>, <code class="constant">GL_TRIANGLE_FAN</code>, <code class="constant">GL_TRIANGLES</code>, <code class="constant">GL_LINES_ADJACENCY</code>, <code class="constant">GL_LINE_STRIP_ADJACENCY</code>, <code class="constant">GL_TRIANGLES_ADJACENCY</code>, <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code> and <code class="constant">GL_PATCHES</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the number of elements to be rendered.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the type of the values in indices. Must be one of <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or <code class="constant">GL_UNSIGNED_INT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>indices</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a pointer to the location where the indices are stored.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>basevertex</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a constant that should be added to each element of <em class="parameter"><code>indices</code></em> when chosing elements from the enabled vertex arrays.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDrawElementsBaseVertex</code> behaves identically to {@link GLES20#glDrawElements(int, int, int, int) glDrawElements} except that the <span class="emphasis"><em>i</em></span>th element transferred by the corresponding draw call will be taken from element <em class="parameter"><code>indices</code></em>[i] + <em class="parameter"><code>basevertex</code></em> of each enabled array. If the resulting value is larger than the maximum value representable by <em class="parameter"><code>type</code></em>, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions). The operation is undefined if the sum would be negative.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a geometry shader is active and <em class="parameter"><code>mode</code></em> is incompatible with the input primitive type of the geometry shader in the currently installed program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to an enabled array or the element array and the buffer object's data store is currently mapped.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDrawElementsBaseVertex</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDrawElements(int, int, int, int) glDrawElements}, {@link GLES30#glDrawRangeElements(int, int, int, int, int, java.nio.Buffer) glDrawRangeElements}, {@link GLES32#glDrawRangeElementsBaseVertex(int, int, int, int, int, java.nio.Buffer, int) glDrawRangeElementsBaseVertex}, {@link GLES30#glDrawElementsInstanced(int, int, int, java.nio.Buffer, int) glDrawElementsInstanced}, {@link GLES32#glDrawElementsInstancedBaseVertex(int, int, int, java.nio.Buffer, int, int) glDrawElementsInstancedBaseVertex}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDrawElementsBaseVertex(int mode, int count, int type, java.nio.Buffer indices, int basevertex);

    /**
     * glDrawRangeElementsBaseVertex
     * <div class="refentry" id="glDrawRangeElementsBaseVertex">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDrawRangeElementsBaseVertex — render primitives from array data with a per-element offset</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDrawRangeElementsBaseVertex</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">mode</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">start</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">end</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void *<var class="pdparam">indices</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">basevertex</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>mode</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies what kind of primitives to render. Symbolic constants <code class="constant">GL_POINTS</code>, <code class="constant">GL_LINE_STRIP</code>, <code class="constant">GL_LINE_LOOP</code>, <code class="constant">GL_LINES</code>, <code class="constant">GL_TRIANGLE_STRIP</code>, <code class="constant">GL_TRIANGLE_FAN</code>, <code class="constant">GL_TRIANGLES</code>, <code class="constant">GL_LINES_ADJACENCY</code>, <code class="constant">GL_LINE_STRIP_ADJACENCY</code>, <code class="constant">GL_TRIANGLES_ADJACENCY</code>, <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code> and <code class="constant">GL_PATCHES</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>start</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the minimum array index contained in <em class="parameter"><code>indices</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>end</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the maximum array index contained in <em class="parameter"><code>indices</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the number of elements to be rendered.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the type of the values in indices. Must be one of <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or <code class="constant">GL_UNSIGNED_INT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>indices</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a pointer to the location where the indices are stored.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>basevertex</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a constant that should be added to each element of <em class="parameter"><code>indices</code></em> when chosing elements from the enabled vertex arrays.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDrawRangeElementsBaseVertex</code> is a restricted form of {@link GLES32#glDrawElementsBaseVertex(int, int, int, java.nio.Buffer, int) glDrawElementsBaseVertex}. <em class="parameter"><code>mode</code></em>, <em class="parameter"><code>count</code></em> and <em class="parameter"><code>basevertex</code></em> match the corresponding arguments to {@link GLES32#glDrawElementsBaseVertex(int, int, int, java.nio.Buffer, int) glDrawElementsBaseVertex}, with the additional constraint that all values in the array <em class="parameter"><code>indices</code></em> must lie between <em class="parameter"><code>start</code></em> and <em class="parameter"><code>end</code></em>, inclusive, prior to adding <em class="parameter"><code>basevertex</code></em>. Index values lying outside the range [<em class="parameter"><code>start</code></em>, <em class="parameter"><code>end</code></em>] are treated in the same way as {@link GLES32#glDrawElementsBaseVertex(int, int, int, java.nio.Buffer, int) glDrawElementsBaseVertex}. The <span class="emphasis"><em>i</em></span>th element transferred by the corresponding draw call will be taken from element <em class="parameter"><code>indices</code></em>[i] + <em class="parameter"><code>basevertex</code></em> of each enabled array. If the resulting value is larger than the maximum value representable by <em class="parameter"><code>type</code></em>, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions). The operation is undefined if the sum would be negative.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>end</code></em> &lt; <em class="parameter"><code>start</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a geometry shader is active and <em class="parameter"><code>mode</code></em> is incompatible with the input primitive type of the geometry shader in the currently installed program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to an enabled array or the element array and the buffer object's data store is currently mapped.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDrawRangeElementsBaseVertex</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDrawElements(int, int, int, int) glDrawElements}, {@link GLES32#glDrawElementsBaseVertex(int, int, int, java.nio.Buffer, int) glDrawElementsBaseVertex}, {@link GLES30#glDrawRangeElements(int, int, int, int, int, java.nio.Buffer) glDrawRangeElements}, {@link GLES30#glDrawElementsInstanced(int, int, int, java.nio.Buffer, int) glDrawElementsInstanced}, {@link GLES32#glDrawElementsInstancedBaseVertex(int, int, int, java.nio.Buffer, int, int) glDrawElementsInstancedBaseVertex}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDrawRangeElementsBaseVertex(int mode, int start, int end, int count, int type, java.nio.Buffer indices, int basevertex);

    /**
     * glDrawElementsInstancedBaseVertex
     * <div class="refentry" id="glDrawElementsInstancedBaseVertex">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDrawElementsInstancedBaseVertex — render multiple instances of a set of primitives from array data with a per-element offset</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDrawElementsInstancedBaseVertex</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">mode</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void *<var class="pdparam">indices</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">primcount</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">basevertex</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>mode</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies what kind of primitives to render. Symbolic constants <code class="constant">GL_POINTS</code>, <code class="constant">GL_LINE_STRIP</code>, <code class="constant">GL_LINE_LOOP</code>, <code class="constant">GL_LINES</code>, <code class="constant">GL_TRIANGLE_STRIP</code>, <code class="constant">GL_TRIANGLE_FAN</code>, <code class="constant">GL_TRIANGLES</code>, <code class="constant">GL_LINES_ADJACENCY</code>, <code class="constant">GL_LINE_STRIP_ADJACENCY</code>, <code class="constant">GL_TRIANGLES_ADJACENCY</code>, <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code> and <code class="constant">GL_PATCHES</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the number of elements to be rendered.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the type of the values in indices. Must be one of <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or <code class="constant">GL_UNSIGNED_INT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>indices</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a pointer to the location where the indices are stored.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>primcount</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the number of instances of the indexed geometry that should be drawn.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>basevertex</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a constant that should be added to each element of <em class="parameter"><code>indices</code></em> when chosing elements from the enabled vertex arrays.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDrawElementsInstancedBaseVertex</code> behaves identically to {@link GLES30#glDrawElementsInstanced(int, int, int, java.nio.Buffer, int) glDrawElementsInstanced} except that the <span class="emphasis"><em>i</em></span>th element transferred by the corresponding draw call will be taken from element <em class="parameter"><code>indices</code></em>[i] + <em class="parameter"><code>basevertex</code></em> of each enabled array. If the resulting value is larger than the maximum value representable by <em class="parameter"><code>type</code></em>, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions). The operation is undefined if the sum would be negative.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> or <em class="parameter"><code>primcount</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a geometry shader is active and <em class="parameter"><code>mode</code></em> is incompatible with the input primitive type of the geometry shader in the currently installed program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to an enabled array or the element array and the buffer object's data store is currently mapped.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDrawElementsInstancedBaseVertex</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDrawElements(int, int, int, int) glDrawElements}, {@link GLES30#glDrawRangeElements(int, int, int, int, int, java.nio.Buffer) glDrawRangeElements}, {@link GLES32#glDrawRangeElementsBaseVertex(int, int, int, int, int, java.nio.Buffer, int) glDrawRangeElementsBaseVertex}, {@link GLES30#glDrawElementsInstanced(int, int, int, java.nio.Buffer, int) glDrawElementsInstanced}, {@link GLES32#glDrawElementsInstancedBaseVertex(int, int, int, java.nio.Buffer, int, int) glDrawElementsInstancedBaseVertex}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDrawElementsInstancedBaseVertex(int mode, int count, int type, java.nio.Buffer indices, int instanceCount, int basevertex);

    /**
     * glDrawElementsInstancedBaseVertex
     * <div class="refentry" id="glDrawElementsInstancedBaseVertex">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glDrawElementsInstancedBaseVertex — render multiple instances of a set of primitives from array data with a per-element offset</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glDrawElementsInstancedBaseVertex</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">mode</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">count</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void *<var class="pdparam">indices</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">primcount</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">basevertex</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>mode</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies what kind of primitives to render. Symbolic constants <code class="constant">GL_POINTS</code>, <code class="constant">GL_LINE_STRIP</code>, <code class="constant">GL_LINE_LOOP</code>, <code class="constant">GL_LINES</code>, <code class="constant">GL_TRIANGLE_STRIP</code>, <code class="constant">GL_TRIANGLE_FAN</code>, <code class="constant">GL_TRIANGLES</code>, <code class="constant">GL_LINES_ADJACENCY</code>, <code class="constant">GL_LINE_STRIP_ADJACENCY</code>, <code class="constant">GL_TRIANGLES_ADJACENCY</code>, <code class="constant">GL_TRIANGLE_STRIP_ADJACENCY</code> and <code class="constant">GL_PATCHES</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>count</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the number of elements to be rendered.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the type of the values in indices. Must be one of <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or <code class="constant">GL_UNSIGNED_INT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>indices</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a pointer to the location where the indices are stored.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>primcount</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the number of instances of the indexed geometry that should be drawn.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>basevertex</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies a constant that should be added to each element of <em class="parameter"><code>indices</code></em> when chosing elements from the enabled vertex arrays.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glDrawElementsInstancedBaseVertex</code> behaves identically to {@link GLES30#glDrawElementsInstanced(int, int, int, java.nio.Buffer, int) glDrawElementsInstanced} except that the <span class="emphasis"><em>i</em></span>th element transferred by the corresponding draw call will be taken from element <em class="parameter"><code>indices</code></em>[i] + <em class="parameter"><code>basevertex</code></em> of each enabled array. If the resulting value is larger than the maximum value representable by <em class="parameter"><code>type</code></em>, it is as if the calculation were upconverted to 32-bit unsigned integers (with wrapping on overflow conditions). The operation is undefined if the sum would be negative.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> or <em class="parameter"><code>primcount</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a geometry shader is active and <em class="parameter"><code>mode</code></em> is incompatible with the input primitive type of the geometry shader in the currently installed program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to an enabled array or the element array and the buffer object's data store is currently mapped.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glDrawElementsInstancedBaseVertex</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDrawElements(int, int, int, int) glDrawElements}, {@link GLES30#glDrawRangeElements(int, int, int, int, int, java.nio.Buffer) glDrawRangeElements}, {@link GLES32#glDrawRangeElementsBaseVertex(int, int, int, int, int, java.nio.Buffer, int) glDrawRangeElementsBaseVertex}, {@link GLES30#glDrawElementsInstanced(int, int, int, java.nio.Buffer, int) glDrawElementsInstanced}, {@link GLES32#glDrawElementsInstancedBaseVertex(int, int, int, java.nio.Buffer, int, int) glDrawElementsInstancedBaseVertex}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glDrawElementsInstancedBaseVertex(int mode, int count, int type, int indicesOffset, int instanceCount, int basevertex);

    /**
     * glFramebufferTexture
     * <div class="refentry" id="glFramebufferTexture">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glFramebufferTexture — attach a level of a texture object as a logical buffer of a framebuffer object</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glFramebufferTexture</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">attachment</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">texture</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">level</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target to which the framebuffer is bound.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>attachment</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the attachment point of the framebuffer.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>texture</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the name of an existing texture object to attach.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>level</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the mipmap level of the texture object to attach.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glFramebufferTexture</code> attaches a selected mipmap level or image of a texture object as one of the logical buffers of the framebuffer object bound to the specified target. Textures cannot be attached to the default draw and read framebuffer, so they are not valid targets of these commands.</p>
     *   <p>The framebuffer object is that bound to <em class="parameter"><code>target</code></em>, which must be <code class="constant">GL_DRAW_FRAMEBUFFER</code>, <code class="constant">GL_READ_FRAMEBUFFER</code>, or <code class="constant">GL_FRAMEBUFFER</code>. <code class="constant">GL_FRAMEBUFFER</code> is equivalent to <code class="constant">GL_DRAW_FRAMEBUFFER</code>.</p>
     *   <p><em class="parameter"><code>attachment</code></em> specifies the logical attachment of the framebuffer and must be <code class="constant">GL_COLOR_ATTACHMENT</code><span class="emphasis"><em>i</em></span>, <code class="constant">GL_DEPTH_ATTACHMENT</code>, <code class="constant">GL_STENCIL_ATTACHMENT</code> or <code class="constant">GL_DEPTH_STENCIL_ATTACHMENT</code>. <span class="emphasis"><em>i</em></span> in <code class="constant">GL_COLOR_ATTACHMENT</code><span class="emphasis"><em>i</em></span> may range from zero to the value of <code class="constant">GL_MAX_COLOR_ATTACHMENTS</code> minus one. Attaching a level of a texture to <code class="constant">GL_DEPTH_STENCIL_ATTACHMENT</code> is equivalent to attaching that level to both the <code class="constant">GL_DEPTH_ATTACHMENT</code> <span class="emphasis"><em>and</em></span> the <code class="constant">GL_STENCIL_ATTACHMENT</code> attachment points simultaneously.</p>
     *   <p>If <em class="parameter"><code>texture</code></em> is non-zero, the specified <em class="parameter"><code>level</code></em> of the texture object named <em class="parameter"><code>texture</code></em> is attached to the framebuffer attachment point named by <em class="parameter"><code>attachment</code></em>.</p>
     *   <p>If <em class="parameter"><code>texture</code></em> is a multisampled texture, then <em class="parameter"><code>level</code></em> must be zero.</p>
     *   <p>If <em class="parameter"><code>texture</code></em> is a 3D texture, then <em class="parameter"><code>level</code></em> must be greater than or equal to zero and less than or equal to $log_2$ of the value of <code class="constant">GL_MAX_3D_TEXTURE_SIZE</code>.</p>
     *   <p>If <em class="parameter"><code>texture</code></em> is a cube-mapped texture, then <em class="parameter"><code>level</code></em> must be greater than or equal to zero and less than or equal to $log_2$ of the value of <code class="constant">GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.</p>
     *   <p>For all other texture types, <em class="parameter"><code>level</code></em> must be greater than or equal to zero and less than or equal to $log_2$ of the value of <code class="constant">GL_MAX_TEXTURE_SIZE</code>.</p>
     *   <p>If <em class="parameter"><code>texture</code></em> is the name of a three-dimensional, cube map array, cube map, two-dimensional array, or two-dimensional multisample array texture, the specified texture level is an array of images, and the framebuffer attachment is considered to be <span class="emphasis"><em>layered</em></span> and <code class="constant">GL_FRAMEBUFFER_ATTACHMENT_LAYERED</code> is set to true.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> if it is not <code class="constant">GL_DRAW_FRAMEBUFFER</code>, <code class="constant">GL_READ_FRAMEBUFFER</code>, or <code class="constant">GL_FRAMEBUFFER</code></p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if zero is bound to <em class="parameter"><code>target</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>attachment</code></em> is not one of the accepted attachment points.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>texture</code></em> is not zero or the name of an existing texture object.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>texture</code></em> is not zero and <em class="parameter"><code>level</code></em> is not a supported texture level for <em class="parameter"><code>texture</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by if <em class="parameter"><code>texture</code></em> is a buffer texture.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glFramebufferTexture</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glGenFramebuffers(int, int[], int) glGenFramebuffers}, {@link GLES20#glBindFramebuffer(int, int) glBindFramebuffer}, {@link GLES20#glGenRenderbuffers(int, int[], int) glGenRenderbuffers}, {@link GLES30#glFramebufferTextureLayer(int, int, int, int, int) glFramebufferTextureLayer}, {@link GLES20#glFramebufferTexture2D(int, int, int, int, int) glFramebufferTexture2D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glFramebufferTexture(int target, int attachment, int texture, int level);

    /**
     * glPrimitiveBoundingBox
     * <div class="refentry" id="glPrimitiveBoundingBox">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glPrimitiveBoundingBox — set the bounding box for a primitive</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glPrimitiveBoundingBox</strong>(</code></td>
     *       <td>GLfloat <var class="pdparam">minX</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">minY</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">minZ</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">minW</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">maxX</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">maxY</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">maxZ</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">maxW</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"><em class="parameter"><code>minX</code></em>, </span> <span class="term"><em class="parameter"><code>minY</code></em>, </span> <span class="term"><em class="parameter"><code>minZ</code></em>, </span> <span class="term"> <em class="parameter"> <code>minW</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specify the minimum clip space cooridnate of the bounding box. The initial value is (-1, -1, -1, -1).</p>
     *     </dd>
     *     <dt><span class="term"><em class="parameter"><code>maxX</code></em>, </span> <span class="term"><em class="parameter"><code>maxY</code></em>, </span> <span class="term"><em class="parameter"><code>maxZ</code></em>, </span> <span class="term"> <em class="parameter"> <code>maxW</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specify the maximum clip space cooridnate of the bounding box. The initial value is (1, 1, 1, 1).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glPrimitiveBoundingBox</code> specifies a clip space bounding box which may allow implementations to optimize performance if the application provides bounds of primitives that will be generated by the tessellation primitive generator or the geometry shader prior to executing those stages. If the provided bounds are incorrect and primitives extend beyond them, the rasterizer may or may not generate fragments for the portions of primitives outside the bounds.</p>
     *   <p>The bounding box in clip space is composed of 16 vertices formed by all combinations of the minimum and maximum values for each dimension. This bounding box is clipped against <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       w
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       c
     *      </mml:mi>
     *     </mml:msub>
     *     <mml:mo>
     *      &gt;
     *     </mml:mo>
     *     <mml:mn>
     *      0
     *     </mml:mn>
     *    </mml:math> and projected to three dimensions by dividing <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       x
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       c
     *      </mml:mi>
     *     </mml:msub>
     *    </mml:math>, <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       y
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       c
     *      </mml:mi>
     *     </mml:msub>
     *    </mml:math>, and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       z
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       c
     *      </mml:mi>
     *     </mml:msub>
     *    </mml:math> by <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:msub>
     *      <mml:mi mathvariant="italic">
     *       w
     *      </mml:mi>
     *      <mml:mi mathvariant="italic">
     *       c
     *      </mml:mi>
     *     </mml:msub>
     *    </mml:math> for each vertex. The viewport transform is then applied to each vertex to produce a three-dimensional bounding volume in window coordinates. The window space bounding volume is expanded in the X and Y dimensions to accommodate the rasterization rules for the primitive type, and to fall on fragment boundaries.</p>
     *   <p>If tessellation is active, each invocation of the tessellation control shader may re-specify the bounding box by writing to the built-in <a class="citerefentry" href="https://registry.khronos.org/OpenGL-Refpages/es3/html/gl_BoundingBox.xhtml"><span class="citerefentry"><span class="refentrytitle">gl_BoundingBox (External)</span></span></a>[] variable. If the shader statically assigns a value to any part of this variable, then gl_BoundingBox[0] is used instead of <em class="parameter"><code>minX</code></em>, <em class="parameter"><code>minY</code></em>, <em class="parameter"><code>minZ</code></em>, <em class="parameter"><code>minW</code></em>, and gl_BoundingBox[1] is used instead of <em class="parameter"><code>maxX</code></em>, <em class="parameter"><code>maxY</code></em>, <em class="parameter"><code>maxZ</code></em>, <em class="parameter"><code>maxW</code></em>. If the shader contains a static assignment to gl_BoundingBox[] and there is an execution path through the shader that does not write all components of gl_BoundingBox[], the value of unwritten components and corresponding bounding box coordinates is undefined for executions of the shader that take that path.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_PRIMITIVE_BOUNDING_BOX</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glPrimitiveBoundingBox</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);

    /**
     * glGetGraphicsResetStatus
     * <div class="refentry" id="glGetGraphicsResetStatus">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetGraphicsResetStatus — check if the rendering context has not been lost due to software or hardware issues</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">GLenum <strong class="fsfunc">glGetGraphicsResetStatus</strong>(</code></td>
     *       <td><var class="pdparam">void</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p>Certain events can result in a reset of the GL context. Such a reset causes all context state to be lost and requires the application to recreate all objects in the affected context.</p>
     *   <p><code class="function">glGetGraphicsResetStatus</code> can return one of the following constants:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_NO_ERROR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Indicates that the GL context has not been in a reset state since the last call.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_GUILTY_CONTEXT_RESET</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Indicates that a reset has been detected that is attributable to the current GL context.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_INNOCENT_CONTEXT_RESET</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Indicates a reset has been detected that is not attributable to the current GL context.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_UNKNOWN_CONTEXT_RESET</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Indicates a detected graphics reset whose cause is unknown.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p>If a reset status other than <code class="constant">GL_NO_ERROR</code> is returned and subsequent calls return <code class="constant">GL_NO_ERROR</code>, the context reset was encountered and completed. If a reset status is repeatedly returned, the context may be in the process of resetting.</p>
     *   <p>Reset notification behavior is determined at context creation time, and may be queried by calling <code class="function">glGetIntegerv</code> with the symbolic constant <code class="constant">GL_RESET_NOTIFICATION_STRATEGY</code>.</p>
     *   <p>If the reset notification behavior is <code class="constant">GL_NO_RESET_NOTIFICATION</code>, then the implementation will never deliver notification of reset events, and <code class="function">glGetGraphicsResetStatus</code> will always return <code class="constant">GL_NO_ERROR</code>.</p>
     *   <p>If the behavior is <code class="constant">GL_LOSE_CONTEXT_ON_RESET</code>, a graphics reset will result in the loss of all context state, requiring the recreation of all associated objects. In this case <code class="function">glGetGraphicsResetStatus</code> may return any of the values described above.</p>
     *   <p>If a graphics reset notification occurs in a context, a notification must also occur in all other contexts which share objects with that context.</p>
     *   <p>After a graphics reset has occurred on a context, subsequent GL commands on that context (or any context which shares with that context) will generate a <code class="constant">GL_CONTEXT_LOST</code> error. Such commands will not have side effects (in particular, they will not modify memory passed by pointer for query results), and will not block indefinitely or cause termination of the application. There are two important exceptions to this behavior:</p>
     *   <p></p>
     *   <div class="itemizedlist">
     *    <ul class="itemizedlist" style="list-style-type: disc; ">
     *     <li class="listitem"><p><code class="function">glGetError</code> and <code class="function">glGetGraphicsResetStatus</code> behave normally following a graphics reset, so that the application can determine a reset has occurred, and when it is safe to destroy and re-create the context.</p></li>
     *     <li class="listitem"><p>Any commands which might cause a polling application to block indefinitely will generate a <code class="constant">GL_CONTEXT_LOST</code> error, but will also return a value indicating completion to the application. Such commands include:</p>
     *      <div class="itemizedlist">
     *       <ul class="itemizedlist" style="list-style-type: circle; ">
     *        <li class="listitem"><p><code class="function">glGetSynciv</code> with pname <code class="constant">GL_SYNC_STATUS</code> ignores the other parameters and returns <code class="constant">GL_SIGNALED</code> in <em class="parameter"><code>values</code></em>.</p></li>
     *        <li class="listitem"><p><code class="function">glGetQueryObjectuiv</code> with pname <code class="constant">GL_QUERY_RESULT_AVAILABLE</code> ignores the other parameters and returns <code class="constant">TRUE</code> in <em class="parameter"><code>params</code></em>.</p></li>
     *       </ul>
     *      </div> <p></p></li>
     *    </ul>
     *   </div>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetGraphicsResetStatus</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glGetError() glGetError} {@link GLES20#glGetBooleanv(int, boolean[], int) glGetIntegerv}, {@link GLES30#glGetQueryObjectuiv(int, int, int[], int) glGetQueryObjectuiv} {@link GLES30#glGetSynciv(long, int, int, int[], int, int[], int) glGetSynciv}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2014 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    int glGetGraphicsResetStatus();

    /**
     * glReadnPixels
     * <div class="refentry" id="glReadPixels">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glReadPixels, glReadnPixels — read a block of pixels from the frame buffer</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glReadPixels</strong>(</code></td>
     *       <td>GLint <var class="pdparam">x</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">y</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">width</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">height</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">format</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void * <var class="pdparam">data</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glReadnPixels</strong>(</code></td>
     *       <td>GLint <var class="pdparam">x</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">y</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">width</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">height</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">format</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">type</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>void * <var class="pdparam">data</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"><em class="parameter"><code>x</code></em>, </span> <span class="term"> <em class="parameter"> <code>y</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.</p>
     *     </dd>
     *     <dt><span class="term"><em class="parameter"><code>width</code></em>, </span> <span class="term"> <em class="parameter"> <code>height</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specify the dimensions of the pixel rectangle. <em class="parameter"><code>width</code></em> and <em class="parameter"><code>height</code></em> of one correspond to a single pixel.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>format</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the format of the pixel data. The following symbolic values are accepted: <code class="constant">GL_RGBA</code>, and <code class="constant">GL_RGBA_INTEGER</code>. An implementation-chosen format will also be accepted. This can be queried with {@link GLES20#glGetBooleanv(int, boolean[], int) glGet} and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_FORMAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>type</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the data type of the pixel data. Must be one of <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_INT</code>, <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code>, <code class="constant">GL_INT</code>, or <code class="constant">GL_FLOAT</code>. An implementation-chosen type will also be accepted. This can be queried with {@link GLES20#glGetBooleanv(int, boolean[], int) glGet} and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_TYPE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>data</code></em> for <code class="function">glReadnPixels</code> function.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>data</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the pixel data.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glReadPixels</code> and <code class="function">glReadnPixels</code> return pixel data from the frame buffer, starting with the pixel whose lower left corner is at location (<em class="parameter"><code>x</code></em>, <em class="parameter"><code>y</code></em>), into client memory starting at location <em class="parameter"><code>data</code></em>. Several parameters control the processing of the pixel data before it is placed into client memory. These parameters are set with {@link GLES20#glPixelStorei(int, int) glPixelStorei}. This reference page describes the effects on <code class="function">glReadPixels</code> and <code class="function">glReadnPixels</code> of most, but not all of the parameters specified by these three commands.</p>
     *   <p>If a non-zero named buffer object is bound to the <code class="constant">GL_PIXEL_PACK_BUFFER</code> target (see {@link GLES20#glBindBuffer(int, int) glBindBuffer}) while a block of pixels is requested, <em class="parameter"><code>data</code></em> is treated as a byte offset into the buffer object's data store rather than a pointer to client memory.</p>
     *   <p><code class="function">glReadPixels</code> and <code class="function">glReadnPixels</code> return values from each pixel with lower left corner at <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mfenced open="(" close=")">
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        x
     *       </mml:mi>
     *       <mml:mo>
     *        +
     *       </mml:mo>
     *       <mml:mi mathvariant="italic">
     *        i
     *       </mml:mi>
     *      </mml:mrow>
     *      <mml:mrow>
     *       <mml:mi mathvariant="italic">
     *        y
     *       </mml:mi>
     *       <mml:mo>
     *        +
     *       </mml:mo>
     *       <mml:mi mathvariant="italic">
     *        j
     *       </mml:mi>
     *      </mml:mrow>
     *     </mml:mfenced>
     *    </mml:math> for <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mo>
     *       &lt;=
     *      </mml:mo>
     *      <mml:mi mathvariant="italic">
     *       i
     *      </mml:mi>
     *      <mml:mo>
     *       &lt;
     *      </mml:mo>
     *      <mml:mi mathvariant="italic">
     *       width
     *      </mml:mi>
     *     </mml:mrow>
     *    </mml:math> and <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:mn>
     *       0
     *      </mml:mn>
     *      <mml:mo>
     *       &lt;=
     *      </mml:mo>
     *      <mml:mi mathvariant="italic">
     *       j
     *      </mml:mi>
     *      <mml:mo>
     *       &lt;
     *      </mml:mo>
     *      <mml:mi mathvariant="italic">
     *       height
     *      </mml:mi>
     *     </mml:mrow>
     *    </mml:math>. This pixel is said to be the <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mi mathvariant="italic">
     *      i
     *     </mml:mi>
     *    </mml:math>th pixel in the <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mi mathvariant="italic">
     *      j
     *     </mml:mi>
     *    </mml:math>th row. Pixels are returned in row order from the lowest to the highest row, left to right in each row.</p>
     *   <p><em class="parameter"><code>format</code></em> specifies the format for the returned pixel values; accepted values are <code class="constant">GL_RED</code>, <code class="constant">GL_RED_INTEGER</code>, <code class="constant">GL_RG</code>, <code class="constant">GL_RG_INTEGER</code>, <code class="constant">GL_RGB</code>, <code class="constant">GL_RGB_INTEGER</code>, <code class="constant">GL_RGBA</code>, <code class="constant">GL_RGBA_INTEGER</code>, <code class="constant">GL_LUMINANCE_ALPHA</code>, <code class="constant">GL_LUMINANCE</code>, and <code class="constant">GL_ALPHA</code></p>
     *   <p>Finally, the indices or components are converted to the proper format, as specified by <em class="parameter"><code>type</code></em>. If <em class="parameter"><code>type</code></em> is <code class="constant">GL_FLOAT</code>, then each integer index is converted to single-precision floating-point format.</p>
     *   <p>If <em class="parameter"><code>format</code></em> is <code class="constant">GL_RED</code>, <code class="constant">GL_RG</code>, <code class="constant">GL_RGB</code>, or <code class="constant">GL_RGBA</code>, and <em class="parameter"><code>type</code></em> is not <code class="constant">GL_FLOAT</code>, each component is multiplied by the multiplier shown in the following table. If type is <code class="constant">GL_FLOAT</code>, then each component is passed as is (or converted to the client's single-precision floating-point format if it is different from the one used by the GL).</p>
     *   <p></p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col>
     *      <col>
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><em class="parameter"><code>type</code></em></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Index Mask </strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Component Conversion </strong></span></th>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <msup>
     *           <mn>
     *            2
     *           </mn>
     *           <mn>
     *            8
     *           </mn>
     *          </msup>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msup>
     *             <mn>
     *              2
     *             </mn>
     *             <mn>
     *              8
     *             </mn>
     *            </msup>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *          <mo>
     *           ⁢
     *          </mo>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </mrow>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <msup>
     *           <mn>
     *            2
     *           </mn>
     *           <mn>
     *            7
     *           </mn>
     *          </msup>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mfrac>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfenced open="(" close=")">
     *             <mrow>
     *              <msup>
     *               <mn>
     *                2
     *               </mn>
     *               <mn>
     *                8
     *               </mn>
     *              </msup>
     *              <mo>
     *               -
     *              </mo>
     *              <mn>
     *               1
     *              </mn>
     *             </mrow>
     *            </mfenced>
     *            <mo>
     *             ⁢
     *            </mo>
     *            <mi mathvariant="italic">
     *             c
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *          <mn>
     *           2
     *          </mn>
     *         </mfrac>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HALF_FLOAT</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">none</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll">
     *         <mi mathvariant="italic">
     *          c
     *         </mi>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">none</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll">
     *         <mi mathvariant="italic">
     *          c
     *         </mi>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT_5_6_5</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <msup>
     *           <mn>
     *            2
     *           </mn>
     *           <mn>
     *            N
     *           </mn>
     *          </msup>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msup>
     *             <mn>
     *              2
     *             </mn>
     *             <mn>
     *              N
     *             </mn>
     *            </msup>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *          <mo>
     *           ⁢
     *          </mo>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </mrow>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <msup>
     *           <mn>
     *            2
     *           </mn>
     *           <mn>
     *            N
     *           </mn>
     *          </msup>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msup>
     *             <mn>
     *              2
     *             </mn>
     *             <mn>
     *              N
     *             </mn>
     *            </msup>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *          <mo>
     *           ⁢
     *          </mo>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </mrow>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <msup>
     *           <mn>
     *            2
     *           </mn>
     *           <mn>
     *            N
     *           </mn>
     *          </msup>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msup>
     *             <mn>
     *              2
     *             </mn>
     *             <mn>
     *              N
     *             </mn>
     *            </msup>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *          <mo>
     *           ⁢
     *          </mo>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </mrow>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <msup>
     *           <mn>
     *            2
     *           </mn>
     *           <mn>
     *            N
     *           </mn>
     *          </msup>
     *          <mo>
     *           -
     *          </mo>
     *          <mn>
     *           1
     *          </mn>
     *         </mrow>
     *        </math></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">
     *        <math overflow="scroll"><mrow>
     *          <mfenced open="(" close=")">
     *           <mrow>
     *            <msup>
     *             <mn>
     *              2
     *             </mn>
     *             <mn>
     *              N
     *             </mn>
     *            </msup>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *          <mo>
     *           ⁢
     *          </mo>
     *          <mi mathvariant="italic">
     *           c
     *          </mi>
     *         </mrow>
     *        </math></td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_10F_11F_11F_REV</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">--</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">Special</td>
     *       <td style="border-right: 2px solid ; border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td style="border-bottom: 2px solid ; " class="auto-generated">&nbsp;</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_5_9_9_9_REV</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">--</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">Special</td>
     *       <td style="border-right: 2px solid ; " class="auto-generated">&nbsp;</td>
     *       <td class="auto-generated">&nbsp;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p>Return values are placed in memory as follows. If <em class="parameter"><code>format</code></em> is <code class="constant">GL_RED</code>, or <code class="constant">GL_RED_INTEGER</code>, a single value is returned and the data for the <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mi mathvariant="italic">
     *      i
     *     </mml:mi>
     *    </mml:math>th pixel in the <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mi mathvariant="italic">
     *      j
     *     </mml:mi>
     *    </mml:math>th row is placed in location <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
     *     <mml:mrow>
     *      <mml:mfenced open="(" close=")">
     *       <mml:mi mathvariant="italic">
     *        j
     *       </mml:mi>
     *      </mml:mfenced>
     *      <mml:mo>
     *       ⁢
     *      </mml:mo>
     *      <mml:mi mathvariant="italic">
     *       width
     *      </mml:mi>
     *      <mml:mo>
     *       +
     *      </mml:mo>
     *      <mml:mi mathvariant="italic">
     *       i
     *      </mml:mi>
     *     </mml:mrow>
     *    </mml:math>. <code class="constant">GL_RG</code> and <code class="constant">GL_RG_INTEGER</code> return two values, <code class="constant">GL_RGB</code> and <code class="constant">GL_RGB_INTEGER</code> return three values, <code class="constant">GL_RGBA</code> and <code class="constant">GL_RGBA_INTEGER</code> return four values for each pixel, with all values corresponding to a single pixel occupying contiguous space in <em class="parameter"><code>data</code></em>. See {@link GLES20#glPixelStorei(int, int) glPixelStorei} for a description of parameters which affect the packing of data into memory.</p>
     *   <p><code class="function">glReadnPixels</code> function will only handle the call if <em class="parameter"><code>bufSize</code></em> is at least of the size required to store the requested data. Otherwise, it will generate a <code class="constant">GL_INVALID_OPERATION</code> error.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Values for pixels that lie outside the window connected to the current GL context are undefined.</p>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>data</code></em>.</p>
     *   <p>Only three <em class="parameter"><code>format</code></em>/<em class="parameter"><code>type</code></em> parameter pairs are accepted. For normalized fixed point rendering surfaces, <code class="constant">GL_RGBA</code>/<code class="constant">GL_UNSIGNED_BYTE</code> is accepted. For signed integer rendering surfaces, <code class="constant">GL_RGBA_INTEGER</code>/<code class="constant">GL_INT</code> is accepted. For unsigned integer rendering surfaces, <code class="constant">GL_RGBA_INTEGER</code>/<code class="constant">GL_UNSIGNED_INT</code> is accepted. For <code class="constant">GL_RGBA10_A2</code> rendering surfaces, <code class="constant">GL_RGBA</code>/<code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code> is accepted. The other acceptable pair can be discovered by querying <code class="constant">GL_IMPLEMENTATION_COLOR_READ_FORMAT</code> and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_TYPE</code>. The implementation chosen format may also vary depending on the format of the currently bound rendering surface.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>format</code></em> or <em class="parameter"><code>type</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if either <em class="parameter"><code>width</code></em> or <em class="parameter"><code>height</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the <code class="constant">GL_PIXEL_PACK_BUFFER</code> target and the buffer object's data store is currently mapped.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the <code class="constant">GL_PIXEL_PACK_BUFFER</code> target and the data would be packed to the buffer object such that the memory writes required would exceed the data store size.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="constant">GL_READ_BUFFER</code> is <code class="constant">GL_NONE</code> or if <code class="constant">GL_READ_FRAMEBUFFER_BINDING</code> is non-zero and the read buffer selects an attachment that has no image attached.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="constant">GL_READ_FRAMEBUFFER_BINDING</code> is non-zero, the read framebuffer is complete, and the value of <code class="constant">GL_SAMPLE_BUFFERS</code> for the read framebuffer is greater than zero.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the readbuffer of the currently bound framebuffer is a fixed point normalized surface and <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> are neither <code class="constant">GL_RGBA</code> and <code class="constant">GL_UNSIGNED_BYTE</code>, respectively, nor the format/type pair returned by querying <code class="constant">GL_IMPLEMENTATION_COLOR_READ_FORMAT</code> and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_TYPE</code>.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the readbuffer of the currently bound framebuffer is a floating point surface and <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> are neither <code class="constant">GL_RGBA</code> and <code class="constant">GL_FLOAT</code>, respectively, nor the format/type pair returned by querying <code class="constant">GL_IMPLEMENTATION_COLOR_READ_FORMAT</code> and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_TYPE</code>.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the readbuffer of the currently bound framebuffer is a signed integer surface and <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> are neither <code class="constant">GL_RGBA_INTEGER</code> and <code class="constant">GL_INT</code>, respectively, nor the format/type pair returned by querying <code class="constant">GL_IMPLEMENTATION_COLOR_READ_FORMAT</code> and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_TYPE</code>.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the readbuffer of the currently bound framebuffer is an unsigned integer surface and <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> are neither <code class="constant">GL_RGBA_INTEGER</code> and <code class="constant">GL_UNSIGNED_INT</code>, respectively, nor the format/type pair returned by querying <code class="constant">GL_IMPLEMENTATION_COLOR_READ_FORMAT</code> and <code class="constant">GL_IMPLEMENTATION_COLOR_READ_TYPE</code>.</p>
     *   <p><code class="constant">GL_INVALID_FRAMEBUFFER_OPERATION</code> is generated if the currently bound framebuffer is not framebuffer complete (i.e. the return value from {@link GLES20#glCheckFramebufferStatus(int) glCheckFramebufferStatus} is not <code class="constant">GL_FRAMEBUFFER_COMPLETE</code>).</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glReadnPixels</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_PIXEL_PACK_BUFFER_BINDING</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">glReadPixels</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; ">glReadnPixels</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glPixelStorei(int, int) glPixelStorei}, {@link GLES30#glReadBuffer(int) glReadBuffer}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, java.nio.Buffer data);

    /**
     * glGetnUniformfv
     * <div class="refentry" id="glGetUniform">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetUniform — Returns the value of a uniform variable</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>program</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the program object to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>location</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the location of the uniform variable to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>params</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the value of the specified uniform variable.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> return in <em class="parameter"><code>params</code></em> the value(s) of the specified uniform variable. The type of the uniform variable specified by <em class="parameter"><code>location</code></em> determines the number of values returned. If the uniform variable is defined in the shader as a boolean, int, unsigned int, or float, a single value will be returned. If it is defined as a vec2, ivec2, uvec2, or bvec2, two values will be returned. If it is defined as a vec3, ivec3, uvec3, or bvec3, three values will be returned, and so on. To query values stored in uniform variables declared as arrays, call <code class="function">glGetUniform</code> for each element of the array. To query values stored in uniform variables declared as structures, call <code class="function">glGetUniform</code> for each field in the structure. The values for uniform variables declared as a matrix will be returned in column major order.</p>
     *   <p>The locations assigned to uniform variables are not known until the program object is linked. After linking has occurred, the command {@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} can be used to obtain the location of a uniform variable. This location value can then be passed to <code class="function">glGetUniform</code> or <code class="function">glGetnUniform</code> in order to query the current value of the uniform variable. After a program object has been linked successfully, the index values for uniform variables remain fixed until the next link command occurs. The uniform variable values can only be queried after a link if the link was successful.</p>
     *   <p>The only difference between <code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> is that <code class="function">glGetnUniform</code> will generate an error if size of the <em class="parameter"><code>params</code></em> buffer, as described by <em class="parameter"><code>bufSize</code></em>, is not large enough to hold the result data.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>program</code></em> is not a value generated by OpenGL.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> is not a program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> has not been successfully linked.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>location</code></em> does not correspond to a valid uniform variable location for the specified program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glGetnUniform</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int) glGetActiveUniform} with arguments <em class="parameter"><code>program</code></em> and the index of an active uniform variable</p>
     *   <p>{@link GLES20#glGetProgramiv(int, int, int[], int) glGetProgramiv} with arguments <em class="parameter"><code>program</code></em> and <code class="constant">GL_ACTIVE_UNIFORMS</code> or <code class="constant">GL_ACTIVE_UNIFORM_MAX_LENGTH</code></p>
     *   <p>{@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} with arguments <em class="parameter"><code>program</code></em> and the name of a uniform variable</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetnUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glCreateProgram() glCreateProgram}, {@link GLES20#glLinkProgram(int) glLinkProgram}, {@link GLES20#glUniform1f(int, float) glUniform}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetnUniformfv(int program, int location, int bufSize, float[] params, int offset);

    /**
     * glGetnUniformfv
     * <div class="refentry" id="glGetUniform">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetUniform — Returns the value of a uniform variable</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>program</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the program object to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>location</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the location of the uniform variable to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>params</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the value of the specified uniform variable.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> return in <em class="parameter"><code>params</code></em> the value(s) of the specified uniform variable. The type of the uniform variable specified by <em class="parameter"><code>location</code></em> determines the number of values returned. If the uniform variable is defined in the shader as a boolean, int, unsigned int, or float, a single value will be returned. If it is defined as a vec2, ivec2, uvec2, or bvec2, two values will be returned. If it is defined as a vec3, ivec3, uvec3, or bvec3, three values will be returned, and so on. To query values stored in uniform variables declared as arrays, call <code class="function">glGetUniform</code> for each element of the array. To query values stored in uniform variables declared as structures, call <code class="function">glGetUniform</code> for each field in the structure. The values for uniform variables declared as a matrix will be returned in column major order.</p>
     *   <p>The locations assigned to uniform variables are not known until the program object is linked. After linking has occurred, the command {@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} can be used to obtain the location of a uniform variable. This location value can then be passed to <code class="function">glGetUniform</code> or <code class="function">glGetnUniform</code> in order to query the current value of the uniform variable. After a program object has been linked successfully, the index values for uniform variables remain fixed until the next link command occurs. The uniform variable values can only be queried after a link if the link was successful.</p>
     *   <p>The only difference between <code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> is that <code class="function">glGetnUniform</code> will generate an error if size of the <em class="parameter"><code>params</code></em> buffer, as described by <em class="parameter"><code>bufSize</code></em>, is not large enough to hold the result data.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>program</code></em> is not a value generated by OpenGL.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> is not a program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> has not been successfully linked.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>location</code></em> does not correspond to a valid uniform variable location for the specified program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glGetnUniform</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int) glGetActiveUniform} with arguments <em class="parameter"><code>program</code></em> and the index of an active uniform variable</p>
     *   <p>{@link GLES20#glGetProgramiv(int, int, int[], int) glGetProgramiv} with arguments <em class="parameter"><code>program</code></em> and <code class="constant">GL_ACTIVE_UNIFORMS</code> or <code class="constant">GL_ACTIVE_UNIFORM_MAX_LENGTH</code></p>
     *   <p>{@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} with arguments <em class="parameter"><code>program</code></em> and the name of a uniform variable</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetnUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glCreateProgram() glCreateProgram}, {@link GLES20#glLinkProgram(int) glLinkProgram}, {@link GLES20#glUniform1f(int, float) glUniform}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetnUniformfv(int program, int location, int bufSize, java.nio.FloatBuffer params);

    /**
     * glGetnUniformiv
     * <div class="refentry" id="glGetUniform">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetUniform — Returns the value of a uniform variable</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>program</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the program object to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>location</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the location of the uniform variable to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>params</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the value of the specified uniform variable.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> return in <em class="parameter"><code>params</code></em> the value(s) of the specified uniform variable. The type of the uniform variable specified by <em class="parameter"><code>location</code></em> determines the number of values returned. If the uniform variable is defined in the shader as a boolean, int, unsigned int, or float, a single value will be returned. If it is defined as a vec2, ivec2, uvec2, or bvec2, two values will be returned. If it is defined as a vec3, ivec3, uvec3, or bvec3, three values will be returned, and so on. To query values stored in uniform variables declared as arrays, call <code class="function">glGetUniform</code> for each element of the array. To query values stored in uniform variables declared as structures, call <code class="function">glGetUniform</code> for each field in the structure. The values for uniform variables declared as a matrix will be returned in column major order.</p>
     *   <p>The locations assigned to uniform variables are not known until the program object is linked. After linking has occurred, the command {@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} can be used to obtain the location of a uniform variable. This location value can then be passed to <code class="function">glGetUniform</code> or <code class="function">glGetnUniform</code> in order to query the current value of the uniform variable. After a program object has been linked successfully, the index values for uniform variables remain fixed until the next link command occurs. The uniform variable values can only be queried after a link if the link was successful.</p>
     *   <p>The only difference between <code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> is that <code class="function">glGetnUniform</code> will generate an error if size of the <em class="parameter"><code>params</code></em> buffer, as described by <em class="parameter"><code>bufSize</code></em>, is not large enough to hold the result data.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>program</code></em> is not a value generated by OpenGL.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> is not a program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> has not been successfully linked.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>location</code></em> does not correspond to a valid uniform variable location for the specified program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glGetnUniform</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int) glGetActiveUniform} with arguments <em class="parameter"><code>program</code></em> and the index of an active uniform variable</p>
     *   <p>{@link GLES20#glGetProgramiv(int, int, int[], int) glGetProgramiv} with arguments <em class="parameter"><code>program</code></em> and <code class="constant">GL_ACTIVE_UNIFORMS</code> or <code class="constant">GL_ACTIVE_UNIFORM_MAX_LENGTH</code></p>
     *   <p>{@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} with arguments <em class="parameter"><code>program</code></em> and the name of a uniform variable</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetnUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glCreateProgram() glCreateProgram}, {@link GLES20#glLinkProgram(int) glLinkProgram}, {@link GLES20#glUniform1f(int, float) glUniform}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetnUniformiv(int program, int location, int bufSize, int[] params, int offset);

    /**
     * glGetnUniformiv
     * <div class="refentry" id="glGetUniform">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetUniform — Returns the value of a uniform variable</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>program</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the program object to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>location</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the location of the uniform variable to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>params</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the value of the specified uniform variable.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> return in <em class="parameter"><code>params</code></em> the value(s) of the specified uniform variable. The type of the uniform variable specified by <em class="parameter"><code>location</code></em> determines the number of values returned. If the uniform variable is defined in the shader as a boolean, int, unsigned int, or float, a single value will be returned. If it is defined as a vec2, ivec2, uvec2, or bvec2, two values will be returned. If it is defined as a vec3, ivec3, uvec3, or bvec3, three values will be returned, and so on. To query values stored in uniform variables declared as arrays, call <code class="function">glGetUniform</code> for each element of the array. To query values stored in uniform variables declared as structures, call <code class="function">glGetUniform</code> for each field in the structure. The values for uniform variables declared as a matrix will be returned in column major order.</p>
     *   <p>The locations assigned to uniform variables are not known until the program object is linked. After linking has occurred, the command {@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} can be used to obtain the location of a uniform variable. This location value can then be passed to <code class="function">glGetUniform</code> or <code class="function">glGetnUniform</code> in order to query the current value of the uniform variable. After a program object has been linked successfully, the index values for uniform variables remain fixed until the next link command occurs. The uniform variable values can only be queried after a link if the link was successful.</p>
     *   <p>The only difference between <code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> is that <code class="function">glGetnUniform</code> will generate an error if size of the <em class="parameter"><code>params</code></em> buffer, as described by <em class="parameter"><code>bufSize</code></em>, is not large enough to hold the result data.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>program</code></em> is not a value generated by OpenGL.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> is not a program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> has not been successfully linked.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>location</code></em> does not correspond to a valid uniform variable location for the specified program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glGetnUniform</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int) glGetActiveUniform} with arguments <em class="parameter"><code>program</code></em> and the index of an active uniform variable</p>
     *   <p>{@link GLES20#glGetProgramiv(int, int, int[], int) glGetProgramiv} with arguments <em class="parameter"><code>program</code></em> and <code class="constant">GL_ACTIVE_UNIFORMS</code> or <code class="constant">GL_ACTIVE_UNIFORM_MAX_LENGTH</code></p>
     *   <p>{@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} with arguments <em class="parameter"><code>program</code></em> and the name of a uniform variable</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetnUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glCreateProgram() glCreateProgram}, {@link GLES20#glLinkProgram(int) glLinkProgram}, {@link GLES20#glUniform1f(int, float) glUniform}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetnUniformiv(int program, int location, int bufSize, java.nio.IntBuffer params);

    /**
     * glGetnUniformuiv
     * <div class="refentry" id="glGetUniform">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetUniform — Returns the value of a uniform variable</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>program</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the program object to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>location</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the location of the uniform variable to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>params</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the value of the specified uniform variable.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> return in <em class="parameter"><code>params</code></em> the value(s) of the specified uniform variable. The type of the uniform variable specified by <em class="parameter"><code>location</code></em> determines the number of values returned. If the uniform variable is defined in the shader as a boolean, int, unsigned int, or float, a single value will be returned. If it is defined as a vec2, ivec2, uvec2, or bvec2, two values will be returned. If it is defined as a vec3, ivec3, uvec3, or bvec3, three values will be returned, and so on. To query values stored in uniform variables declared as arrays, call <code class="function">glGetUniform</code> for each element of the array. To query values stored in uniform variables declared as structures, call <code class="function">glGetUniform</code> for each field in the structure. The values for uniform variables declared as a matrix will be returned in column major order.</p>
     *   <p>The locations assigned to uniform variables are not known until the program object is linked. After linking has occurred, the command {@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} can be used to obtain the location of a uniform variable. This location value can then be passed to <code class="function">glGetUniform</code> or <code class="function">glGetnUniform</code> in order to query the current value of the uniform variable. After a program object has been linked successfully, the index values for uniform variables remain fixed until the next link command occurs. The uniform variable values can only be queried after a link if the link was successful.</p>
     *   <p>The only difference between <code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> is that <code class="function">glGetnUniform</code> will generate an error if size of the <em class="parameter"><code>params</code></em> buffer, as described by <em class="parameter"><code>bufSize</code></em>, is not large enough to hold the result data.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>program</code></em> is not a value generated by OpenGL.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> is not a program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> has not been successfully linked.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>location</code></em> does not correspond to a valid uniform variable location for the specified program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glGetnUniform</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int) glGetActiveUniform} with arguments <em class="parameter"><code>program</code></em> and the index of an active uniform variable</p>
     *   <p>{@link GLES20#glGetProgramiv(int, int, int[], int) glGetProgramiv} with arguments <em class="parameter"><code>program</code></em> and <code class="constant">GL_ACTIVE_UNIFORMS</code> or <code class="constant">GL_ACTIVE_UNIFORM_MAX_LENGTH</code></p>
     *   <p>{@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} with arguments <em class="parameter"><code>program</code></em> and the name of a uniform variable</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetnUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glCreateProgram() glCreateProgram}, {@link GLES20#glLinkProgram(int) glLinkProgram}, {@link GLES20#glUniform1f(int, float) glUniform}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetnUniformuiv(int program, int location, int bufSize, int[] params, int offset);

    /**
     * glGetnUniformuiv
     * <div class="refentry" id="glGetUniform">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetUniform — Returns the value of a uniform variable</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetnUniformuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">program</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">location</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">bufSize</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>program</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the program object to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>location</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the location of the uniform variable to be queried.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>bufSize</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the buffer <em class="parameter"><code>params</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the value of the specified uniform variable.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> return in <em class="parameter"><code>params</code></em> the value(s) of the specified uniform variable. The type of the uniform variable specified by <em class="parameter"><code>location</code></em> determines the number of values returned. If the uniform variable is defined in the shader as a boolean, int, unsigned int, or float, a single value will be returned. If it is defined as a vec2, ivec2, uvec2, or bvec2, two values will be returned. If it is defined as a vec3, ivec3, uvec3, or bvec3, three values will be returned, and so on. To query values stored in uniform variables declared as arrays, call <code class="function">glGetUniform</code> for each element of the array. To query values stored in uniform variables declared as structures, call <code class="function">glGetUniform</code> for each field in the structure. The values for uniform variables declared as a matrix will be returned in column major order.</p>
     *   <p>The locations assigned to uniform variables are not known until the program object is linked. After linking has occurred, the command {@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} can be used to obtain the location of a uniform variable. This location value can then be passed to <code class="function">glGetUniform</code> or <code class="function">glGetnUniform</code> in order to query the current value of the uniform variable. After a program object has been linked successfully, the index values for uniform variables remain fixed until the next link command occurs. The uniform variable values can only be queried after a link if the link was successful.</p>
     *   <p>The only difference between <code class="function">glGetUniform</code> and <code class="function">glGetnUniform</code> is that <code class="function">glGetnUniform</code> will generate an error if size of the <em class="parameter"><code>params</code></em> buffer, as described by <em class="parameter"><code>bufSize</code></em>, is not large enough to hold the result data.</p>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>program</code></em> is not a value generated by OpenGL.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> is not a program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>program</code></em> has not been successfully linked.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>location</code></em> does not correspond to a valid uniform variable location for the specified program object.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated by <code class="function">glGetnUniform</code> if the buffer size required to store the requested data is greater than <em class="parameter"><code>bufSize</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int) glGetActiveUniform} with arguments <em class="parameter"><code>program</code></em> and the index of an active uniform variable</p>
     *   <p>{@link GLES20#glGetProgramiv(int, int, int[], int) glGetProgramiv} with arguments <em class="parameter"><code>program</code></em> and <code class="constant">GL_ACTIVE_UNIFORMS</code> or <code class="constant">GL_ACTIVE_UNIFORM_MAX_LENGTH</code></p>
     *   <p>{@link GLES20#glGetUniformLocation(int, String) glGetUniformLocation} with arguments <em class="parameter"><code>program</code></em> and the name of a uniform variable</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetnUniformiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetnUniformuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glCreateProgram() glCreateProgram}, {@link GLES20#glLinkProgram(int) glLinkProgram}, {@link GLES20#glUniform1f(int, float) glUniform}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2003-2005 3Dlabs Inc. Ltd. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetnUniformuiv(int program, int location, int bufSize, java.nio.IntBuffer params);

    /**
     * glMinSampleShading
     * <div class="refentry" id="glMinSampleShading">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glMinSampleShading — specifies minimum rate at which sample shading takes place</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glMinSampleShading</strong>(</code></td>
     *       <td>GLfloat <var class="pdparam">value</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>value</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the rate at which samples are shaded within each covered pixel.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glMinSampleShading</code> specifies the rate at which samples are shaded within a covered pixel. Sample-rate shading is enabled by calling {@link GLES20#glDisable(int) glEnable} with the parameter <code class="constant">GL_SAMPLE_SHADING</code>. If the value of <code class="constant">GL_SAMPLE_BUFFERS</code> is zero, or <code class="constant">GL_SAMPLE_SHADING</code> is disabled, sample shading has no effect. Otherwise, an implementation must provide at least as many unique color values for each covered fragment as specified by <em class="parameter"><code>value</code></em> times <em class="parameter"><code>samples</code></em> where <em class="parameter"><code>samples</code></em> is the value of <code class="constant">GL_SAMPLES</code> for the current framebuffer. At least 1 sample for each covered fragment is generated.</p>
     *   <p>A <em class="parameter"><code>value</code></em> of 1.0 indicates that each sample in the framebuffer should be independently shaded. A <em class="parameter"><code>value</code></em> of 0.0 effectively allows the GL to ignore sample rate shading. Any value between 0.0 and 1.0 allows the GL to shade only a subset of the total samples within each covered fragment. Which samples are shaded and the algorithm used to select that subset of the fragment's samples is implementation dependent.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p>None.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MIN_SAMPLE_SHADING</code>.</p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_SAMPLES</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glMinSampleShading</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDisable(int) glEnable}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2011-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glMinSampleShading(float value);

    /**
     * glPatchParameteri
     * <div class="refentry" id="glPatchParameteri">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glPatchParameteri — specifies the parameters for patch primitives</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glPatchParameteri</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">value</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the name of the parameter to set. The symbolc constants <code class="constant">GL_PATCH_VERTICES</code> is accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>value</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the new value for the parameter given by <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>values</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the address of an array containing the new values for the parameter given by <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glPatchParameteri</code> specifies the parameters that will be used for patch primitives. <em class="parameter"><code>pname</code></em> specifies the parameter to modify and must be <code class="constant">GL_PATCH_VERTICES</code>. <em class="parameter"><code>value</code></em> specifies the new value for the parameter specified by <em class="parameter"><code>pname</code></em>.</p>
     *   <p>When <em class="parameter"><code>pname</code></em> is <code class="constant">GL_PATCH_VERTICES</code>, <em class="parameter"><code>value</code></em> specifies the number of vertices that will be used to make up a single patch primitive. Patch primitives are consumed by the tessellation control shader (if present) and subsequently used for tessellation. When primitives are specified using {@link GLES20#glDrawArrays(int, int, int) glDrawArrays} or a similar function, each patch will be made from <em class="parameter"><code>parameter</code></em> control points, each represented by a vertex taken from the enabeld vertex arrays. <em class="parameter"><code>parameter</code></em> must be greater than zero, and less than or equal to the value of <code class="constant">GL_MAX_PATCH_VERTICES</code>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>pname</code></em> is <code class="constant">GL_PATCH_VERTICES</code> and <em class="parameter"><code>value</code></em> is less than or equal to zero, or greater than the value of <code class="constant">GL_MAX_PATCH_VERTICES</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glPatchParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glDrawArrays(int, int, int) glDrawArrays}, {@link GLES30#glDrawArraysInstanced(int, int, int, int) glDrawArraysInstanced}, {@link GLES20#glDrawElements(int, int, int, int) glDrawElements}, {@link GLES30#glDrawRangeElements(int, int, int, int, int, java.nio.Buffer) glDrawRangeElements},</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glPatchParameteri(int pname, int value);

    /**
     * glTexParameterIiv
     * <div class="refentry" id="glTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexParameter — set texture parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterf</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteri</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target texture, which must be either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, or <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued texture parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>.</p>
     *      <p>For the vector commands (<code class="function">glTexParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands, specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture, either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, or <code class="constant">GL_TEXTURE_3D</code>. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the mode used to read from depth-stencil format textures. <em class="parameter"><code>params</code></em> must be one of <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_STENCIL_INDEX</code>. If the depth stencil mode is <code class="constant">GL_DEPTH_COMPONENT</code>, then reads from depth-stencil format textures will return the depth component of the texel in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the stencil component will be discarded. If the depth stencil mode is <code class="constant">GL_STENCIL_INDEX</code> then the stencil component is returned in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the depth component is discarded. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the lowest defined mipmap level. This is an integer value. The initial value is 0.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the depth texture value sampled from the currently bound depth texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to the red channel.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound depth textures. That is, a texture whose internal format is <code class="constant">GL_DEPTH_COMPONENT_*</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound depth texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound depth texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be minified. There are six defined minifying functions. Two of them use either the nearest texture elements or a weighted average of multiple texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates ) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the texture elements that are closest to the specified texture coordinates) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or multiple texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be magified. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the index of the highest defined mipmap level. This is an integer value. The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> are <code class="constant">GL_RED</code>, <code class="constant">GL_GREEN</code>, <code class="constant">GL_BLUE</code>, <code class="constant">GL_ALPHA</code>, <code class="constant">GL_ZERO</code> and <code class="constant">GL_ONE</code>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_RED</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the first channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_GREEN</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the second channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_BLUE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the third channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ALPHA</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the fourth channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ZERO</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         0
     *        </mn>
     *       </math>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ONE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         1
     *        </mn>
     *       </math> for integer texture components, otherwise
     *       <math overflow="scroll">
     *        <mn>
     *         1.0
     *        </mn>
     *       </math>. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         g
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         b
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         a
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glTexParameterIiv</code> or <code class="function">glTexParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glTexParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glTexParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Suppose that a program attempts to sample from a texture and has set <code class="constant">GL_TEXTURE_MIN_FILTER</code> to one of the functions that requires a mipmap. If either the dimensions of the texture images currently defined (with previous calls to {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}) do not follow the proper sequence for mipmaps (described above), or there are fewer texture images defined than are needed, or the set of texture images have differing numbers of texture components, then the texture is considered <span class="emphasis"><em>incomplete</em></span>.</p>
     *   <p>Linear filtering accesses the four nearest texture elements only in 2D textures. In 3D textures, linear filtering accesses the eight nearest texture elements.</p>
     *   <p><code class="function">glTexParameter</code> specifies the texture parameters for the texture object bound to the active texture unit, specified by calling {@link GLES20#glActiveTexture(int) glActiveTexture}.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not one of the accepted defined values.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and <em class="parameter"><code>pname</code></em> is any of the sampler states.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and pname <code class="constant">GL_TEXTURE_BASE_LEVEL</code> is set to a value other than zero.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>pname</code></em> is <code class="constant">GL_TEXTURE_BASE_LEVEL</code> or <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, and <em class="parameter"><code>param</code></em> or <em class="parameter"><code>params</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glTexParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetTexParameterfv(int, int, float[], int) glGetTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glActiveTexture(int) glActiveTexture}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}, {@link GLES20#glCopyTexSubImage2D(int, int, int, int, int, int, int, int) glCopyTexSubImage2D}, {@link GLES30#glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int) glCopyTexSubImage3D}, {@link GLES20#glPixelStorei(int, int) glPixelStorei}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, {@link GLES20#glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage2D}, {@link GLES30#glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage3D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexParameterIiv(int target, int pname, int[] params, int offset);

    /**
     * glTexParameterIiv
     * <div class="refentry" id="glTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexParameter — set texture parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterf</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteri</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target texture, which must be either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, or <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued texture parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>.</p>
     *      <p>For the vector commands (<code class="function">glTexParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands, specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture, either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, or <code class="constant">GL_TEXTURE_3D</code>. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the mode used to read from depth-stencil format textures. <em class="parameter"><code>params</code></em> must be one of <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_STENCIL_INDEX</code>. If the depth stencil mode is <code class="constant">GL_DEPTH_COMPONENT</code>, then reads from depth-stencil format textures will return the depth component of the texel in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the stencil component will be discarded. If the depth stencil mode is <code class="constant">GL_STENCIL_INDEX</code> then the stencil component is returned in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the depth component is discarded. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the lowest defined mipmap level. This is an integer value. The initial value is 0.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the depth texture value sampled from the currently bound depth texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to the red channel.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound depth textures. That is, a texture whose internal format is <code class="constant">GL_DEPTH_COMPONENT_*</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound depth texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound depth texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be minified. There are six defined minifying functions. Two of them use either the nearest texture elements or a weighted average of multiple texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates ) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the texture elements that are closest to the specified texture coordinates) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or multiple texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be magified. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the index of the highest defined mipmap level. This is an integer value. The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> are <code class="constant">GL_RED</code>, <code class="constant">GL_GREEN</code>, <code class="constant">GL_BLUE</code>, <code class="constant">GL_ALPHA</code>, <code class="constant">GL_ZERO</code> and <code class="constant">GL_ONE</code>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_RED</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the first channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_GREEN</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the second channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_BLUE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the third channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ALPHA</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the fourth channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ZERO</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         0
     *        </mn>
     *       </math>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ONE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         1
     *        </mn>
     *       </math> for integer texture components, otherwise
     *       <math overflow="scroll">
     *        <mn>
     *         1.0
     *        </mn>
     *       </math>. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         g
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         b
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         a
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glTexParameterIiv</code> or <code class="function">glTexParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glTexParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glTexParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Suppose that a program attempts to sample from a texture and has set <code class="constant">GL_TEXTURE_MIN_FILTER</code> to one of the functions that requires a mipmap. If either the dimensions of the texture images currently defined (with previous calls to {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}) do not follow the proper sequence for mipmaps (described above), or there are fewer texture images defined than are needed, or the set of texture images have differing numbers of texture components, then the texture is considered <span class="emphasis"><em>incomplete</em></span>.</p>
     *   <p>Linear filtering accesses the four nearest texture elements only in 2D textures. In 3D textures, linear filtering accesses the eight nearest texture elements.</p>
     *   <p><code class="function">glTexParameter</code> specifies the texture parameters for the texture object bound to the active texture unit, specified by calling {@link GLES20#glActiveTexture(int) glActiveTexture}.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not one of the accepted defined values.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and <em class="parameter"><code>pname</code></em> is any of the sampler states.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and pname <code class="constant">GL_TEXTURE_BASE_LEVEL</code> is set to a value other than zero.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>pname</code></em> is <code class="constant">GL_TEXTURE_BASE_LEVEL</code> or <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, and <em class="parameter"><code>param</code></em> or <em class="parameter"><code>params</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glTexParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetTexParameterfv(int, int, float[], int) glGetTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glActiveTexture(int) glActiveTexture}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}, {@link GLES20#glCopyTexSubImage2D(int, int, int, int, int, int, int, int) glCopyTexSubImage2D}, {@link GLES30#glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int) glCopyTexSubImage3D}, {@link GLES20#glPixelStorei(int, int) glPixelStorei}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, {@link GLES20#glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage2D}, {@link GLES30#glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage3D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexParameterIiv(int target, int pname, java.nio.IntBuffer params);

    /**
     * glTexParameterIuiv
     * <div class="refentry" id="glTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexParameter — set texture parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterf</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteri</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target texture, which must be either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, or <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued texture parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>.</p>
     *      <p>For the vector commands (<code class="function">glTexParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands, specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture, either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, or <code class="constant">GL_TEXTURE_3D</code>. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the mode used to read from depth-stencil format textures. <em class="parameter"><code>params</code></em> must be one of <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_STENCIL_INDEX</code>. If the depth stencil mode is <code class="constant">GL_DEPTH_COMPONENT</code>, then reads from depth-stencil format textures will return the depth component of the texel in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the stencil component will be discarded. If the depth stencil mode is <code class="constant">GL_STENCIL_INDEX</code> then the stencil component is returned in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the depth component is discarded. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the lowest defined mipmap level. This is an integer value. The initial value is 0.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the depth texture value sampled from the currently bound depth texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to the red channel.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound depth textures. That is, a texture whose internal format is <code class="constant">GL_DEPTH_COMPONENT_*</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound depth texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound depth texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be minified. There are six defined minifying functions. Two of them use either the nearest texture elements or a weighted average of multiple texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates ) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the texture elements that are closest to the specified texture coordinates) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or multiple texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be magified. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the index of the highest defined mipmap level. This is an integer value. The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> are <code class="constant">GL_RED</code>, <code class="constant">GL_GREEN</code>, <code class="constant">GL_BLUE</code>, <code class="constant">GL_ALPHA</code>, <code class="constant">GL_ZERO</code> and <code class="constant">GL_ONE</code>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_RED</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the first channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_GREEN</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the second channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_BLUE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the third channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ALPHA</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the fourth channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ZERO</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         0
     *        </mn>
     *       </math>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ONE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         1
     *        </mn>
     *       </math> for integer texture components, otherwise
     *       <math overflow="scroll">
     *        <mn>
     *         1.0
     *        </mn>
     *       </math>. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         g
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         b
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         a
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glTexParameterIiv</code> or <code class="function">glTexParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glTexParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glTexParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Suppose that a program attempts to sample from a texture and has set <code class="constant">GL_TEXTURE_MIN_FILTER</code> to one of the functions that requires a mipmap. If either the dimensions of the texture images currently defined (with previous calls to {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}) do not follow the proper sequence for mipmaps (described above), or there are fewer texture images defined than are needed, or the set of texture images have differing numbers of texture components, then the texture is considered <span class="emphasis"><em>incomplete</em></span>.</p>
     *   <p>Linear filtering accesses the four nearest texture elements only in 2D textures. In 3D textures, linear filtering accesses the eight nearest texture elements.</p>
     *   <p><code class="function">glTexParameter</code> specifies the texture parameters for the texture object bound to the active texture unit, specified by calling {@link GLES20#glActiveTexture(int) glActiveTexture}.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not one of the accepted defined values.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and <em class="parameter"><code>pname</code></em> is any of the sampler states.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and pname <code class="constant">GL_TEXTURE_BASE_LEVEL</code> is set to a value other than zero.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>pname</code></em> is <code class="constant">GL_TEXTURE_BASE_LEVEL</code> or <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, and <em class="parameter"><code>param</code></em> or <em class="parameter"><code>params</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glTexParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetTexParameterfv(int, int, float[], int) glGetTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glActiveTexture(int) glActiveTexture}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}, {@link GLES20#glCopyTexSubImage2D(int, int, int, int, int, int, int, int) glCopyTexSubImage2D}, {@link GLES30#glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int) glCopyTexSubImage3D}, {@link GLES20#glPixelStorei(int, int) glPixelStorei}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, {@link GLES20#glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage2D}, {@link GLES30#glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage3D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexParameterIuiv(int target, int pname, int[] params, int offset);

    /**
     * glTexParameterIuiv
     * <div class="refentry" id="glTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexParameter — set texture parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterf</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteri</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target texture, which must be either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, or <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued texture parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>.</p>
     *      <p>For the vector commands (<code class="function">glTexParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands, specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture, either <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, or <code class="constant">GL_TEXTURE_3D</code>. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the mode used to read from depth-stencil format textures. <em class="parameter"><code>params</code></em> must be one of <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_STENCIL_INDEX</code>. If the depth stencil mode is <code class="constant">GL_DEPTH_COMPONENT</code>, then reads from depth-stencil format textures will return the depth component of the texel in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the stencil component will be discarded. If the depth stencil mode is <code class="constant">GL_STENCIL_INDEX</code> then the stencil component is returned in
     *       <math overflow="scroll">
     *        <msub>
     *         <mi>
     *          R
     *         </mi>
     *         <mi>
     *          t
     *         </mi>
     *        </msub>
     *       </math> and the depth component is discarded. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the index of the lowest defined mipmap level. This is an integer value. The initial value is 0.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the depth texture value sampled from the currently bound depth texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to the red channel.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound depth textures. That is, a texture whose internal format is <code class="constant">GL_DEPTH_COMPONENT_*</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound depth texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound depth texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be minified. There are six defined minifying functions. Two of them use either the nearest texture elements or a weighted average of multiple texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the specified texture coordinates) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element closest to the specified texture coordinates ) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the texture elements that are closest to the specified texture coordinates) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or multiple texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used whenever the level-of-detail function used when sampling from the texture determines that the texture should be magified. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the specified texture coordinates.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the texture elements that are closest to the specified texture coordinates. These can include items wrapped or repeated from other parts of a texture, depending on the values of <code class="constant">GL_TEXTURE_WRAP_S</code> and <code class="constant">GL_TEXTURE_WRAP_T</code>, and on the exact mapping.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the index of the highest defined mipmap level. This is an integer value. The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> are <code class="constant">GL_RED</code>, <code class="constant">GL_GREEN</code>, <code class="constant">GL_BLUE</code>, <code class="constant">GL_ALPHA</code>, <code class="constant">GL_ZERO</code> and <code class="constant">GL_ONE</code>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_RED</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the first channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_GREEN</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the second channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_BLUE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the third channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ALPHA</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be taken from the fourth channel of the fetched texel. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ZERO</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         0
     *        </mn>
     *       </math>. If <code class="constant">GL_TEXTURE_SWIZZLE_R</code> is <code class="constant">GL_ONE</code>, the value for
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> will be subtituted with
     *       <math overflow="scroll">
     *        <mn>
     *         1
     *        </mn>
     *       </math> for integer texture components, otherwise
     *       <math overflow="scroll">
     *        <mn>
     *         1.0
     *        </mn>
     *       </math>. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         g
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         b
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the swizzle that will be applied to the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         a
     *        </mi>
     *       </math> component of a texel before it is returned to the shader. Valid values for <em class="parameter"><code>param</code></em> and their effects are similar to those of <code class="constant">GL_TEXTURE_SWIZZLE_R</code>. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glTexParameterIiv</code> or <code class="function">glTexParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glTexParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glTexParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>Suppose that a program attempts to sample from a texture and has set <code class="constant">GL_TEXTURE_MIN_FILTER</code> to one of the functions that requires a mipmap. If either the dimensions of the texture images currently defined (with previous calls to {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}) do not follow the proper sequence for mipmaps (described above), or there are fewer texture images defined than are needed, or the set of texture images have differing numbers of texture components, then the texture is considered <span class="emphasis"><em>incomplete</em></span>.</p>
     *   <p>Linear filtering accesses the four nearest texture elements only in 2D textures. In 3D textures, linear filtering accesses the eight nearest texture elements.</p>
     *   <p><code class="function">glTexParameter</code> specifies the texture parameters for the texture object bound to the active texture unit, specified by calling {@link GLES20#glActiveTexture(int) glActiveTexture}.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not one of the accepted defined values.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and <em class="parameter"><code>pname</code></em> is any of the sampler states.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the target is <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code> or <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, and pname <code class="constant">GL_TEXTURE_BASE_LEVEL</code> is set to a value other than zero.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>pname</code></em> is <code class="constant">GL_TEXTURE_BASE_LEVEL</code> or <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, and <em class="parameter"><code>param</code></em> or <em class="parameter"><code>params</code></em> is negative.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glTexParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetTexParameterfv(int, int, float[], int) glGetTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glActiveTexture(int) glActiveTexture}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D}, {@link GLES20#glCopyTexSubImage2D(int, int, int, int, int, int, int, int) glCopyTexSubImage2D}, {@link GLES30#glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int) glCopyTexSubImage3D}, {@link GLES20#glPixelStorei(int, int) glPixelStorei}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, {@link GLES20#glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage2D}, {@link GLES30#glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexSubImage3D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexParameterIuiv(int target, int pname, java.nio.IntBuffer params);

    /**
     * glGetTexParameterIiv
     * <div class="refentry" id="glGetTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetTexParameter — return texture parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, and <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a texture parameter. <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the texture parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetTexParameter</code> returns in <em class="parameter"><code>params</code></em> the value or values of the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, and <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, specify two- or three-dimensional, two-dimensional array, cube-mapped, cube-mapped array, two-dimensional multisample or two-dimensional multisample array texturing, respectively. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES20#glTexParameterf(int, int, float) glTexParameter}, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-value depth stencil texture mode, a symbolic constant. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued image format compatibility matching criteria. This can be one of <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS</code> or <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued base texture mipmap level. The initial value is 0.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-value boolean representing the immutability of the texture format and size. initial value is <code class="constant">GL_FALSE</code>. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued number of texture levels in an immutable texture. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued maximum texture mipmap array level. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the red component swizzle. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the green component swizzle. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the blue component swizzle. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the alpha component swizzle. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glTexParameterf(int, int, float) glTexParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetTexParameterIiv(int target, int pname, int[] params, int offset);

    /**
     * glGetTexParameterIiv
     * <div class="refentry" id="glGetTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetTexParameter — return texture parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, and <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a texture parameter. <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the texture parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetTexParameter</code> returns in <em class="parameter"><code>params</code></em> the value or values of the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, and <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, specify two- or three-dimensional, two-dimensional array, cube-mapped, cube-mapped array, two-dimensional multisample or two-dimensional multisample array texturing, respectively. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES20#glTexParameterf(int, int, float) glTexParameter}, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-value depth stencil texture mode, a symbolic constant. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued image format compatibility matching criteria. This can be one of <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS</code> or <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued base texture mipmap level. The initial value is 0.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-value boolean representing the immutability of the texture format and size. initial value is <code class="constant">GL_FALSE</code>. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued number of texture levels in an immutable texture. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued maximum texture mipmap array level. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the red component swizzle. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the green component swizzle. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the blue component swizzle. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the alpha component swizzle. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glTexParameterf(int, int, float) glTexParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetTexParameterIiv(int target, int pname, java.nio.IntBuffer params);

    /**
     * glGetTexParameterIuiv
     * <div class="refentry" id="glGetTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetTexParameter — return texture parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, and <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a texture parameter. <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the texture parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetTexParameter</code> returns in <em class="parameter"><code>params</code></em> the value or values of the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, and <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, specify two- or three-dimensional, two-dimensional array, cube-mapped, cube-mapped array, two-dimensional multisample or two-dimensional multisample array texturing, respectively. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES20#glTexParameterf(int, int, float) glTexParameter}, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-value depth stencil texture mode, a symbolic constant. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued image format compatibility matching criteria. This can be one of <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS</code> or <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued base texture mipmap level. The initial value is 0.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-value boolean representing the immutability of the texture format and size. initial value is <code class="constant">GL_FALSE</code>. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued number of texture levels in an immutable texture. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued maximum texture mipmap array level. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the red component swizzle. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the green component swizzle. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the blue component swizzle. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the alpha component swizzle. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glTexParameterf(int, int, float) glTexParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetTexParameterIuiv(int target, int pname, int[] params, int offset);

    /**
     * glGetTexParameterIuiv
     * <div class="refentry" id="glGetTexParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetTexParameter — return texture parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterfv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameteriv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetTexParameterIuiv</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, and <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a texture parameter. <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code>, <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code>, <code class="constant">GL_TEXTURE_BASE_LEVEL</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code>, <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MAX_LEVEL</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_SWIZZLE_R</code>, <code class="constant">GL_TEXTURE_SWIZZLE_G</code>, <code class="constant">GL_TEXTURE_SWIZZLE_B</code>, <code class="constant">GL_TEXTURE_SWIZZLE_A</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the texture parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetTexParameter</code> returns in <em class="parameter"><code>params</code></em> the value or values of the texture parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>target</code></em> defines the target texture. <code class="constant">GL_TEXTURE_2D</code>, <code class="constant">GL_TEXTURE_3D</code>, <code class="constant">GL_TEXTURE_2D_ARRAY</code>, <code class="constant">GL_TEXTURE_CUBE_MAP</code>, <code class="constant">GL_TEXTURE_CUBE_MAP_ARRAY</code>, <code class="constant">GL_TEXTURE_2D_MULTISAMPLE</code>, and <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>, specify two- or three-dimensional, two-dimensional array, cube-mapped, cube-mapped array, two-dimensional multisample or two-dimensional multisample array texturing, respectively. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES20#glTexParameterf(int, int, float) glTexParameter}, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_DEPTH_STENCIL_TEXTURE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-value depth stencil texture mode, a symbolic constant. The initial value is <code class="constant">GL_DEPTH_COMPONENT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_TYPE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued image format compatibility matching criteria. This can be one of <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS</code> or <code class="constant">GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BASE_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued base texture mipmap level. The initial value is 0.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES20#glTexParameterf(int, int, float) glTexParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-value boolean representing the immutability of the texture format and size. initial value is <code class="constant">GL_FALSE</code>. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued number of texture levels in an immutable texture. See {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LEVEL</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued maximum texture mipmap array level. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the red component swizzle. The initial value is <code class="constant">GL_RED</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_G</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the green component swizzle. The initial value is <code class="constant">GL_GREEN</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_B</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the blue component swizzle. The initial value is <code class="constant">GL_BLUE</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_SWIZZLE_A</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the alpha component swizzle. The initial value is <code class="constant">GL_ALPHA</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> or <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetTexParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetTexParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glTexParameterf(int, int, float) glTexParameter}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc. Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see <a class="link" href="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt" target="_top">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetTexParameterIuiv(int target, int pname, java.nio.IntBuffer params);

    /**
     * glSamplerParameterIiv
     * <div class="refentry" id="glSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glSamplerParameter — set sampler parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterf</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteri</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the sampler object whose parameter to modify.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued sampler parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>.</p>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the scalar commands, specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glSamplerParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> specifies the sampler object to be modified, and must be the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or four texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound textures. That is, a texture whose base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the texture value sampled from the currently bound texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          R
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glSamplerParameterIiv</code> or <code class="function">glSamplerParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glSamplerParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glSamplerParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If a sampler object is bound to a texture unit and that unit is used to sample from a texture, the parameters in the sampler are used to sample from the texture, rather than the equivalent parameters in the texture object bound to that unit. This introduces the possibility of sampling from the same texture object with different sets of sampler state, which may lead to a condition where a texture is <span class="emphasis"><em>incomplete</em></span> with respect to one sampler object and not with respect to another. Thus, completeness can be considered a function of a sampler object and a texture object bound to a single texture unit, rather than a property of the texture object itself.</p>
     *   <p>The results of a texture lookup are undefined if:</p>
     *   <div class="itemizedlist">
     *    <ul class="itemizedlist" style="list-style-type: disc; ">
     *     <li class="listitem"><p>The sampler used in a texture lookup function is not one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is not <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, and the texture object's base internal format is not <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>.</p></li>
     *    </ul>
     *   </div>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glSamplerParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES30#glGetSamplerParameteriv(int, int, int[], int) glGetSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glBindSampler(int, int) glBindSampler}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glIsSampler(int) glIsSampler}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glTexParameterf(int, int, float) glTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glSamplerParameterIiv(int sampler, int pname, int[] param, int offset);

    /**
     * glSamplerParameterIiv
     * <div class="refentry" id="glSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glSamplerParameter — set sampler parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterf</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteri</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the sampler object whose parameter to modify.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued sampler parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>.</p>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the scalar commands, specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glSamplerParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> specifies the sampler object to be modified, and must be the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or four texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound textures. That is, a texture whose base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the texture value sampled from the currently bound texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          R
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glSamplerParameterIiv</code> or <code class="function">glSamplerParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glSamplerParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glSamplerParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If a sampler object is bound to a texture unit and that unit is used to sample from a texture, the parameters in the sampler are used to sample from the texture, rather than the equivalent parameters in the texture object bound to that unit. This introduces the possibility of sampling from the same texture object with different sets of sampler state, which may lead to a condition where a texture is <span class="emphasis"><em>incomplete</em></span> with respect to one sampler object and not with respect to another. Thus, completeness can be considered a function of a sampler object and a texture object bound to a single texture unit, rather than a property of the texture object itself.</p>
     *   <p>The results of a texture lookup are undefined if:</p>
     *   <div class="itemizedlist">
     *    <ul class="itemizedlist" style="list-style-type: disc; ">
     *     <li class="listitem"><p>The sampler used in a texture lookup function is not one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is not <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, and the texture object's base internal format is not <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>.</p></li>
     *    </ul>
     *   </div>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glSamplerParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES30#glGetSamplerParameteriv(int, int, int[], int) glGetSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glBindSampler(int, int) glBindSampler}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glIsSampler(int) glIsSampler}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glTexParameterf(int, int, float) glTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glSamplerParameterIiv(int sampler, int pname, java.nio.IntBuffer param);

    /**
     * glSamplerParameterIuiv
     * <div class="refentry" id="glSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glSamplerParameter — set sampler parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterf</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteri</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the sampler object whose parameter to modify.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued sampler parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>.</p>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the scalar commands, specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glSamplerParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> specifies the sampler object to be modified, and must be the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or four texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound textures. That is, a texture whose base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the texture value sampled from the currently bound texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          R
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glSamplerParameterIiv</code> or <code class="function">glSamplerParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glSamplerParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glSamplerParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If a sampler object is bound to a texture unit and that unit is used to sample from a texture, the parameters in the sampler are used to sample from the texture, rather than the equivalent parameters in the texture object bound to that unit. This introduces the possibility of sampling from the same texture object with different sets of sampler state, which may lead to a condition where a texture is <span class="emphasis"><em>incomplete</em></span> with respect to one sampler object and not with respect to another. Thus, completeness can be considered a function of a sampler object and a texture object bound to a single texture unit, rather than a property of the texture object itself.</p>
     *   <p>The results of a texture lookup are undefined if:</p>
     *   <div class="itemizedlist">
     *    <ul class="itemizedlist" style="list-style-type: disc; ">
     *     <li class="listitem"><p>The sampler used in a texture lookup function is not one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is not <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, and the texture object's base internal format is not <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>.</p></li>
     *    </ul>
     *   </div>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glSamplerParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES30#glGetSamplerParameteriv(int, int, int[], int) glGetSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glBindSampler(int, int) glBindSampler}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glIsSampler(int) glIsSampler}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glTexParameterf(int, int, float) glTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glSamplerParameterIuiv(int sampler, int pname, int[] param, int offset);

    /**
     * glSamplerParameterIuiv
     * <div class="refentry" id="glSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glSamplerParameter — set sampler parameters</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterf</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteri</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint <var class="pdparam">param</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>const GLuint *<var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the sampler object whose parameter to modify.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a single-valued sampler parameter. <em class="parameter"><code>pname</code></em> can be one of the following: <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>.</p>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), <em class="parameter"><code>pname</code></em> can also be <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>param</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the scalar commands, specifies the value of <em class="parameter"><code>pname</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>For the vector commands (<code class="function">glSamplerParameter*v</code>), specifies a pointer to an array where the value or values of <em class="parameter"><code>pname</code></em> are stored.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glSamplerParameter</code> assigns the value or values in <em class="parameter"><code>params</code></em> to the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> specifies the sampler object to be modified, and must be the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. The following symbols are accepted in <em class="parameter"><code>pname</code></em>:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps.</p>
     *      <p>A mipmap is an ordered set of arrays representing the same image at progressively lower resolutions. If the texture has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>, there are
     *       <math overflow="scroll"><mrow>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           max
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            n
     *           </mi>
     *           <mi mathvariant="italic">
     *            m
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *         <mo>
     *          +
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmaps. The first mipmap is the original texture, with dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math>. Each subsequent mipmap has dimensions
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           k
     *          </mi>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mi mathvariant="italic">
     *           l
     *          </mi>
     *         </msup>
     *        </mrow>
     *       </math> are the dimensions of the previous mipmap, until either
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          k
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          l
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mn>
     *          0
     *         </mn>
     *        </mrow>
     *       </math>. At that point, subsequent mipmaps have dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             l
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *        </mrow>
     *       </math> or
     *       <math overflow="scroll"><mrow>
     *         <msup>
     *          <mn>
     *           2
     *          </mn>
     *          <mfenced open close="">
     *           <mrow>
     *            <mi mathvariant="italic">
     *             k
     *            </mi>
     *            <mo>
     *             -
     *            </mo>
     *            <mn>
     *             1
     *            </mn>
     *           </mrow>
     *          </mfenced>
     *         </msup>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> until the final mipmap, which has dimension
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math>. To define the mipmaps, call {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}, {@link GLES30#glTexStorage2D(int, int, int, int, int) glTexStorage2D}, {@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, or {@link GLES20#glCopyTexImage2D(int, int, int, int, int, int, int, int) glCopyTexImage2D} with the <span class="emphasis"><em>level</em></span> argument indicating the order of the mipmaps. Level 0 is the original texture; level
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          max
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           n
     *          </mi>
     *          <mi mathvariant="italic">
     *           m
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> is the final
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          ×
     *         </mo>
     *         <mn>
     *          1
     *         </mn>
     *        </mrow>
     *       </math> mipmap.</p>
     *      <p><em class="parameter"><code>params</code></em> supplies a function for minifying the texture as one of the following:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the mipmap that most closely matches the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_NEAREST</code> criterion (the texture element nearest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR_MIPMAP_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the <code class="constant">GL_LINEAR</code> criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *      <p>As more texture elements are sampled in the minification process, fewer aliasing artifacts will be apparent. While the <code class="constant">GL_NEAREST</code> and <code class="constant">GL_LINEAR</code> minification functions can be faster than the other four, they sample only one or four texture elements to determine the texture value of the pixel being rendered and can produce moire patterns or ragged transitions. The initial value of <code class="constant">GL_TEXTURE_MIN_FILTER</code> is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either <code class="constant">GL_NEAREST</code> or <code class="constant">GL_LINEAR</code> (see below). <code class="constant">GL_NEAREST</code> is generally faster than <code class="constant">GL_LINEAR</code>, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. The initial value of <code class="constant">GL_TEXTURE_MAG_FILTER</code> is <code class="constant">GL_LINEAR</code>.</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_NEAREST</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_LINEAR</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the minimum level-of-detail parameter. This floating-point value limits the selection of highest resolution mipmap (lowest mipmap level). The initial value is -1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the maximum level-of-detail parameter. This floating-point value limits the selection of the lowest resolution mipmap (highest mipmap level). The initial value is 1000.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_EDGE</code> causes
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates to be clamped to the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mfenced open close="">
     *          <mrow>
     *           <mfrac>
     *            <mn>
     *             1
     *            </mn>
     *            <mrow>
     *             <mn>
     *              2
     *             </mn>
     *             <mi mathvariant="italic">
     *              N
     *             </mi>
     *            </mrow>
     *           </mfrac>
     *          </mrow>
     *         </mfenced>
     *         <mrow>
     *          <mn>
     *           1
     *          </mn>
     *          <mo>
     *           -
     *          </mo>
     *          <mfenced open close="">
     *           <mrow>
     *            <mfrac>
     *             <mn>
     *              1
     *             </mn>
     *             <mrow>
     *              <mn>
     *               2
     *              </mn>
     *              <mi mathvariant="italic">
     *               N
     *              </mi>
     *             </mrow>
     *            </mfrac>
     *           </mrow>
     *          </mfenced>
     *         </mrow>
     *        </mfenced>
     *       </math>, where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         N
     *        </mi>
     *       </math> is the size of the texture in the direction of clamping.</p>
     *      <p><code class="constant">GL_REPEAT</code> causes the integer part of the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be ignored; the GL uses only the fractional part, thereby creating a repeating pattern.</p>
     *      <p><code class="constant">GL_MIRRORED_REPEAT</code> causes the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinate to be set to the fractional part of the texture coordinate if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is even; if the integer part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> is odd, then the
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> texture coordinate is set to
     *       <math overflow="scroll"><mrow>
     *         <mn>
     *          1
     *         </mn>
     *         <mo>
     *          -
     *         </mo>
     *         <mrow>
     *          <mi mathvariant="italic">
     *           frac
     *          </mi>
     *          <mo>
     *           ⁡
     *          </mo>
     *          <mfenced open="(" close=")">
     *           <mi mathvariant="italic">
     *            s
     *           </mi>
     *          </mfenced>
     *         </mrow>
     *        </mrow>
     *       </math>, where
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          frac
     *         </mi>
     *         <mo>
     *          ⁡
     *         </mo>
     *         <mfenced open="(" close=")">
     *          <mi mathvariant="italic">
     *           s
     *          </mi>
     *         </mfenced>
     *        </mrow>
     *       </math> represents the fractional part of
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>.</p>
     *      <p><code class="constant">GL_CLAMP_TO_BORDER</code> evaluates
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math> coordinates in a similar manner to <code class="constant">GL_CLAMP_TO_EDGE</code>. However, in cases where clamping would have occurred in <code class="constant">GL_CLAMP_TO_EDGE</code> mode, the fetched texel data is substituted with the values specified by <code class="constant">GL_TEXTURE_BORDER_COLOR</code>.</p>
     *      <p>Initially, <code class="constant">GL_TEXTURE_WRAP_S</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *   <p></p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_T</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Sets the wrap parameter for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> to either <code class="constant">GL_CLAMP_TO_EDGE</code>, <code class="constant">GL_MIRRORED_REPEAT</code>, <code class="constant">GL_REPEAT</code>, or <code class="constant">GL_CLAMP_TO_BORDER</code>. See the discussion under <code class="constant">GL_TEXTURE_WRAP_S</code>. Initially, <code class="constant">GL_TEXTURE_WRAP_R</code> is set to <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the texture comparison mode for currently bound textures. That is, a texture whose base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>; see {@link GLES20#glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage2D}) Permissible values are:</p>
     *      <div class="variablelist">
     *       <dl class="variablelist">
     *        <dt><span class="term"> <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the interpolated and clamped
     *          <math overflow="scroll">
     *           <mi mathvariant="italic">
     *            r
     *           </mi>
     *          </math> texture coordinate should be compared to the value in the currently bound texture. See the discussion of <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> for details of how the comparison is evaluated. The result of the comparison is assigned to the red channel.</p>
     *        </dd>
     *        <dt><span class="term"> <code class="constant">GL_NONE</code> </span>
     *        </dt>
     *        <dd>
     *         <p>Specifies that the red channel should be assigned the appropriate value from the currently bound texture.</p>
     *        </dd>
     *       </dl>
     *      </div>
     *      <p></p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the comparison operator used when <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is set to <code class="constant">GL_COMPARE_REF_TO_TEXTURE</code>. Permissible values are:</p>
     *      <div class="informaltable">
     *       <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *        <colgroup>
     *         <col style="text-align: left; ">
     *         <col style="text-align: left; ">
     *        </colgroup>
     *        <thead>
     *         <tr>
     *          <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong> Texture Comparison Function </strong></span></th>
     *          <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong> Computed result </strong></span></th>
     *         </tr>
     *        </thead>
     *        <tbody>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_LESS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_GREATER</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &gt;
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    &lt;=
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_EQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_NOTEQUAL</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mfenced open="{" close="">
     *              <mrow>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   1.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mn>
     *                   0.0
     *                  </mn>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *               <mo>
     *                ⁢&nbsp;&nbsp;
     *               </mo>
     *               <mtable>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    ≠
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *                <mtr>
     *                 <mtd>
     *                  <mrow>
     *                   <mi mathvariant="italic">
     *                    r
     *                   </mi>
     *                   <mo>
     *                    =
     *                   </mo>
     *                   <mfenced open close="">
     *                    <msub>
     *                     <mi mathvariant="italic">
     *                      D
     *                     </mi>
     *                     <mi mathvariant="italic">
     *                      t
     *                     </mi>
     *                    </msub>
     *                   </mfenced>
     *                  </mrow>
     *                 </mtd>
     *                </mtr>
     *               </mtable>
     *              </mrow>
     *             </mfenced>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_ALWAYS</code></td>
     *          <td style="text-align: left; border-bottom: 2px solid ; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              1.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *         <tr>
     *          <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_NEVER</code></td>
     *          <td style="text-align: left; ">
     *           <math overflow="scroll"><mrow>
     *             <mi mathvariant="italic">
     *              result
     *             </mi>
     *             <mo>
     *              =
     *             </mo>
     *             <mi>
     *              0.0
     *             </mi>
     *            </mrow>
     *           </math></td>
     *         </tr>
     *        </tbody>
     *       </table>
     *      </div>
     *      <p>where
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math> is the current interpolated texture coordinate, and
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          D
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math> is the texture value sampled from the currently bound texture.
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         result
     *        </mi>
     *       </math> is assigned to
     *       <math overflow="scroll"><msub>
     *         <mi mathvariant="italic">
     *          R
     *         </mi>
     *         <mi mathvariant="italic">
     *          t
     *         </mi>
     *        </msub>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>The data in <em class="parameter"><code>params</code></em> specifies four values that define the border values that should be used for border texels. If a texel is sampled from the border of the texture, the values of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are interpreted as an RGBA color to match the texture's internal format and substituted for the non-existent texel data. If the texture contains depth components, the first component of <code class="constant">GL_TEXTURE_BORDER_COLOR</code> is interpreted as a depth value. The initial value is
     *       <math overflow="scroll"><mrow>
     *         <mfenced open="(" close=")">
     *          <mrow>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *           <mo>
     *            ,
     *           </mo>
     *           <mn>
     *            0.0
     *           </mn>
     *          </mrow>
     *         </mfenced>
     *        </mrow>
     *       </math>.</p>
     *      <p>If the values for <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are specified with <code class="function">glSamplerParameterIiv</code> or <code class="function">glSamplerParameterIuiv</code>, the values are stored unmodified with an internal data type of integer. If specified with <code class="function">glSamplerParameteriv</code>, they are converted to floating point with the following equation:
     *       <math overflow="scroll"><mrow>
     *         <mi mathvariant="italic">
     *          f
     *         </mi>
     *         <mo>
     *          =
     *         </mo>
     *         <mfrac>
     *          <mrow>
     *           <mn>
     *            2
     *           </mn>
     *           <mi mathvariant="italic">
     *            c
     *           </mi>
     *           <mo>
     *            +
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *          <mrow>
     *           <msup>
     *            <mn>
     *             2
     *            </mn>
     *            <mi mathvariant="italic">
     *             b
     *            </mi>
     *           </msup>
     *           <mo>
     *            -
     *           </mo>
     *           <mn>
     *            1
     *           </mn>
     *          </mrow>
     *         </mfrac>
     *        </mrow>
     *       </math>. If specified with <code class="function">glSamplerParameterfv</code>, they are stored unmodified as floating-point values.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If a sampler object is bound to a texture unit and that unit is used to sample from a texture, the parameters in the sampler are used to sample from the texture, rather than the equivalent parameters in the texture object bound to that unit. This introduces the possibility of sampling from the same texture object with different sets of sampler state, which may lead to a condition where a texture is <span class="emphasis"><em>incomplete</em></span> with respect to one sampler object and not with respect to another. Thus, completeness can be considered a function of a sampler object and a texture object bound to a single texture unit, rather than a property of the texture object itself.</p>
     *   <p>The results of a texture lookup are undefined if:</p>
     *   <div class="itemizedlist">
     *    <ul class="itemizedlist" style="list-style-type: disc; ">
     *     <li class="listitem"><p>The sampler used in a texture lookup function is not one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is not <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, the texture object's base internal format is <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>, and the <code class="constant">GL_TEXTURE_COMPARE_MODE</code> is <code class="constant">GL_NONE</code>.</p></li>
     *     <li class="listitem"><p>The sampler used in a texture lookup function is one of the shadow sampler types, and the texture object's base internal format is not <code class="constant">GL_DEPTH_COMPONENT</code> or <code class="constant">GL_DEPTH_STENCIL</code>.</p></li>
     *    </ul>
     *   </div>
     *   <p></p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object previously returned from a call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>params</code></em> should have a defined constant value (based on the value of <em class="parameter"><code>pname</code></em>) and does not.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <code class="function">glSamplerParameter{if}</code> is called for a non-scalar parameter (pname <code class="constant">GL_TEXTURE_BORDER_COLOR</code>).</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES30#glGetSamplerParameteriv(int, int, int[], int) glGetSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterf</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteri</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glBindSampler(int, int) glBindSampler}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glIsSampler(int) glIsSampler}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glTexParameterf(int, int, float) glTexParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glSamplerParameterIuiv(int sampler, int pname, java.nio.IntBuffer param);

    /**
     * glGetSamplerParameterIiv
     * <div class="refentry" id="glGetSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetSamplerParameter — return sampler parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies name of the sampler object from which to retrieve parameters.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a sampler parameter. <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the sampler parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetSamplerParameter</code>* returns in <em class="parameter"><code>params</code></em> the value or values of the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> defines the target sampler, and must be the name of an existing sampler object, returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}*, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetSamplerParameterIiv(int sampler, int pname, int[] params, int offset);

    /**
     * glGetSamplerParameterIiv
     * <div class="refentry" id="glGetSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetSamplerParameter — return sampler parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies name of the sampler object from which to retrieve parameters.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a sampler parameter. <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the sampler parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetSamplerParameter</code>* returns in <em class="parameter"><code>params</code></em> the value or values of the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> defines the target sampler, and must be the name of an existing sampler object, returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}*, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetSamplerParameterIiv(int sampler, int pname, java.nio.IntBuffer params);

    /**
     * glGetSamplerParameterIuiv
     * <div class="refentry" id="glGetSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetSamplerParameter — return sampler parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies name of the sampler object from which to retrieve parameters.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a sampler parameter. <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the sampler parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetSamplerParameter</code>* returns in <em class="parameter"><code>params</code></em> the value or values of the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> defines the target sampler, and must be the name of an existing sampler object, returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}*, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetSamplerParameterIuiv(int sampler, int pname, int[] params, int offset);

    /**
     * glGetSamplerParameterIuiv
     * <div class="refentry" id="glGetSamplerParameter">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glGetSamplerParameter — return sampler parameter values</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterfv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLfloat * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameteriv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glGetSamplerParameterIuiv</strong>(</code></td>
     *       <td>GLuint <var class="pdparam">sampler</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">pname</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint * <var class="pdparam">params</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>sampler</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies name of the sampler object from which to retrieve parameters.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>pname</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the symbolic name of a sampler parameter. <code class="constant">GL_TEXTURE_MAG_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_FILTER</code>, <code class="constant">GL_TEXTURE_MIN_LOD</code>, <code class="constant">GL_TEXTURE_MAX_LOD</code>, <code class="constant">GL_TEXTURE_WRAP_S</code>, <code class="constant">GL_TEXTURE_WRAP_T</code>, <code class="constant">GL_TEXTURE_WRAP_R</code>, <code class="constant">GL_TEXTURE_COMPARE_MODE</code>, <code class="constant">GL_TEXTURE_COMPARE_FUNC</code>, and <code class="constant">GL_TEXTURE_BORDER_COLOR</code> are accepted.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>params</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the sampler parameters.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glGetSamplerParameter</code>* returns in <em class="parameter"><code>params</code></em> the value or values of the sampler parameter specified as <em class="parameter"><code>pname</code></em>. <em class="parameter"><code>sampler</code></em> defines the target sampler, and must be the name of an existing sampler object, returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}. <em class="parameter"><code>pname</code></em> accepts the same symbols as {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}*, with the same interpretations:</p>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAG_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture magnification filter, a symbolic constant. The initial value is <code class="constant">GL_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_FILTER</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minification filter, a symbolic constant. The initial value is <code class="constant">GL_NEAREST_MIPMAP_LINEAR</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MIN_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture minimum level-of-detail value. The initial value is
     *       <math overflow="scroll"><mn>
     *         -1000
     *        </mn>
     *       </math>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_MAX_LOD</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued texture maximum level-of-detail value. The initial value is 1000.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_S</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         s
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_T</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         t
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_WRAP_R</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns the single-valued wrapping function for texture coordinate
     *       <math overflow="scroll">
     *        <mi mathvariant="italic">
     *         r
     *        </mi>
     *       </math>, a symbolic constant. The initial value is <code class="constant">GL_REPEAT</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_MODE</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison mode, a symbolic constant. The initial value is <code class="constant">GL_NONE</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_COMPARE_FUNC</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns a single-valued texture comparison function, a symbolic constant. The initial value is <code class="constant">GL_LEQUAL</code>. See {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}.</p>
     *     </dd>
     *     <dt><span class="term"> <code class="constant">GL_TEXTURE_BORDER_COLOR</code> </span>
     *     </dt>
     *     <dd>
     *      <p>Returns four integer or floating-point numbers that comprise the RGBA color of the texture border. Floating-point values are returned in the range
     *       <math overflow="scroll"><mfenced open="[" close="]">
     *         <mn>
     *          0
     *         </mn>
     *         <mn>
     *          1
     *         </mn>
     *        </mfenced>
     *       </math>. Integer values are returned as a linear mapping of the internal floating-point representation such that 1.0 maps to the most positive representable integer and
     *       <math overflow="scroll"><mn>
     *         -1.0
     *        </mn>
     *       </math> maps to the most negative representable integer. The initial value is (0, 0, 0, 0).</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="notes">
     *   <h2>Notes</h2>
     *   <p>If an error is generated, no change is made to the contents of <em class="parameter"><code>params</code></em>.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>sampler</code></em> is not the name of a sampler object returned from a previous call to {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>pname</code></em> is not an accepted value.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>API Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterfv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameteriv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">✔</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="function">glGetSamplerParameterIiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">✔</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glGetSamplerParameterIuiv</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}, {@link GLES30#glGenSamplers(int, int[], int) glGenSamplers}, {@link GLES30#glDeleteSamplers(int, int[], int) glDeleteSamplers}, {@link GLES30#glSamplerParameteri(int, int, int) glSamplerParameter}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glGetSamplerParameterIuiv(int sampler, int pname, java.nio.IntBuffer params);

    /**
     * glTexBuffer
     * <div class="refentry" id="glTexBuffer">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexBuffer — attach a buffer object's data store to a buffer texture object</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexBuffer</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">internalFormat</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">buffer</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target to which the texture is bound for <code class="function">glTexBuffer</code>. Must be <code class="constant">GL_TEXTURE_BUFFER</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>internalFormat</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the internal format of the data in the store belonging to <em class="parameter"><code>buffer</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>buffer</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the name of the buffer object whose storage to attach to the active buffer texture.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexBuffer</code> attaches the data store of a specified buffer object to a specified texture object, and specify the storage format for the texture image found in the buffer object. The texture object must be a buffer texture.</p>
     *   <p>If <em class="parameter"><code>buffer</code></em> is zero, any buffer object attached to the buffer texture is detached and no new buffer object is attached. If <em class="parameter"><code>buffer</code></em> is non-zero, it must be the name of an existing buffer object.</p>
     *   <p><em class="parameter"><code>internalformat</code></em> specifies the storage format, and must be one of the following sized internal formats:</p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; " class="col1">
     *      <col style="text-align: left; " class="col2">
     *      <col style="text-align: left; " class="col3">
     *      <col style="text-align: left; " class="col4">
     *      <col style="text-align: center; " class="col5">
     *      <col style="text-align: center; " class="col6">
     *      <col style="text-align: center; " class="col7">
     *      <col style="text-align: center; " class="col8">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong> Component </strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Sized Internal Format</strong> </span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Base Type</strong> </span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Components</strong> </span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Norm</strong> </span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">1</th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">2</th>
     *       <th style="text-align: center; border-bottom: 2px solid ; ">3</th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">half</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">byte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">half</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">byte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">3</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">3</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">3</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">half</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">byte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_RGBA32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">B</td>
     *       <td style="text-align: center; ">A</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p>When a buffer object is attached to a buffer texture, the buffer object's data store is taken as the texture's texel array. The number of texels in the buffer texture's texel array is given by $$ \left\lfloor { size \over { components \times sizeof(base\_type) } } \right\rfloor $$ where $size$ is the size of the buffer object in basic machine units (the value of <code class="constant">GL_BUFFER_SIZE</code> for <em class="parameter"><code>buffer</code></em>), and $components$ and $base\_type$ are the element count and base data type for elements, as specified in the table above. The number of texels in the texel array is then clamped to the value of the implementation-dependent limit <code class="constant">GL_MAX_TEXTURE_BUFFER_SIZE</code>. When a buffer texture is accessed in a shader, the results of a texel fetch are undefined if the specified texel coordinate is negative, or greater than or equal to the clamped number of texels in the texel array.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated by <code class="function">glTexBuffer</code> if <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_BUFFER</code>.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>internalformat</code></em> is not one of the sized internal formats described above.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>buffer</code></em> is not zero and is not the name of an existing buffer object.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_MAX_TEXTURE_BUFFER_SIZE</code></p>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_TEXTURE_BINDING_BUFFER</code></p>
     *   <p>{@link GLES31#glGetTexLevelParameteriv(int, int, int, int[], int) glGetTexLevelParameter} with argument <code class="constant">GL_TEXTURE_BUFFER_DATA_STORE_BINDING</code></p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexBuffer</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES20#glGenBuffers(int, int[], int) glGenBuffers}, {@link GLES20#glBindBuffer(int, int) glBindBuffer}, {@link GLES20#glBufferData(int, long, java.nio.Buffer, int) glBufferData}, {@link GLES20#glDeleteBuffers(int, int[], int) glDeleteBuffers}, {@link GLES20#glGenTextures(int, int[], int) glGenTextures}, {@link GLES20#glBindTexture(int, int) glBindTexture}, {@link GLES20#glDeleteTextures(int, int[], int) glDeleteTextures}</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexBuffer(int target, int internalformat, int buffer);

    /**
     * glTexBufferRange
     * <div class="refentry" id="glTexBufferRange">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexBufferRange — attach a range of a buffer object's data store to a buffer texture object</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexBufferRange</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">internalFormat</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLuint <var class="pdparam">buffer</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLintptr <var class="pdparam">offset</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizeiptr <var class="pdparam">size</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target to which the texture object is bound for <code class="function">glTexBufferRange</code>. Must be <code class="constant">GL_TEXTURE_BUFFER</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>internalFormat</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the internal format of the data in the store belonging to <em class="parameter"><code>buffer</code></em>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>buffer</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the name of the buffer object whose storage to attach to the active buffer texture.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>offset</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the offset of the start of the range of the buffer's data store to attach.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>size</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the size of the range of the buffer's data store to attach.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexBufferRange</code> attaches a range of the data store of a specified buffer object to a specified texture object, and specify the storage format for the texture image found in the buffer object. The texture object must be a buffer texture.</p>
     *   <p>If <em class="parameter"><code>buffer</code></em> is zero, any buffer object attached to the buffer texture is detached and no new buffer object is attached. If <em class="parameter"><code>buffer</code></em> is non-zero, it must be the name of an existing buffer object.</p>
     *   <p>The start and size of the range are specified by <em class="parameter"><code>offset</code></em> and <em class="parameter"><code>size</code></em> respectively, both measured in basic machine units. <em class="parameter"><code>offset</code></em> must be greater than or equal to zero, <em class="parameter"><code>size</code></em> must be greater than zero, and the sum of <em class="parameter"><code>offset</code></em> and <em class="parameter"><code>size</code></em> must not exceed the value of <code class="constant">GL_BUFFER_SIZE</code> for <em class="parameter"><code>buffer</code></em>. Furthermore, <em class="parameter"><code>offset</code></em> must be an integer multiple of the value of <code class="constant">GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT</code>.</p>
     *   <p><em class="parameter"><code>internalformat</code></em> specifies the storage format, and must be one of the following sized internal formats:</p>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; " class="col1">
     *      <col style="text-align: left; " class="col2">
     *      <col style="text-align: left; " class="col3">
     *      <col style="text-align: left; " class="col4">
     *      <col style="text-align: center; " class="col5">
     *      <col style="text-align: center; " class="col6">
     *      <col style="text-align: center; " class="col7">
     *      <col style="text-align: center; " class="col8">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: left; border-right: 2px solid ; ">&nbsp;</th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong> Component </strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Sized Internal Format</strong> </span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Base Type</strong> </span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Components</strong> </span></th>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"> <strong>Norm</strong> </span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">1</th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">2</th>
     *       <th style="text-align: center; border-bottom: 2px solid ; ">3</th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">half</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">byte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">half</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">byte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">0</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">3</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">3</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">3</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">1</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">YES</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">half</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32F</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">float</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">byte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">short</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32I</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">int</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ubyte</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ushort</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; ">B</td>
     *       <td style="text-align: center; border-bottom: 2px solid ; ">A</td>
     *      </tr>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_RGBA32UI</code></td>
     *       <td style="text-align: left; border-right: 2px solid ; ">uint</td>
     *       <td style="text-align: left; border-right: 2px solid ; ">4</td>
     *       <td style="text-align: left; border-right: 2px solid ; ">NO</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">R</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">G</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">B</td>
     *       <td style="text-align: center; ">A</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *   <p>When a range of a buffer object is attached to a buffer texture, the specified range of the buffer object's data store is taken as the texture's texel array. The number of texels in the buffer texture's texel array is given by $$ \left\lfloor { size \over { components \times sizeof(base\_type) } } \right\rfloor $$ where $components$ and $base\_type$ are the element count and base data type for elements, as specified in the table above. The number of texels in the texel array is then clamped to the value of the implementation-dependent limit <code class="constant">GL_MAX_TEXTURE_BUFFER_SIZE</code>. When a buffer texture is accessed in a shader, the results of a texel fetch are undefined if the specified texel coordinate is negative, or greater than or equal to the clamped number of texels in the texel array.</p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated by <code class="function">glTexBufferRange</code> if <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_BUFFER</code>.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>internalformat</code></em> is not one of the sized internal formats described above.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>buffer</code></em> is not zero and is not the name of an existing buffer object.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>offset</code></em> is negative, if <em class="parameter"><code>size</code></em> is less than or equal to zero, or if <em class="parameter"><code>offset</code></em> + <em class="parameter"><code>size</code></em> is greater than the value of <code class="constant">GL_BUFFER_SIZE</code> for <em class="parameter"><code>buffer</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>offset</code></em> is not an integer multiple of the value of <code class="constant">GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGet} with argument <code class="constant">GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT</code></p>
     *   <p>{@link GLES31#glGetTexLevelParameteriv(int, int, int, int[], int) glGetTexLevelParameter} with arguments <code class="constant">GL_TEXTURE_BUFFER_OFFSET</code> or <code class="constant">GL_TEXTURE_BUFFER_SIZE</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexBufferRange</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES32#glTexBuffer(int, int, int) glTexBuffer}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2012-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexBufferRange(int target, int internalformat, int buffer, int offset, int size);

    /**
     * glTexStorage3DMultisample
     * <div class="refentry" id="glTexStorage3DMultisample">
     *  <div class="titlepage"></div>
     *  <div class="refnamediv">
     *   <h2>Name</h2>
     *   <p>glTexStorage3DMultisample — specify storage for a two-dimensional multisample array texture</p>
     *  </div>
     *  <div class="refsynopsisdiv">
     *   <h2>C Specification</h2>
     *   <div class="funcsynopsis">
     *    <table style="border: 0; cellspacing: 0; cellpadding: 0;" class="funcprototype-table">
     *     <tbody>
     *      <tr>
     *       <td><code class="funcdef">void <strong class="fsfunc">glTexStorage3DMultisample</strong>(</code></td>
     *       <td>GLenum <var class="pdparam">target</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">samples</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLenum <var class="pdparam">internalformat</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">width</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">height</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLsizei <var class="pdparam">depth</var>,</td>
     *      </tr>
     *      <tr>
     *       <td>&nbsp;</td>
     *       <td>GLboolean <var class="pdparam">fixedsamplelocations</var><code>)</code>;</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *    <div class="funcprototype-spacer">
     *     &nbsp;
     *    </div>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="parameters">
     *   <h2>Parameters</h2>
     *   <div class="variablelist">
     *    <dl class="variablelist">
     *     <dt><span class="term"> <em class="parameter"> <code>target</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the target to which the texture object is bound for <code class="function">glTexStorage3DMultisample</code>. Must be <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>samples</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specify the number of samples in the texture.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>internalformat</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the sized internal format to be used to store texture image data.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>width</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the width of the texture, in texels.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>height</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the height of the texture, in texels.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>depth</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies the depth of the texture, in layers.</p>
     *     </dd>
     *     <dt><span class="term"> <em class="parameter"> <code>fixedsamplelocations</code> </em> </span>
     *     </dt>
     *     <dd>
     *      <p>Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.</p>
     *     </dd>
     *    </dl>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="description">
     *   <h2>Description</h2>
     *   <p><code class="function">glTexStorage3DMultisample</code> specifies the storage requirements for a two-dimensional multisample array texture. Once a texture is specified with this command, its format and dimensions become immutable. The contents of the image may still be modified, however, its storage requirements may not change. Such a texture is referred to as an <span class="emphasis"><em>immutable-format</em></span> texture.</p>
     *   <p><em class="parameter"><code>samples</code></em> specifies the number of samples to be used for the texture and must be greater than zero and less than or equal to the value of <code class="constant">GL_MAX_SAMPLES</code>. <em class="parameter"><code>internalformat</code></em> must be a color-renderable, depth-renderable, or stencil-renderable format. <em class="parameter"><code>width</code></em> and <em class="parameter"><code>height</code></em> specify the width and height, respectively, of the texture and <em class="parameter"><code>depth</code></em> specifies the number of layers of the texture. If <em class="parameter"><code>fixedsamplelocations</code></em> is <code class="constant">GL_TRUE</code>, the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.</p>
     *   <p></p>
     *   <div class="table" id="id-1.6.4.1">
     *    <div class="table-title">
     *     Table&nbsp;1.&nbsp;Sized Internal Formats
     *    </div>
     *    <div class="table-contents">
     *     <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *      <colgroup>
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *      </colgroup>
     *      <thead>
     *       <tr>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Sized Internal Format</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Format</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Type</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Red Bits</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Green Bits</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Blue Bits</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Alpha Bits</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Shared Bits</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Color renderable</strong></span></th>
     *        <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong>Texture filterable</strong></span></th>
     *       </tr>
     *      </thead>
     *      <tbody>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8_SNORM</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HALF_FLOAT</code>,<code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R8I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R16I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R32I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RED_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8_SNORM</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HALF_FLOAT</code>,<code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG8I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG16I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG32I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RG_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SRGB8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB565</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT_5_6_5</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">5</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">6</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">5</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB8_SNORM</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_R11F_G11F_B10F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_10F_11F_11F_REV</code>, <code class="constant">GL_HALF_FLOAT</code>, <code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f11</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f11</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB9_E5</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_5_9_9_9_REV</code>, <code class="constant">GL_HALF_FLOAT</code>, <code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">9</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">9</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">9</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">5</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB16F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HALF_FLOAT</code>, <code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB8UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB8I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB16UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB16I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB32I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SRGB8_ALPHA8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8_SNORM</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">s8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB5_A1</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code>, <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">5</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">5</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">5</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">1</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA4</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">4</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB10_A2</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">2</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_HALF_FLOAT</code>, <code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">Y</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA8I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i8</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGB10_A2UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui10</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui2</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">ui16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA16I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_SHORT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i16</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA32I</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">i32</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">Y</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_RGBA32UI</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_RGBA_INTEGER</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_UNSIGNED_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; ">ui32</td>
     *        <td style="text-align: left; border-right: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; border-right: 2px solid ; ">Y</td>
     *        <td style="text-align: left; ">&nbsp;</td>
     *       </tr>
     *      </tbody>
     *     </table>
     *     <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *      <colgroup>
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *       <col style="text-align: left; ">
     *      </colgroup>
     *      <thead>
     *       <tr>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Sized Internal Format</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Format</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Type</strong></span></th>
     *        <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Depth Bits</strong></span></th>
     *        <th style="text-align: left; border-bottom: 2px solid ; "><span class="bold"><strong>Stencil Bits</strong></span></th>
     *       </tr>
     *      </thead>
     *      <tbody>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_COMPONENT16</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_COMPONENT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_SHORT</code>, <code class="constant">GL_UNSIGNED_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">16</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_COMPONENT24</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_COMPONENT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">24</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_COMPONENT32F</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_COMPONENT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">&nbsp;</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH24_STENCIL8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_STENCIL</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_UNSIGNED_INT_24_8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">24</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">8</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH32F_STENCIL8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_DEPTH_STENCIL</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><code class="constant">GL_FLOAT_32_UNSIGNED_INT_24_8_REV</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; ">f32</td>
     *        <td style="text-align: left; border-bottom: 2px solid ; ">8</td>
     *       </tr>
     *       <tr>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_STENCIL_INDEX8</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_STENCIL_INDEX</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; "><code class="constant">GL_UNSIGNED_BYTE</code></td>
     *        <td style="text-align: left; border-right: 2px solid ; ">&nbsp;</td>
     *        <td style="text-align: left; ">8</td>
     *       </tr>
     *      </tbody>
     *     </table>
     *    </div>
     *   </div>
     *   <p><br class="table-break"></p>
     *  </div>
     *  <div class="refsect1" id="errors">
     *   <h2>Errors</h2>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>internalformat</code></em> is not a valid color-renderable, depth-renderable or stencil-renderable format.</p>
     *   <p><code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_2D_MULTISAMPLE_ARRAY</code>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> or <em class="parameter"><code>height</code></em> are less than 1 or greater than the value of <code class="constant">GL_MAX_TEXTURE_SIZE</code>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>depth</code></em> is less than 1 or greater than the value of <code class="constant">GL_MAX_ARRAY_TEXTURE_LAYERS</code>.</p>
     *   <p><code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>samples</code></em> is zero.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>samples</code></em> is greater than the maximum number of samples supported for this <em class="parameter"><code>target</code></em> and <em class="parameter"><code>internalformat</code></em>.</p>
     *   <p><code class="constant">GL_INVALID_OPERATION</code> is generated if the value of <code class="constant">GL_TEXTURE_IMMUTABLE_FORMAT</code> for the texture bound to <em class="parameter"><code>target</code></em> is not <code class="constant">GL_FALSE</code>.</p>
     *  </div>
     *  <div class="refsect1" id="associatedgets">
     *   <h2>Associated Gets</h2>
     *   <p>{@link GLES20#glGetBooleanv(int, boolean[], int) glGetInteger} with arguments <code class="constant">GL_MAX_TEXTURE_SIZE</code>, <code class="constant">GL_MAX_ARRAY_TEXTURE_LEVELS</code>, <code class="constant">GL_MAX_SAMPLES</code>, or <code class="constant">GL_TEXTURE_IMMUTABLE_LEVELS</code>.</p>
     *   <p>{@link GLES30#glGetInternalformativ(int, int, int, int, int[], int) glGetInternalformativ} with arguments <code class="constant">GL_SAMPLES</code>.</p>
     *  </div>
     *  <div class="refsect1" id="versions">
     *   <h2>Version Support</h2>
     *   <div class="informaltable">
     *    <table style="border-collapse: collapse; border-top: 2px solid ; border-bottom: 2px solid ; border-left: 2px solid ; border-right: 2px solid ; ">
     *     <colgroup>
     *      <col style="text-align: left; ">
     *      <col style="text-align: center; " class="firstvers">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; ">
     *      <col style="text-align: center; " class="lastvers">
     *     </colgroup>
     *     <thead>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; "></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; " colspan="4"><span class="bold"><strong>OpenGL ES API Version</strong></span></th>
     *      </tr>
     *      <tr>
     *       <th style="text-align: left; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>Function Name</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>2.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.0</strong></span></th>
     *       <th style="text-align: center; border-right: 2px solid ; border-bottom: 2px solid ; "><span class="bold"><strong>3.1</strong></span></th>
     *       <th style="text-align: center; border-bottom: 2px solid ; "><span class="bold"><strong>3.2</strong></span></th>
     *      </tr>
     *     </thead>
     *     <tbody>
     *      <tr>
     *       <td style="text-align: left; border-right: 2px solid ; "><code class="function">glTexStorage3DMultisample</code></td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; border-right: 2px solid ; ">-</td>
     *       <td style="text-align: center; ">✔</td>
     *      </tr>
     *     </tbody>
     *    </table>
     *   </div>
     *  </div>
     *  <div class="refsect1" id="seealso">
     *   <h2>See Also</h2>
     *   <p>{@link GLES30#glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer) glTexImage3D}, {@link GLES31#glTexStorage2DMultisample(int, int, int, int, int, boolean) glTexStorage2DMultisample}, {@link GLES30#glTexStorage3D(int, int, int, int, int, int) glTexStorage3D}.</p>
     *  </div>
     *  <div class="refsect1" id="Copyright">
     *   <h2>Copyright</h2>
     *   <p>Copyright <span class="trademark"></span>© 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. <a class="link" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.</p>
     *  </div>
     * </div>
     */
    @Api
    void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

    interface DebugProc {

        @Api
        void onMessage(int source, int type, int id, int severity, String message);
    }
}
