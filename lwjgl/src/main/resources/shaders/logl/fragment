#version 330

in vec2 outTexCoord;
in vec3 mvVertexNormal;
in vec3 mvVertexPos;

out vec4 fragColor;

struct Attenuation {
	float constant;
	float linear;
	float exponent;
};

struct PointLight {
	vec3 color;
	vec3 position;
	float intensity;
	Attenuation att;
};

struct Material {
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	int hasTexture;
	float reflectance;
};

// Object color provider
uniform sampler2D texture_sampler;
uniform vec3 ambientLight;
uniform Material material;
uniform PointLight pointLight;

vec4 calculateObjectColor() {
	if (material.hasTexture == 1) {
		return texture(texture_sampler, outTexCoord);
	}
	return material.diffuse;
}

void main() {
	vec4 objectColor = calculateObjectColor();
	vec3 lightPos = pointLight.position;
	vec3 lightColor = pointLight.color;
	
	vec3 norm = normalize(mvVertexPos);
	vec3 lightDir = normalize(lightPos - mvVertexPos);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	fragColor = vec4(ambientLight+diffuse, 1) * objectColor;
}
